
cortex-m0_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800840c  0800840c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800840c  0800840c  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800840c  0800840c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200000a0  080084b4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080084b4  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120cf  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029de  00000000  00000000  00032197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00034b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e38  00000000  00000000  00036cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017130  00000000  00000000  00049b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c960  00000000  00000000  00060c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004738  00000000  00000000  000cd5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f08 	.word	0x08007f08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08007f08 	.word	0x08007f08

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fedb 	bl	8000ff4 <HAL_Init>

  // ====================
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f8f5 	bl	800042c <SystemClock_Config>

  // ====================
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 fa75 	bl	8000730 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000246:	f000 f991 	bl	800056c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800024a:	f000 fa41 	bl	80006d0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800024e:	f000 f94f 	bl	80004f0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000252:	f000 f9e5 	bl	8000620 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // ====================
  Wiznet_Init();
 8000256:	f000 fb47 	bl	80008e8 <Wiznet_Init>

  // Timers
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 800025a:	4b65      	ldr	r3, [pc, #404]	; (80003f0 <main+0x1bc>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2202      	movs	r2, #2
 8000260:	4252      	negs	r2, r2
 8000262:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim1);
 8000264:	4b62      	ldr	r3, [pc, #392]	; (80003f0 <main+0x1bc>)
 8000266:	0018      	movs	r0, r3
 8000268:	f003 f814 	bl	8003294 <HAL_TIM_Base_Start_IT>
  // ====================

  while (1)
  {
    // CLIENT
    printf("Opening a socket #%d\r\n", SOCKET_NUM);
 800026c:	2301      	movs	r3, #1
 800026e:	001a      	movs	r2, r3
 8000270:	4b60      	ldr	r3, [pc, #384]	; (80003f4 <main+0x1c0>)
 8000272:	0011      	movs	r1, r2
 8000274:	0018      	movs	r0, r3
 8000276:	f006 fc27 	bl	8006ac8 <iprintf>
    socketStatus = socket(SOCKET_NUM, Sn_MR_TCP, 818, Sn_MR_ND);
 800027a:	2001      	movs	r0, #1
 800027c:	4a5e      	ldr	r2, [pc, #376]	; (80003f8 <main+0x1c4>)
 800027e:	2320      	movs	r3, #32
 8000280:	2101      	movs	r1, #1
 8000282:	f005 f825 	bl	80052d0 <socket>
 8000286:	0003      	movs	r3, r0
 8000288:	b21a      	sxth	r2, r3
 800028a:	4b5c      	ldr	r3, [pc, #368]	; (80003fc <main+0x1c8>)
 800028c:	801a      	strh	r2, [r3, #0]
    if (socketStatus != SOCKET_NUM) {
 800028e:	4b5b      	ldr	r3, [pc, #364]	; (80003fc <main+0x1c8>)
 8000290:	2200      	movs	r2, #0
 8000292:	5e9b      	ldrsh	r3, [r3, r2]
 8000294:	001a      	movs	r2, r3
 8000296:	2301      	movs	r3, #1
 8000298:	429a      	cmp	r2, r3
 800029a:	d00a      	beq.n	80002b2 <main+0x7e>
      printf("Opening of a socket #%d, failed with code: %d\r\n",
 800029c:	2301      	movs	r3, #1
 800029e:	0019      	movs	r1, r3
 80002a0:	4b56      	ldr	r3, [pc, #344]	; (80003fc <main+0x1c8>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	5e9b      	ldrsh	r3, [r3, r2]
 80002a6:	001a      	movs	r2, r3
 80002a8:	4b55      	ldr	r3, [pc, #340]	; (8000400 <main+0x1cc>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f006 fc0c 	bl	8006ac8 <iprintf>
 80002b0:	e006      	b.n	80002c0 <main+0x8c>
             SOCKET_NUM, socketStatus);
  //      continue;
    } else {
      printf("Socket #%d successfully opened!\r\n",
 80002b2:	2301      	movs	r3, #1
 80002b4:	001a      	movs	r2, r3
 80002b6:	4b53      	ldr	r3, [pc, #332]	; (8000404 <main+0x1d0>)
 80002b8:	0011      	movs	r1, r2
 80002ba:	0018      	movs	r0, r3
 80002bc:	f006 fc04 	bl	8006ac8 <iprintf>
             SOCKET_NUM);
    }
    HAL_Delay(1000);
 80002c0:	23fa      	movs	r3, #250	; 0xfa
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fef9 	bl	80010bc <HAL_Delay>


    socketStatus = httpc_connect(SOCKET_NUM);
 80002ca:	2301      	movs	r3, #1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f004 fbb3 	bl	8004a38 <httpc_connect>
 80002d2:	0003      	movs	r3, r0
 80002d4:	b21a      	sxth	r2, r3
 80002d6:	4b49      	ldr	r3, [pc, #292]	; (80003fc <main+0x1c8>)
 80002d8:	801a      	strh	r2, [r3, #0]
    if (SOCK_OK != socketStatus) {
 80002da:	4b48      	ldr	r3, [pc, #288]	; (80003fc <main+0x1c8>)
 80002dc:	2200      	movs	r2, #0
 80002de:	5e9b      	ldrsh	r3, [r3, r2]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d009      	beq.n	80002f8 <main+0xc4>
      printf("Cannot connect to the server. Code: %d\r\n",
 80002e4:	4b45      	ldr	r3, [pc, #276]	; (80003fc <main+0x1c8>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	5e9b      	ldrsh	r3, [r3, r2]
 80002ea:	001a      	movs	r2, r3
 80002ec:	4b46      	ldr	r3, [pc, #280]	; (8000408 <main+0x1d4>)
 80002ee:	0011      	movs	r1, r2
 80002f0:	0018      	movs	r0, r3
 80002f2:	f006 fbe9 	bl	8006ac8 <iprintf>
 80002f6:	e00e      	b.n	8000316 <main+0xe2>
             socketStatus);
    } else {
      printf("Connected to: %d.%d.%d.%d:%d\r\n",
             SERVER_IP[0], SERVER_IP[1], SERVER_IP[2], SERVER_IP[3], SERVER_PORT);
 80002f8:	23c0      	movs	r3, #192	; 0xc0
      printf("Connected to: %d.%d.%d.%d:%d\r\n",
 80002fa:	0019      	movs	r1, r3
             SERVER_IP[0], SERVER_IP[1], SERVER_IP[2], SERVER_IP[3], SERVER_PORT);
 80002fc:	23a8      	movs	r3, #168	; 0xa8
      printf("Connected to: %d.%d.%d.%d:%d\r\n",
 80002fe:	001c      	movs	r4, r3
             SERVER_IP[0], SERVER_IP[1], SERVER_IP[2], SERVER_IP[3], SERVER_PORT);
 8000300:	2301      	movs	r3, #1
      printf("Connected to: %d.%d.%d.%d:%d\r\n",
 8000302:	001d      	movs	r5, r3
             SERVER_IP[0], SERVER_IP[1], SERVER_IP[2], SERVER_IP[3], SERVER_PORT);
 8000304:	2317      	movs	r3, #23
      printf("Connected to: %d.%d.%d.%d:%d\r\n",
 8000306:	2250      	movs	r2, #80	; 0x50
 8000308:	4840      	ldr	r0, [pc, #256]	; (800040c <main+0x1d8>)
 800030a:	9201      	str	r2, [sp, #4]
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	002b      	movs	r3, r5
 8000310:	0022      	movs	r2, r4
 8000312:	f006 fbd9 	bl	8006ac8 <iprintf>
    }
    HAL_Delay(1000);
 8000316:	23fa      	movs	r3, #250	; 0xfa
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	0018      	movs	r0, r3
 800031c:	f000 fece 	bl	80010bc <HAL_Delay>


    Request request = {
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4a3b      	ldr	r2, [pc, #236]	; (8000410 <main+0x1dc>)
 8000324:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000326:	c313      	stmia	r3!, {r0, r1, r4}
        GET,
        (uint8_t*)"/?page=getcmd&id=6&val=0&st=0",
        (uint8_t*)"192.168.1.23:80"
    };
    socketStatus = httpc_send(SOCKET_NUM, &request);
 8000328:	2201      	movs	r2, #1
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	0019      	movs	r1, r3
 800032e:	0010      	movs	r0, r2
 8000330:	f004 fb98 	bl	8004a64 <httpc_send>
 8000334:	0003      	movs	r3, r0
 8000336:	b21a      	sxth	r2, r3
 8000338:	4b30      	ldr	r3, [pc, #192]	; (80003fc <main+0x1c8>)
 800033a:	801a      	strh	r2, [r3, #0]
    if (socketStatus <= 0) {
 800033c:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <main+0x1c8>)
 800033e:	2200      	movs	r2, #0
 8000340:	5e9b      	ldrsh	r3, [r3, r2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	dc09      	bgt.n	800035a <main+0x126>
      printf("send() failed. Code: %d\r\n", socketStatus);
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <main+0x1c8>)
 8000348:	2200      	movs	r2, #0
 800034a:	5e9b      	ldrsh	r3, [r3, r2]
 800034c:	001a      	movs	r2, r3
 800034e:	4b31      	ldr	r3, [pc, #196]	; (8000414 <main+0x1e0>)
 8000350:	0011      	movs	r1, r2
 8000352:	0018      	movs	r0, r3
 8000354:	f006 fbb8 	bl	8006ac8 <iprintf>
 8000358:	e008      	b.n	800036c <main+0x138>
    } else {
      printf("Request successfully sent. Len: %d\r\n", socketStatus);
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <main+0x1c8>)
 800035c:	2200      	movs	r2, #0
 800035e:	5e9b      	ldrsh	r3, [r3, r2]
 8000360:	001a      	movs	r2, r3
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <main+0x1e4>)
 8000364:	0011      	movs	r1, r2
 8000366:	0018      	movs	r0, r3
 8000368:	f006 fbae 	bl	8006ac8 <iprintf>
    }
    HAL_Delay(1000);
 800036c:	23fa      	movs	r3, #250	; 0xfa
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fea3 	bl	80010bc <HAL_Delay>

    socketStatus = httpc_recv(SOCKET_NUM);
 8000376:	2301      	movs	r3, #1
 8000378:	0018      	movs	r0, r3
 800037a:	f004 fc1b 	bl	8004bb4 <httpc_recv>
 800037e:	0003      	movs	r3, r0
 8000380:	b21a      	sxth	r2, r3
 8000382:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <main+0x1c8>)
 8000384:	801a      	strh	r2, [r3, #0]
    if (socketStatus <= 0) {
 8000386:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <main+0x1c8>)
 8000388:	2200      	movs	r2, #0
 800038a:	5e9b      	ldrsh	r3, [r3, r2]
 800038c:	2b00      	cmp	r3, #0
 800038e:	dc09      	bgt.n	80003a4 <main+0x170>
      printf("recv() failed. Code: %d\r\n", socketStatus);
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <main+0x1c8>)
 8000392:	2200      	movs	r2, #0
 8000394:	5e9b      	ldrsh	r3, [r3, r2]
 8000396:	001a      	movs	r2, r3
 8000398:	4b20      	ldr	r3, [pc, #128]	; (800041c <main+0x1e8>)
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f006 fb93 	bl	8006ac8 <iprintf>
 80003a2:	e003      	b.n	80003ac <main+0x178>
    } else {
      printf("Reply processed.\r\n");
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <main+0x1ec>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f006 fc1a 	bl	8006be0 <puts>
    }
    HAL_Delay(1000);
 80003ac:	23fa      	movs	r3, #250	; 0xfa
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fe83 	bl	80010bc <HAL_Delay>

    printf("Disconnecting socket #%d\r\n", SOCKET_NUM);
 80003b6:	2301      	movs	r3, #1
 80003b8:	001a      	movs	r2, r3
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <main+0x1f0>)
 80003bc:	0011      	movs	r1, r2
 80003be:	0018      	movs	r0, r3
 80003c0:	f006 fb82 	bl	8006ac8 <iprintf>
    disconnect(SOCKET_NUM);
 80003c4:	2301      	movs	r3, #1
 80003c6:	0018      	movs	r0, r3
 80003c8:	f005 fa32 	bl	8005830 <disconnect>

    printf("Closing socket #%d\r\n", SOCKET_NUM);
 80003cc:	2301      	movs	r3, #1
 80003ce:	001a      	movs	r2, r3
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <main+0x1f4>)
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f006 fb77 	bl	8006ac8 <iprintf>
    close(SOCKET_NUM);
 80003da:	2301      	movs	r3, #1
 80003dc:	0018      	movs	r0, r3
 80003de:	f005 f8b1 	bl	8005544 <close>

    HAL_Delay(1000);
 80003e2:	23fa      	movs	r3, #250	; 0xfa
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fe68 	bl	80010bc <HAL_Delay>
  {
 80003ec:	e73e      	b.n	800026c <main+0x38>
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	20000120 	.word	0x20000120
 80003f4:	08007f50 	.word	0x08007f50
 80003f8:	00000332 	.word	0x00000332
 80003fc:	20000000 	.word	0x20000000
 8000400:	08007f68 	.word	0x08007f68
 8000404:	08007f98 	.word	0x08007f98
 8000408:	08007fbc 	.word	0x08007fbc
 800040c:	08007fe8 	.word	0x08007fe8
 8000410:	080080b0 	.word	0x080080b0
 8000414:	08008008 	.word	0x08008008
 8000418:	08008024 	.word	0x08008024
 800041c:	0800804c 	.word	0x0800804c
 8000420:	08008068 	.word	0x08008068
 8000424:	0800807c 	.word	0x0800807c
 8000428:	08008098 	.word	0x08008098

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b095      	sub	sp, #84	; 0x54
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	2420      	movs	r4, #32
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2330      	movs	r3, #48	; 0x30
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f006 fb3a 	bl	8006ab6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000442:	2310      	movs	r3, #16
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	0018      	movs	r0, r3
 8000448:	2310      	movs	r3, #16
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f006 fb32 	bl	8006ab6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2310      	movs	r3, #16
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f006 fb2b 	bl	8006ab6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000460:	0021      	movs	r1, r4
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2202      	movs	r2, #2
 8000466:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2201      	movs	r2, #1
 800046c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2210      	movs	r2, #16
 8000472:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2202      	movs	r2, #2
 8000478:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	22a0      	movs	r2, #160	; 0xa0
 8000484:	0392      	lsls	r2, r2, #14
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	187b      	adds	r3, r7, r1
 8000490:	0018      	movs	r0, r3
 8000492:	f001 f957 	bl	8001744 <HAL_RCC_OscConfig>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800049a:	f000 fb6b 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	2110      	movs	r1, #16
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2207      	movs	r2, #7
 80004a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2202      	movs	r2, #2
 80004aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2101      	movs	r1, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fc5b 	bl	8001d78 <HAL_RCC_ClockConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004c6:	f000 fb55 	bl	8000b74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004ca:	003b      	movs	r3, r7
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d6:	003b      	movs	r3, r7
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fd9f 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004e2:	f000 fb47 	bl	8000b74 <Error_Handler>
  }
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b015      	add	sp, #84	; 0x54
 80004ec:	bd90      	pop	{r4, r7, pc}
	...

080004f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_SPI2_Init+0x74>)
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <MX_SPI2_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_SPI2_Init+0x74>)
 80004fc:	2282      	movs	r2, #130	; 0x82
 80004fe:	0052      	lsls	r2, r2, #1
 8000500:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_SPI2_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_SPI2_Init+0x74>)
 800050a:	22e0      	movs	r2, #224	; 0xe0
 800050c:	00d2      	lsls	r2, r2, #3
 800050e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_SPI2_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_SPI2_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_SPI2_Init+0x74>)
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_SPI2_Init+0x74>)
 8000526:	2208      	movs	r2, #8
 8000528:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_SPI2_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_SPI2_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_SPI2_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_SPI2_Init+0x74>)
 800053e:	2207      	movs	r2, #7
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_SPI2_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_SPI2_Init+0x74>)
 800054a:	2208      	movs	r2, #8
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MX_SPI2_Init+0x74>)
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fe31 	bl	80021b8 <HAL_SPI_Init>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800055a:	f000 fb0b 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000bc 	.word	0x200000bc
 8000568:	40003800 	.word	0x40003800

0800056c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
  // ====================

  // ====================
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000572:	2308      	movs	r3, #8
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0018      	movs	r0, r3
 8000578:	2310      	movs	r3, #16
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f006 fa9a 	bl	8006ab6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000582:	003b      	movs	r3, r7
 8000584:	0018      	movs	r0, r3
 8000586:	2308      	movs	r3, #8
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f006 fa93 	bl	8006ab6 <memset>
  /* USER CODE BEGIN TIM1_Init 1 */
  // ====================

  // ====================
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <MX_TIM1_Init+0xa4>)
 8000592:	4a20      	ldr	r2, [pc, #128]	; (8000614 <MX_TIM1_Init+0xa8>)
 8000594:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_TIM1_Init+0xa4>)
 8000598:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <MX_TIM1_Init+0xac>)
 800059a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_TIM1_Init+0xa4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_TIM1_Init+0xa4>)
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <MX_TIM1_Init+0xb0>)
 80005a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_TIM1_Init+0xa4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_TIM1_Init+0xa4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_TIM1_Init+0xa4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_TIM1_Init+0xa4>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 fe19 	bl	80031f4 <HAL_TIM_Base_Init>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80005c6:	f000 fad5 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ca:	2108      	movs	r1, #8
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	0152      	lsls	r2, r2, #5
 80005d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005d4:	187a      	adds	r2, r7, r1
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_TIM1_Init+0xa4>)
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 ffbc 	bl	8003558 <HAL_TIM_ConfigClockSource>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005e4:	f000 fac6 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e8:	003b      	movs	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ee:	003b      	movs	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005f4:	003a      	movs	r2, r7
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_TIM1_Init+0xa4>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f003 f9b0 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000604:	f000 fab6 	bl	8000b74 <Error_Handler>
  // ====================

  // ====================
  /* USER CODE END TIM1_Init 2 */

}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b006      	add	sp, #24
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000120 	.word	0x20000120
 8000614:	40012c00 	.word	0x40012c00
 8000618:	0000bb7f 	.word	0x0000bb7f
 800061c:	000003e7 	.word	0x000003e7

08000620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	2308      	movs	r3, #8
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2310      	movs	r3, #16
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f006 fa40 	bl	8006ab6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2308      	movs	r3, #8
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f006 fa39 	bl	8006ab6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_TIM3_Init+0xa0>)
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <MX_TIM3_Init+0xa4>)
 8000648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_TIM3_Init+0xa0>)
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <MX_TIM3_Init+0xa8>)
 800064e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_TIM3_Init+0xa0>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_TIM3_Init+0xa0>)
 8000658:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_TIM3_Init+0xac>)
 800065a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_TIM3_Init+0xa0>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_TIM3_Init+0xa0>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_TIM3_Init+0xa0>)
 800066a:	0018      	movs	r0, r3
 800066c:	f002 fdc2 	bl	80031f4 <HAL_TIM_Base_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000674:	f000 fa7e 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000678:	2108      	movs	r1, #8
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0152      	lsls	r2, r2, #5
 8000680:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000682:	187a      	adds	r2, r7, r1
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_TIM3_Init+0xa0>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f002 ff65 	bl	8003558 <HAL_TIM_ConfigClockSource>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000692:	f000 fa6f 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000696:	003b      	movs	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069c:	003b      	movs	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a2:	003a      	movs	r2, r7
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_TIM3_Init+0xa0>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f003 f959 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006b2:	f000 fa5f 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b006      	add	sp, #24
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000168 	.word	0x20000168
 80006c4:	40000400 	.word	0x40000400
 80006c8:	0000bb7f 	.word	0x0000bb7f
 80006cc:	000003e7 	.word	0x000003e7

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 1 */
  // ====================

  // ====================
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_USART1_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006dc:	22e1      	movs	r2, #225	; 0xe1
 80006de:	0252      	lsls	r2, r2, #9
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART1_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000714:	0018      	movs	r0, r3
 8000716:	f003 f98b 	bl	8003a30 <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 fa29 	bl	8000b74 <Error_Handler>
  // ====================

  // ====================
  /* USER CODE END USART1_Init 2 */

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200001b0 	.word	0x200001b0
 800072c:	40013800 	.word	0x40013800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08b      	sub	sp, #44	; 0x2c
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	2414      	movs	r4, #20
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2314      	movs	r3, #20
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f006 f9b8 	bl	8006ab6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b65      	ldr	r3, [pc, #404]	; (80008dc <MX_GPIO_Init+0x1ac>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b64      	ldr	r3, [pc, #400]	; (80008dc <MX_GPIO_Init+0x1ac>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0309      	lsls	r1, r1, #12
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b61      	ldr	r3, [pc, #388]	; (80008dc <MX_GPIO_Init+0x1ac>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	031b      	lsls	r3, r3, #12
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <MX_GPIO_Init+0x1ac>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b5d      	ldr	r3, [pc, #372]	; (80008dc <MX_GPIO_Init+0x1ac>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	03c9      	lsls	r1, r1, #15
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b5a      	ldr	r3, [pc, #360]	; (80008dc <MX_GPIO_Init+0x1ac>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	03db      	lsls	r3, r3, #15
 8000778:	4013      	ands	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b57      	ldr	r3, [pc, #348]	; (80008dc <MX_GPIO_Init+0x1ac>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <MX_GPIO_Init+0x1ac>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b53      	ldr	r3, [pc, #332]	; (80008dc <MX_GPIO_Init+0x1ac>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b50      	ldr	r3, [pc, #320]	; (80008dc <MX_GPIO_Init+0x1ac>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b4f      	ldr	r3, [pc, #316]	; (80008dc <MX_GPIO_Init+0x1ac>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	02c9      	lsls	r1, r1, #11
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b4c      	ldr	r3, [pc, #304]	; (80008dc <MX_GPIO_Init+0x1ac>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	02db      	lsls	r3, r3, #11
 80007b0:	4013      	ands	r3, r2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|SPI2_RST_Pin, GPIO_PIN_RESET);
 80007b6:	2381      	movs	r3, #129	; 0x81
 80007b8:	0159      	lsls	r1, r3, #5
 80007ba:	2390      	movs	r3, #144	; 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	2200      	movs	r2, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 ff6b 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80007c6:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <MX_GPIO_Init+0x1b0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	2102      	movs	r1, #2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 ff65 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4843      	ldr	r0, [pc, #268]	; (80008e4 <MX_GPIO_Init+0x1b4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	0019      	movs	r1, r3
 80007dc:	f000 ff5e 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserBtn_Pin */
  GPIO_InitStruct.Pin = UserBtn_Pin;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0192      	lsls	r2, r2, #6
 80007e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2284      	movs	r2, #132	; 0x84
 80007ec:	0392      	lsls	r2, r2, #14
 80007ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UserBtn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	4a3a      	ldr	r2, [pc, #232]	; (80008e4 <MX_GPIO_Init+0x1b4>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f000 fddd 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2220      	movs	r2, #32
 8000806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2201      	movs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800081a:	193a      	adds	r2, r7, r4
 800081c:	2390      	movs	r3, #144	; 0x90
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fdca 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2202      	movs	r2, #2
 800082c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2201      	movs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000840:	193b      	adds	r3, r7, r4
 8000842:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <MX_GPIO_Init+0x1b0>)
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f000 fdb8 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800084c:	0021      	movs	r1, r4
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0092      	lsls	r2, r2, #2
 8000854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	000c      	movs	r4, r1
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2201      	movs	r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800086a:	193b      	adds	r3, r7, r4
 800086c:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <MX_GPIO_Init+0x1b4>)
 800086e:	0019      	movs	r1, r3
 8000870:	0010      	movs	r0, r2
 8000872:	f000 fda3 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_INT_Pin */
  GPIO_InitStruct.Pin = SPI2_INT_Pin;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2288      	movs	r2, #136	; 0x88
 8000882:	0352      	lsls	r2, r2, #13
 8000884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI2_INT_GPIO_Port, &GPIO_InitStruct);
 800088c:	193a      	adds	r2, r7, r4
 800088e:	2390      	movs	r3, #144	; 0x90
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fd91 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_RST_Pin */
  GPIO_InitStruct.Pin = SPI2_RST_Pin;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0152      	lsls	r2, r2, #5
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2201      	movs	r2, #1
 80008b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_RST_GPIO_Port, &GPIO_InitStruct);
 80008b6:	187a      	adds	r2, r7, r1
 80008b8:	2390      	movs	r3, #144	; 0x90
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fd7c 	bl	80013bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2007      	movs	r0, #7
 80008ca:	f000 fcc7 	bl	800125c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008ce:	2007      	movs	r0, #7
 80008d0:	f000 fcd9 	bl	8001286 <HAL_NVIC_EnableIRQ>

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b00b      	add	sp, #44	; 0x2c
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000400 	.word	0x48000400
 80008e4:	48000800 	.word	0x48000800

080008e8 <Wiznet_Init>:

/* USER CODE BEGIN 4 */
// ====================
// �?нициализация настроек устройства
void Wiznet_Init(void)
{
 80008e8:	b5b0      	push	{r4, r5, r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  // hard reset
  HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_RESET);
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	0159      	lsls	r1, r3, #5
 80008f2:	2390      	movs	r3, #144	; 0x90
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2200      	movs	r2, #0
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 fecf 	bl	800169c <HAL_GPIO_WritePin>
  HAL_Delay(70);
 80008fe:	2046      	movs	r0, #70	; 0x46
 8000900:	f000 fbdc 	bl	80010bc <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_SET);
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	0159      	lsls	r1, r3, #5
 8000908:	2390      	movs	r3, #144	; 0x90
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	2201      	movs	r2, #1
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fec4 	bl	800169c <HAL_GPIO_WritePin>
  HAL_Delay(70);
 8000914:	2046      	movs	r0, #70	; 0x46
 8000916:	f000 fbd1 	bl	80010bc <HAL_Delay>

  // регистрация функций
  reg_wizchip_cs_cbfunc(Wiznet_Select, Wiznet_Unselect);
 800091a:	4a28      	ldr	r2, [pc, #160]	; (80009bc <Wiznet_Init+0xd4>)
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <Wiznet_Init+0xd8>)
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f005 fa79 	bl	8005e18 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(Wiznet_ReadByte, Wiznet_WriteByte);
 8000926:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <Wiznet_Init+0xdc>)
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <Wiznet_Init+0xe0>)
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f005 fa97 	bl	8005e60 <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(Wiznet_ReadBuff, Wiznet_WriteBuff);
 8000932:	4a26      	ldr	r2, [pc, #152]	; (80009cc <Wiznet_Init+0xe4>)
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <Wiznet_Init+0xe8>)
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f005 fabd 	bl	8005eb8 <reg_wizchip_spiburst_cbfunc>
  //  reg_wizchip_cris_cbfunc(Wiznet_CrisEnter_Callback, Wiznet_CrisExit_Callback);

  // инициализация размеров буферов для сокетов
  uint8_t rx_tx_buff_sizes[2][8] = {
 800093e:	2118      	movs	r1, #24
 8000940:	187b      	adds	r3, r7, r1
 8000942:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <Wiznet_Init+0xec>)
 8000944:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000946:	c331      	stmia	r3!, {r0, r4, r5}
 8000948:	6812      	ldr	r2, [r2, #0]
 800094a:	601a      	str	r2, [r3, #0]
      { 2, 2, 2, 2, 2, 2, 2, 2, }, { 2, 2, 2, 2, 2, 2, 2, 2, }
  };
  ctlwizchip(CW_INIT_WIZCHIP, rx_tx_buff_sizes);
 800094c:	187b      	adds	r3, r7, r1
 800094e:	0019      	movs	r1, r3
 8000950:	2001      	movs	r0, #1
 8000952:	f005 fadd 	bl	8005f10 <ctlwizchip>

  // инициализация параметров сети
  wiz_NetInfo netInfo = {
 8000956:	003b      	movs	r3, r7
 8000958:	0018      	movs	r0, r3
 800095a:	2317      	movs	r3, #23
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f006 f8a9 	bl	8006ab6 <memset>
 8000964:	003b      	movs	r3, r7
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <Wiznet_Init+0xf0>)
 8000968:	6811      	ldr	r1, [r2, #0]
 800096a:	6019      	str	r1, [r3, #0]
 800096c:	8892      	ldrh	r2, [r2, #4]
 800096e:	809a      	strh	r2, [r3, #4]
 8000970:	003b      	movs	r3, r7
 8000972:	2206      	movs	r2, #6
 8000974:	4919      	ldr	r1, [pc, #100]	; (80009dc <Wiznet_Init+0xf4>)
 8000976:	189b      	adds	r3, r3, r2
 8000978:	2204      	movs	r2, #4
 800097a:	0018      	movs	r0, r3
 800097c:	f006 f892 	bl	8006aa4 <memcpy>
 8000980:	003b      	movs	r3, r7
 8000982:	220a      	movs	r2, #10
 8000984:	4916      	ldr	r1, [pc, #88]	; (80009e0 <Wiznet_Init+0xf8>)
 8000986:	189b      	adds	r3, r3, r2
 8000988:	2204      	movs	r2, #4
 800098a:	0018      	movs	r0, r3
 800098c:	f006 f88a 	bl	8006aa4 <memcpy>
 8000990:	003b      	movs	r3, r7
 8000992:	220e      	movs	r2, #14
 8000994:	4913      	ldr	r1, [pc, #76]	; (80009e4 <Wiznet_Init+0xfc>)
 8000996:	189b      	adds	r3, r3, r2
 8000998:	2204      	movs	r2, #4
 800099a:	0018      	movs	r0, r3
 800099c:	f006 f882 	bl	8006aa4 <memcpy>
 80009a0:	003b      	movs	r3, r7
 80009a2:	2201      	movs	r2, #1
 80009a4:	759a      	strb	r2, [r3, #22]
      .sn   = { 255, 255, 255, 0 },
      .gw   = { 192, 168, 1, 23 },
//      .dns  = { 192, 168, 1, 1 },
      .dhcp = NETINFO_STATIC
  };
  ctlnetwork(CN_SET_NETINFO, (void*)&netInfo);
 80009a6:	003b      	movs	r3, r7
 80009a8:	0019      	movs	r1, r3
 80009aa:	2000      	movs	r0, #0
 80009ac:	f005 fb96 	bl	80060dc <ctlnetwork>
  printNetworkInfo();
 80009b0:	f003 ffbc 	bl	800492c <printNetworkInfo>
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b00a      	add	sp, #40	; 0x28
 80009ba:	bdb0      	pop	{r4, r5, r7, pc}
 80009bc:	08000a05 	.word	0x08000a05
 80009c0:	080009e9 	.word	0x080009e9
 80009c4:	08000a95 	.word	0x08000a95
 80009c8:	08000a79 	.word	0x08000a79
 80009cc:	08000a4d 	.word	0x08000a4d
 80009d0:	08000a21 	.word	0x08000a21
 80009d4:	080080bc 	.word	0x080080bc
 80009d8:	080080cc 	.word	0x080080cc
 80009dc:	080080d4 	.word	0x080080d4
 80009e0:	080080d8 	.word	0x080080d8
 80009e4:	080080dc 	.word	0x080080dc

080009e8 <Wiznet_Select>:
void Wiznet_Select(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <Wiznet_Select+0x18>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	2102      	movs	r1, #2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fe52 	bl	800169c <HAL_GPIO_WritePin>
//  printf("Wiznet_Select(void)\r\n");
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	48000400 	.word	0x48000400

08000a04 <Wiznet_Unselect>:
void Wiznet_Unselect(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <Wiznet_Unselect+0x18>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 fe44 	bl	800169c <HAL_GPIO_WritePin>
//  printf("Wiznet_Unselect(void)\r\n");
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	48000400 	.word	0x48000400

08000a20 <Wiznet_ReadBuff>:
void Wiznet_ReadBuff(uint8_t* buff, uint16_t len)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	000a      	movs	r2, r1
 8000a2a:	1cbb      	adds	r3, r7, #2
 8000a2c:	801a      	strh	r2, [r3, #0]
  HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8000a2e:	2301      	movs	r3, #1
 8000a30:	425c      	negs	r4, r3
 8000a32:	1cbb      	adds	r3, r7, #2
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <Wiznet_ReadBuff+0x28>)
 8000a3a:	0023      	movs	r3, r4
 8000a3c:	f001 fdcc 	bl	80025d8 <HAL_SPI_Receive>
//  printf("Wiznet_ReadBuff(uint8_t* buff = %d, uint16_t len = %d)\r\n", *buff, len);
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b003      	add	sp, #12
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	200000bc 	.word	0x200000bc

08000a4c <Wiznet_WriteBuff>:
void Wiznet_WriteBuff(uint8_t* buff, uint16_t len)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	000a      	movs	r2, r1
 8000a56:	1cbb      	adds	r3, r7, #2
 8000a58:	801a      	strh	r2, [r3, #0]
//  printf("Wiznet_WriteBuff(uint8_t* buff = %d, uint16_t len = %d)\r\n", *buff, len);
  HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	425c      	negs	r4, r3
 8000a5e:	1cbb      	adds	r3, r7, #2
 8000a60:	881a      	ldrh	r2, [r3, #0]
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <Wiznet_WriteBuff+0x28>)
 8000a66:	0023      	movs	r3, r4
 8000a68:	f001 fc5e 	bl	8002328 <HAL_SPI_Transmit>
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	200000bc 	.word	0x200000bc

08000a78 <Wiznet_ReadByte>:
uint8_t Wiznet_ReadByte(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  uint8_t byte;
  Wiznet_ReadBuff(&byte, sizeof(byte));
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	2101      	movs	r1, #1
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff ffcc 	bl	8000a20 <Wiznet_ReadBuff>
//  printf("Wiznet_ReadByte(void)  byte = %d\r\n", byte);
  return byte;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <Wiznet_WriteByte>:
void Wiznet_WriteByte(uint8_t byte)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	701a      	strb	r2, [r3, #0]
//  printf("Wiznet_WriteByte(uint8_t byte = %d)\r\n", byte);
  Wiznet_WriteBuff(&byte, sizeof(byte));
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ffd1 	bl	8000a4c <Wiznet_WriteBuff>
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <_write>:
//  printf("Wiznet_CrisExit_Callback\r\n");
//}

// перенаправление printf в Uart
int _write(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <_write+0x28>)
 8000acc:	f003 f804 	bl	8003ad8 <HAL_UART_Transmit>
  return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	200001b0 	.word	0x200001b0

08000ae0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1dbb      	adds	r3, r7, #6
 8000aea:	801a      	strh	r2, [r3, #0]
  printf("EXTI_pin = %d\r\n", GPIO_Pin);
 8000aec:	1dbb      	adds	r3, r7, #6
 8000aee:	881a      	ldrh	r2, [r3, #0]
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x54>)
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f005 ffe7 	bl	8006ac8 <iprintf>
  if (GPIO_Pin == UserBtn_Pin) {
 8000afa:	1dbb      	adds	r3, r7, #6
 8000afc:	881a      	ldrh	r2, [r3, #0]
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	019b      	lsls	r3, r3, #6
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d108      	bne.n	8000b18 <HAL_GPIO_EXTI_Callback+0x38>
    HAL_GPIO_TogglePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin);
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	015a      	lsls	r2, r3, #5
 8000b0a:	2390      	movs	r3, #144	; 0x90
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fde0 	bl	80016d6 <HAL_GPIO_TogglePin>
//    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  } else if (GPIO_Pin == SPI2_INT_Pin) {
    printf("Got LAN module's interrupt\r\n");
  }

}
 8000b16:	e009      	b.n	8000b2c <HAL_GPIO_EXTI_Callback+0x4c>
  } else if (GPIO_Pin == SPI2_INT_Pin) {
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d103      	bne.n	8000b2c <HAL_GPIO_EXTI_Callback+0x4c>
    printf("Got LAN module's interrupt\r\n");
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f006 f85a 	bl	8006be0 <puts>
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	080080e0 	.word	0x080080e0
 8000b38:	080080f0 	.word	0x080080f0

08000b3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d10a      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x28>
    static uint32_t seconds = 0;
    ++seconds;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b56:	601a      	str	r2, [r3, #0]
//    printf("%02d:%02d:%02d\r\n",
//           seconds / 60 / 60,
//           seconds / 60,
//           seconds % 60
//           );
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b58:	2390      	movs	r3, #144	; 0x90
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fdb9 	bl	80016d6 <HAL_GPIO_TogglePin>
  } else if (htim->Instance) {

  }
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40012c00 	.word	0x40012c00
 8000b70:	20000234 	.word	0x20000234

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
  // ====================
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <Error_Handler+0x20>)
 8000b82:	0019      	movs	r1, r3
 8000b84:	0010      	movs	r0, r2
 8000b86:	f000 fda6 	bl	80016d6 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000b8a:	20c8      	movs	r0, #200	; 0xc8
 8000b8c:	f000 fa96 	bl	80010bc <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000b90:	e7f4      	b.n	8000b7c <Error_Handler+0x8>
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	48000800 	.word	0x48000800

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	699a      	ldr	r2, [r3, #24]
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	619a      	str	r2, [r3, #24]
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x44>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0549      	lsls	r1, r1, #21
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	61da      	str	r2, [r3, #28]
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_MspInit+0x44>)
 8000bc6:	69da      	ldr	r2, [r3, #28]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	4013      	ands	r3, r2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	2414      	movs	r4, #20
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	0018      	movs	r0, r3
 8000bee:	2314      	movs	r3, #20
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f005 ff5f 	bl	8006ab6 <memset>
  if(hspi->Instance==SPI2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <HAL_SPI_MspInit+0xa0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d13a      	bne.n	8000c78 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_SPI_MspInit+0xa4>)
 8000c04:	69da      	ldr	r2, [r3, #28]
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_SPI_MspInit+0xa4>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	01c9      	lsls	r1, r1, #7
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	61da      	str	r2, [r3, #28]
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_SPI_MspInit+0xa4>)
 8000c12:	69da      	ldr	r2, [r3, #28]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	01db      	lsls	r3, r3, #7
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0xa4>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0xa4>)
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	02c9      	lsls	r1, r1, #11
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0xa4>)
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	02db      	lsls	r3, r3, #11
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	22e0      	movs	r2, #224	; 0xe0
 8000c3e:	0212      	lsls	r2, r2, #8
 8000c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	0021      	movs	r1, r4
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2202      	movs	r2, #2
 8000c48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2203      	movs	r2, #3
 8000c54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_SPI_MspInit+0xa8>)
 8000c60:	0019      	movs	r1, r3
 8000c62:	0010      	movs	r0, r2
 8000c64:	f000 fbaa 	bl	80013bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	201a      	movs	r0, #26
 8000c6e:	f000 faf5 	bl	800125c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c72:	201a      	movs	r0, #26
 8000c74:	f000 fb07 	bl	8001286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b00b      	add	sp, #44	; 0x2c
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	40003800 	.word	0x40003800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_TIM_Base_MspInit+0x8c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11e      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_TIM_Base_MspInit+0x90>)
 8000ca0:	699a      	ldr	r2, [r3, #24]
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_TIM_Base_MspInit+0x90>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	0109      	lsls	r1, r1, #4
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	619a      	str	r2, [r3, #24]
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_TIM_Base_MspInit+0x90>)
 8000cae:	699a      	ldr	r2, [r3, #24]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	200d      	movs	r0, #13
 8000cc0:	f000 facc 	bl	800125c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000cc4:	200d      	movs	r0, #13
 8000cc6:	f000 fade 	bl	8001286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	200e      	movs	r0, #14
 8000cd0:	f000 fac4 	bl	800125c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cd4:	200e      	movs	r0, #14
 8000cd6:	f000 fad6 	bl	8001286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cda:	e018      	b.n	8000d0e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <HAL_TIM_Base_MspInit+0x94>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d113      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_TIM_Base_MspInit+0x90>)
 8000ce8:	69da      	ldr	r2, [r3, #28]
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_TIM_Base_MspInit+0x90>)
 8000cec:	2102      	movs	r1, #2
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	61da      	str	r2, [r3, #28]
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_TIM_Base_MspInit+0x90>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2010      	movs	r0, #16
 8000d04:	f000 faaa 	bl	800125c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d08:	2010      	movs	r0, #16
 8000d0a:	f000 fabc 	bl	8001286 <HAL_NVIC_EnableIRQ>
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40012c00 	.word	0x40012c00
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40000400 	.word	0x40000400

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2414      	movs	r4, #20
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f005 febd 	bl	8006ab6 <memset>
  if(huart->Instance==USART1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_UART_MspInit+0xa4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d13b      	bne.n	8000dbe <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_UART_MspInit+0xa8>)
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_UART_MspInit+0xa8>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	01c9      	lsls	r1, r1, #7
 8000d50:	430a      	orrs	r2, r1
 8000d52:	619a      	str	r2, [r3, #24]
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_UART_MspInit+0xa8>)
 8000d56:	699a      	ldr	r2, [r3, #24]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	01db      	lsls	r3, r3, #7
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0xa8>)
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_UART_MspInit+0xa8>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0289      	lsls	r1, r1, #10
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_UART_MspInit+0xa8>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	029b      	lsls	r3, r3, #10
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	22c0      	movs	r2, #192	; 0xc0
 8000d82:	00d2      	lsls	r2, r2, #3
 8000d84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	0021      	movs	r1, r4
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2203      	movs	r2, #3
 8000d98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	187a      	adds	r2, r7, r1
 8000da2:	2390      	movs	r3, #144	; 0x90
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 fb07 	bl	80013bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	201b      	movs	r0, #27
 8000db4:	f000 fa52 	bl	800125c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000db8:	201b      	movs	r0, #27
 8000dba:	f000 fa64 	bl	8001286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b00b      	add	sp, #44	; 0x2c
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40013800 	.word	0x40013800
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f946 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_INT_Pin);
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fc80 	bl	800170c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UserBtn_Pin);
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	019b      	lsls	r3, r3, #6
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fc7b 	bl	800170c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f002 fa82 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000120 	.word	0x20000120

08000e34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <TIM1_CC_IRQHandler+0x14>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f002 fa76 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000120 	.word	0x20000120

08000e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <TIM3_IRQHandler+0x14>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f002 fa6a 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	20000168 	.word	0x20000168

08000e64 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <SPI2_IRQHandler+0x14>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 fed2 	bl	8002c14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	200000bc 	.word	0x200000bc

08000e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <USART1_IRQHandler+0x14>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f002 fed2 	bl	8003c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	200001b0 	.word	0x200001b0

08000e94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	e00a      	b.n	8000ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea6:	e000      	b.n	8000eaa <_read+0x16>
 8000ea8:	bf00      	nop
 8000eaa:	0001      	movs	r1, r0
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	60ba      	str	r2, [r7, #8]
 8000eb2:	b2ca      	uxtb	r2, r1
 8000eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf0      	blt.n	8000ea6 <_read+0x12>
	}

return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b006      	add	sp, #24
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	425b      	negs	r3, r3
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	0192      	lsls	r2, r2, #6
 8000ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	0018      	movs	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b004      	add	sp, #16
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f005 fd7a 	bl	8006a50 <__errno>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	18d2      	adds	r2, r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b006      	add	sp, #24
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20002000 	.word	0x20002000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000238 	.word	0x20000238
 8000f90:	20000270 	.word	0x20000270

08000f94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fca:	f7ff ffe3 	bl	8000f94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fce:	f005 fd45 	bl	8006a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff f92f 	bl	8000234 <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   r0, =_estack
 8000fd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000fe4:	08008414 	.word	0x08008414
  ldr r2, =_sbss
 8000fe8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000fec:	20000270 	.word	0x20000270

08000ff0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_Init+0x24>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_Init+0x24>)
 8000ffe:	2110      	movs	r1, #16
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f809 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100a:	f7ff fdc5 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_InitTick+0x5c>)
 8001026:	681c      	ldr	r4, [r3, #0]
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_InitTick+0x60>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	0019      	movs	r1, r3
 800102e:	23fa      	movs	r3, #250	; 0xfa
 8001030:	0098      	lsls	r0, r3, #2
 8001032:	f7ff f873 	bl	800011c <__udivsi3>
 8001036:	0003      	movs	r3, r0
 8001038:	0019      	movs	r1, r3
 800103a:	0020      	movs	r0, r4
 800103c:	f7ff f86e 	bl	800011c <__udivsi3>
 8001040:	0003      	movs	r3, r0
 8001042:	0018      	movs	r0, r3
 8001044:	f000 f92f 	bl	80012a6 <HAL_SYSTICK_Config>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e00f      	b.n	8001070 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d80b      	bhi.n	800106e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	2301      	movs	r3, #1
 800105a:	425b      	negs	r3, r3
 800105c:	2200      	movs	r2, #0
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f8fc 	bl	800125c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_InitTick+0x64>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b003      	add	sp, #12
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	20000004 	.word	0x20000004
 800107c:	2000000c 	.word	0x2000000c
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	001a      	movs	r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	18d2      	adds	r2, r2, r3
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_IncTick+0x20>)
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	2000023c 	.word	0x2000023c

080010a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_GetTick+0x10>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	2000023c 	.word	0x2000023c

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff fff0 	bl	80010a8 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	001a      	movs	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	189b      	adds	r3, r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	f7ff ffe0 	bl	80010a8 <HAL_GetTick>
 80010e8:	0002      	movs	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	2000000c 	.word	0x2000000c

08001104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	0002      	movs	r2, r0
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b7f      	cmp	r3, #127	; 0x7f
 8001116:	d809      	bhi.n	800112c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	001a      	movs	r2, r3
 800111e:	231f      	movs	r3, #31
 8001120:	401a      	ands	r2, r3
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_EnableIRQ+0x30>)
 8001124:	2101      	movs	r1, #1
 8001126:	4091      	lsls	r1, r2
 8001128:	000a      	movs	r2, r1
 800112a:	601a      	str	r2, [r3, #0]
  }
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	0002      	movs	r2, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b7f      	cmp	r3, #127	; 0x7f
 800114c:	d828      	bhi.n	80011a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114e:	4a2f      	ldr	r2, [pc, #188]	; (800120c <__NVIC_SetPriority+0xd4>)
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b25b      	sxtb	r3, r3
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	33c0      	adds	r3, #192	; 0xc0
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	589b      	ldr	r3, [r3, r2]
 800115e:	1dfa      	adds	r2, r7, #7
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	0011      	movs	r1, r2
 8001164:	2203      	movs	r2, #3
 8001166:	400a      	ands	r2, r1
 8001168:	00d2      	lsls	r2, r2, #3
 800116a:	21ff      	movs	r1, #255	; 0xff
 800116c:	4091      	lsls	r1, r2
 800116e:	000a      	movs	r2, r1
 8001170:	43d2      	mvns	r2, r2
 8001172:	401a      	ands	r2, r3
 8001174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	019b      	lsls	r3, r3, #6
 800117a:	22ff      	movs	r2, #255	; 0xff
 800117c:	401a      	ands	r2, r3
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0018      	movs	r0, r3
 8001184:	2303      	movs	r3, #3
 8001186:	4003      	ands	r3, r0
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118c:	481f      	ldr	r0, [pc, #124]	; (800120c <__NVIC_SetPriority+0xd4>)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b25b      	sxtb	r3, r3
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	430a      	orrs	r2, r1
 8001198:	33c0      	adds	r3, #192	; 0xc0
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800119e:	e031      	b.n	8001204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <__NVIC_SetPriority+0xd8>)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	0019      	movs	r1, r3
 80011a8:	230f      	movs	r3, #15
 80011aa:	400b      	ands	r3, r1
 80011ac:	3b08      	subs	r3, #8
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3306      	adds	r3, #6
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	18d3      	adds	r3, r2, r3
 80011b6:	3304      	adds	r3, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1dfa      	adds	r2, r7, #7
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	0011      	movs	r1, r2
 80011c0:	2203      	movs	r2, #3
 80011c2:	400a      	ands	r2, r1
 80011c4:	00d2      	lsls	r2, r2, #3
 80011c6:	21ff      	movs	r1, #255	; 0xff
 80011c8:	4091      	lsls	r1, r2
 80011ca:	000a      	movs	r2, r1
 80011cc:	43d2      	mvns	r2, r2
 80011ce:	401a      	ands	r2, r3
 80011d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	22ff      	movs	r2, #255	; 0xff
 80011d8:	401a      	ands	r2, r3
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	0018      	movs	r0, r3
 80011e0:	2303      	movs	r3, #3
 80011e2:	4003      	ands	r3, r0
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <__NVIC_SetPriority+0xd8>)
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	001c      	movs	r4, r3
 80011f0:	230f      	movs	r3, #15
 80011f2:	4023      	ands	r3, r4
 80011f4:	3b08      	subs	r3, #8
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	430a      	orrs	r2, r1
 80011fa:	3306      	adds	r3, #6
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	18c3      	adds	r3, r0, r3
 8001200:	3304      	adds	r3, #4
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b003      	add	sp, #12
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	1e5a      	subs	r2, r3, #1
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	045b      	lsls	r3, r3, #17
 8001224:	429a      	cmp	r2, r3
 8001226:	d301      	bcc.n	800122c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001228:	2301      	movs	r3, #1
 800122a:	e010      	b.n	800124e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <SysTick_Config+0x44>)
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	3a01      	subs	r2, #1
 8001232:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001234:	2301      	movs	r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	2103      	movs	r1, #3
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff ff7c 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x44>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x44>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	210f      	movs	r1, #15
 8001268:	187b      	adds	r3, r7, r1
 800126a:	1c02      	adds	r2, r0, #0
 800126c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	187b      	adds	r3, r7, r1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b25b      	sxtb	r3, r3
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff ff5d 	bl	8001138 <__NVIC_SetPriority>
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	0002      	movs	r2, r0
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ff33 	bl	8001104 <__NVIC_EnableIRQ>
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ffaf 	bl	8001214 <SysTick_Config>
 80012b6:	0003      	movs	r3, r0
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2221      	movs	r2, #33	; 0x21
 80012cc:	5c9b      	ldrb	r3, [r3, r2]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2204      	movs	r2, #4
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e020      	b.n	8001328 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	210e      	movs	r1, #14
 80012f2:	438a      	bics	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	438a      	bics	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130e:	2101      	movs	r1, #1
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2221      	movs	r2, #33	; 0x21
 800131a:	2101      	movs	r1, #1
 800131c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2220      	movs	r2, #32
 8001322:	2100      	movs	r1, #0
 8001324:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001338:	210f      	movs	r1, #15
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2221      	movs	r2, #33	; 0x21
 8001344:	5c9b      	ldrb	r3, [r3, r2]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d006      	beq.n	800135a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2204      	movs	r2, #4
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e028      	b.n	80013ac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	210e      	movs	r1, #14
 8001366:	438a      	bics	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	438a      	bics	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001382:	2101      	movs	r1, #1
 8001384:	4091      	lsls	r1, r2
 8001386:	000a      	movs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2221      	movs	r2, #33	; 0x21
 800138e:	2101      	movs	r1, #1
 8001390:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2220      	movs	r2, #32
 8001396:	2100      	movs	r1, #0
 8001398:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	0010      	movs	r0, r2
 80013aa:	4798      	blx	r3
    } 
  }
  return status;
 80013ac:	230f      	movs	r3, #15
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b004      	add	sp, #16
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ca:	e14f      	b.n	800166c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4091      	lsls	r1, r2
 80013d6:	000a      	movs	r2, r1
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d100      	bne.n	80013e4 <HAL_GPIO_Init+0x28>
 80013e2:	e140      	b.n	8001666 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2203      	movs	r2, #3
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d005      	beq.n	80013fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d130      	bne.n	800145e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	43da      	mvns	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	409a      	lsls	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001432:	2201      	movs	r2, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	2201      	movs	r2, #1
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2203      	movs	r2, #3
 8001464:	4013      	ands	r3, r2
 8001466:	2b03      	cmp	r3, #3
 8001468:	d017      	beq.n	800149a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2203      	movs	r2, #3
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d123      	bne.n	80014ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	58d3      	ldr	r3, [r2, r3]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2207      	movs	r2, #7
 80014b8:	4013      	ands	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2107      	movs	r1, #7
 80014d2:	400b      	ands	r3, r1
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	43da      	mvns	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	401a      	ands	r2, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	23c0      	movs	r3, #192	; 0xc0
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d100      	bne.n	8001530 <HAL_GPIO_Init+0x174>
 800152e:	e09a      	b.n	8001666 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001530:	4b54      	ldr	r3, [pc, #336]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 8001536:	2101      	movs	r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	4b51      	ldr	r3, [pc, #324]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2201      	movs	r2, #1
 8001542:	4013      	ands	r3, r2
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_GPIO_Init+0x2cc>)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	589b      	ldr	r3, [r3, r2]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2203      	movs	r2, #3
 800155a:	4013      	ands	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	409a      	lsls	r2, r3
 8001562:	0013      	movs	r3, r2
 8001564:	43da      	mvns	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	2390      	movs	r3, #144	; 0x90
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	429a      	cmp	r2, r3
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x1e2>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a44      	ldr	r2, [pc, #272]	; (800168c <HAL_GPIO_Init+0x2d0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x1de>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a43      	ldr	r2, [pc, #268]	; (8001690 <HAL_GPIO_Init+0x2d4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x1da>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a42      	ldr	r2, [pc, #264]	; (8001694 <HAL_GPIO_Init+0x2d8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x1d6>
 800158e:	2303      	movs	r3, #3
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x1e4>
 8001592:	2305      	movs	r3, #5
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x1e4>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x1e4>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x1e4>
 800159e:	2300      	movs	r3, #0
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	2103      	movs	r1, #3
 80015a4:	400a      	ands	r2, r1
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <HAL_GPIO_Init+0x2cc>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43da      	mvns	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4013      	ands	r3, r2
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43da      	mvns	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	029b      	lsls	r3, r3, #10
 8001600:	4013      	ands	r3, r2
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	035b      	lsls	r3, r3, #13
 800162a:	4013      	ands	r3, r2
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43da      	mvns	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	039b      	lsls	r3, r3, #14
 8001654:	4013      	ands	r3, r2
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	40da      	lsrs	r2, r3
 8001674:	1e13      	subs	r3, r2, #0
 8001676:	d000      	beq.n	800167a <HAL_GPIO_Init+0x2be>
 8001678:	e6a8      	b.n	80013cc <HAL_GPIO_Init+0x10>
  } 
}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b006      	add	sp, #24
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000
 800168c:	48000400 	.word	0x48000400
 8001690:	48000800 	.word	0x48000800
 8001694:	48000c00 	.word	0x48000c00
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	0008      	movs	r0, r1
 80016a6:	0011      	movs	r1, r2
 80016a8:	1cbb      	adds	r3, r7, #2
 80016aa:	1c02      	adds	r2, r0, #0
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	1c7b      	adds	r3, r7, #1
 80016b0:	1c0a      	adds	r2, r1, #0
 80016b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b4:	1c7b      	adds	r3, r7, #1
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016bc:	1cbb      	adds	r3, r7, #2
 80016be:	881a      	ldrh	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c4:	e003      	b.n	80016ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016c6:	1cbb      	adds	r3, r7, #2
 80016c8:	881a      	ldrh	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	000a      	movs	r2, r1
 80016e0:	1cbb      	adds	r3, r7, #2
 80016e2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ea:	1cbb      	adds	r3, r7, #2
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4013      	ands	r3, r2
 80016f2:	041a      	lsls	r2, r3, #16
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	1cb9      	adds	r1, r7, #2
 80016fa:	8809      	ldrh	r1, [r1, #0]
 80016fc:	400b      	ands	r3, r1
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	0002      	movs	r2, r0
 8001714:	1dbb      	adds	r3, r7, #6
 8001716:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	1dba      	adds	r2, r7, #6
 800171e:	8812      	ldrh	r2, [r2, #0]
 8001720:	4013      	ands	r3, r2
 8001722:	d008      	beq.n	8001736 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001726:	1dba      	adds	r2, r7, #6
 8001728:	8812      	ldrh	r2, [r2, #0]
 800172a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff f9d5 	bl	8000ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e301      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d100      	bne.n	8001762 <HAL_RCC_OscConfig+0x1e>
 8001760:	e08d      	b.n	800187e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001762:	4bc3      	ldr	r3, [pc, #780]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	220c      	movs	r2, #12
 8001768:	4013      	ands	r3, r2
 800176a:	2b04      	cmp	r3, #4
 800176c:	d00e      	beq.n	800178c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800176e:	4bc0      	ldr	r3, [pc, #768]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	220c      	movs	r2, #12
 8001774:	4013      	ands	r3, r2
 8001776:	2b08      	cmp	r3, #8
 8001778:	d116      	bne.n	80017a8 <HAL_RCC_OscConfig+0x64>
 800177a:	4bbd      	ldr	r3, [pc, #756]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	401a      	ands	r2, r3
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	429a      	cmp	r2, r3
 800178a:	d10d      	bne.n	80017a8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	4bb8      	ldr	r3, [pc, #736]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x56>
 8001798:	e070      	b.n	800187c <HAL_RCC_OscConfig+0x138>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d000      	beq.n	80017a4 <HAL_RCC_OscConfig+0x60>
 80017a2:	e06b      	b.n	800187c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e2d8      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x7c>
 80017b0:	4baf      	ldr	r3, [pc, #700]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4bae      	ldr	r3, [pc, #696]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	0249      	lsls	r1, r1, #9
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e02f      	b.n	8001820 <HAL_RCC_OscConfig+0xdc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x9e>
 80017c8:	4ba9      	ldr	r3, [pc, #676]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4ba8      	ldr	r3, [pc, #672]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	49a9      	ldr	r1, [pc, #676]	; (8001a74 <HAL_RCC_OscConfig+0x330>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	4ba6      	ldr	r3, [pc, #664]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4ba5      	ldr	r3, [pc, #660]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017da:	49a7      	ldr	r1, [pc, #668]	; (8001a78 <HAL_RCC_OscConfig+0x334>)
 80017dc:	400a      	ands	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e01e      	b.n	8001820 <HAL_RCC_OscConfig+0xdc>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d10e      	bne.n	8001808 <HAL_RCC_OscConfig+0xc4>
 80017ea:	4ba1      	ldr	r3, [pc, #644]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4ba0      	ldr	r3, [pc, #640]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	02c9      	lsls	r1, r1, #11
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	4b9d      	ldr	r3, [pc, #628]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b9c      	ldr	r3, [pc, #624]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	0249      	lsls	r1, r1, #9
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xdc>
 8001808:	4b99      	ldr	r3, [pc, #612]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b98      	ldr	r3, [pc, #608]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800180e:	4999      	ldr	r1, [pc, #612]	; (8001a74 <HAL_RCC_OscConfig+0x330>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b95      	ldr	r3, [pc, #596]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800181a:	4997      	ldr	r1, [pc, #604]	; (8001a78 <HAL_RCC_OscConfig+0x334>)
 800181c:	400a      	ands	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d014      	beq.n	8001852 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fc3e 	bl	80010a8 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001832:	f7ff fc39 	bl	80010a8 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e28a      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001844:	4b8a      	ldr	r3, [pc, #552]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	029b      	lsls	r3, r3, #10
 800184c:	4013      	ands	r3, r2
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0xee>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fc29 	bl	80010a8 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fc24 	bl	80010a8 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e275      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x118>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x146>
 8001888:	e069      	b.n	800195e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800188a:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	220c      	movs	r2, #12
 8001890:	4013      	ands	r3, r2
 8001892:	d00b      	beq.n	80018ac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001894:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	220c      	movs	r2, #12
 800189a:	4013      	ands	r3, r2
 800189c:	2b08      	cmp	r3, #8
 800189e:	d11c      	bne.n	80018da <HAL_RCC_OscConfig+0x196>
 80018a0:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	4013      	ands	r3, r2
 80018aa:	d116      	bne.n	80018da <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ac:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e24b      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	22f8      	movs	r2, #248	; 0xf8
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00da      	lsls	r2, r3, #3
 80018d2:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d8:	e041      	b.n	800195e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d024      	beq.n	800192c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fbdb 	bl	80010a8 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fbd6 	bl	80010a8 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e227      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d0f1      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	22f8      	movs	r2, #248	; 0xf8
 800191a:	4393      	bics	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00da      	lsls	r2, r3, #3
 8001924:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e018      	b.n	800195e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192c:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001932:	2101      	movs	r1, #1
 8001934:	438a      	bics	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fbb6 	bl	80010a8 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fbb1 	bl	80010a8 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e202      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001954:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d1f1      	bne.n	8001942 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2208      	movs	r2, #8
 8001964:	4013      	ands	r3, r2
 8001966:	d036      	beq.n	80019d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d019      	beq.n	80019a4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001970:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001974:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001976:	2101      	movs	r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff fb94 	bl	80010a8 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fb8f 	bl	80010a8 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1e0      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d0f1      	beq.n	8001986 <HAL_RCC_OscConfig+0x242>
 80019a2:	e018      	b.n	80019d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a8:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	438a      	bics	r2, r1
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fb7a 	bl	80010a8 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ba:	f7ff fb75 	bl	80010a8 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1c6      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f1      	bne.n	80019ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2204      	movs	r2, #4
 80019dc:	4013      	ands	r3, r2
 80019de:	d100      	bne.n	80019e2 <HAL_RCC_OscConfig+0x29e>
 80019e0:	e0b4      	b.n	8001b4c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	201f      	movs	r0, #31
 80019e4:	183b      	adds	r3, r7, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	055b      	lsls	r3, r3, #21
 80019f2:	4013      	ands	r3, r2
 80019f4:	d110      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0549      	lsls	r1, r1, #21
 8001a00:	430a      	orrs	r2, r1
 8001a02:	61da      	str	r2, [r3, #28]
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	055b      	lsls	r3, r3, #21
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a12:	183b      	adds	r3, r7, r0
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_RCC_OscConfig+0x338>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d11a      	bne.n	8001a5a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_RCC_OscConfig+0x338>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_RCC_OscConfig+0x338>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0049      	lsls	r1, r1, #1
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fb39 	bl	80010a8 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3c:	f7ff fb34 	bl	80010a8 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e185      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x338>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10e      	bne.n	8001a80 <HAL_RCC_OscConfig+0x33c>
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	621a      	str	r2, [r3, #32]
 8001a6e:	e035      	b.n	8001adc <HAL_RCC_OscConfig+0x398>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	fffeffff 	.word	0xfffeffff
 8001a78:	fffbffff 	.word	0xfffbffff
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x35e>
 8001a88:	4bb6      	ldr	r3, [pc, #728]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	4bb5      	ldr	r3, [pc, #724]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	438a      	bics	r2, r1
 8001a92:	621a      	str	r2, [r3, #32]
 8001a94:	4bb3      	ldr	r3, [pc, #716]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	4bb2      	ldr	r3, [pc, #712]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	621a      	str	r2, [r3, #32]
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x398>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x380>
 8001aaa:	4bae      	ldr	r3, [pc, #696]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	4bad      	ldr	r3, [pc, #692]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	621a      	str	r2, [r3, #32]
 8001ab6:	4bab      	ldr	r3, [pc, #684]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ab8:	6a1a      	ldr	r2, [r3, #32]
 8001aba:	4baa      	ldr	r3, [pc, #680]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	621a      	str	r2, [r3, #32]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0x398>
 8001ac4:	4ba7      	ldr	r3, [pc, #668]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	4ba6      	ldr	r3, [pc, #664]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	438a      	bics	r2, r1
 8001ace:	621a      	str	r2, [r3, #32]
 8001ad0:	4ba4      	ldr	r3, [pc, #656]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	4ba3      	ldr	r3, [pc, #652]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	438a      	bics	r2, r1
 8001ada:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d014      	beq.n	8001b0e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fae0 	bl	80010a8 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fadb 	bl	80010a8 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a9b      	ldr	r2, [pc, #620]	; (8001d68 <HAL_RCC_OscConfig+0x624>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e12b      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b02:	4b98      	ldr	r3, [pc, #608]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x3aa>
 8001b0c:	e013      	b.n	8001b36 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff facb 	bl	80010a8 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b16:	e009      	b.n	8001b2c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff fac6 	bl	80010a8 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4a91      	ldr	r2, [pc, #580]	; (8001d68 <HAL_RCC_OscConfig+0x624>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e116      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	4b8d      	ldr	r3, [pc, #564]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b36:	231f      	movs	r3, #31
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	4b87      	ldr	r3, [pc, #540]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b46:	4989      	ldr	r1, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0x628>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2210      	movs	r2, #16
 8001b52:	4013      	ands	r3, r2
 8001b54:	d063      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12a      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b5e:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b62:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b64:	2104      	movs	r1, #4
 8001b66:	430a      	orrs	r2, r1
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b6a:	4b7e      	ldr	r3, [pc, #504]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6e:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	430a      	orrs	r2, r1
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fa97 	bl	80010a8 <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b80:	f7ff fa92 	bl	80010a8 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0e3      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b92:	4b74      	ldr	r3, [pc, #464]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f1      	beq.n	8001b80 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b9c:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	22f8      	movs	r2, #248	; 0xf8
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	00da      	lsls	r2, r3, #3
 8001bac:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb2:	e034      	b.n	8001c1e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	3305      	adds	r3, #5
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bbc:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	22f8      	movs	r2, #248	; 0xf8
 8001bce:	4393      	bics	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	00da      	lsls	r2, r3, #3
 8001bd8:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bde:	e01e      	b.n	8001c1e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001be0:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be4:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001be6:	2104      	movs	r1, #4
 8001be8:	430a      	orrs	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bec:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf0:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fa56 	bl	80010a8 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c02:	f7ff fa51 	bl	80010a8 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0a2      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1f1      	bne.n	8001c02 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d100      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4e4>
 8001c26:	e097      	b.n	8001d58 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	4b4e      	ldr	r3, [pc, #312]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d100      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
 8001c34:	e06b      	b.n	8001d0e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d14c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c44:	494a      	ldr	r1, [pc, #296]	; (8001d70 <HAL_RCC_OscConfig+0x62c>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fa2d 	bl	80010a8 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fa28 	bl	80010a8 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e079      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	049b      	lsls	r3, r3, #18
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c72:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	220f      	movs	r2, #15
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a3a      	ldr	r2, [pc, #232]	; (8001d74 <HAL_RCC_OscConfig+0x630>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0449      	lsls	r1, r1, #17
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff f9fb 	bl	80010a8 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f9f6 	bl	80010a8 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e047      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	049b      	lsls	r3, r3, #18
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x574>
 8001cd6:	e03f      	b.n	8001d58 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001cde:	4924      	ldr	r1, [pc, #144]	; (8001d70 <HAL_RCC_OscConfig+0x62c>)
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f9e0 	bl	80010a8 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff f9db 	bl	80010a8 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e02c      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	049b      	lsls	r3, r3, #18
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x5aa>
 8001d0c:	e024      	b.n	8001d58 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e01f      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x620>)
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d10e      	bne.n	8001d54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	220f      	movs	r2, #15
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	23f0      	movs	r3, #240	; 0xf0
 8001d48:	039b      	lsls	r3, r3, #14
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b008      	add	sp, #32
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40021000 	.word	0x40021000
 8001d68:	00001388 	.word	0x00001388
 8001d6c:	efffffff 	.word	0xefffffff
 8001d70:	feffffff 	.word	0xfeffffff
 8001d74:	ffc2ffff 	.word	0xffc2ffff

08001d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b3      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d911      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b58      	ldr	r3, [pc, #352]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4393      	bics	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	4b55      	ldr	r3, [pc, #340]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e09a      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d015      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d006      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001dd8:	21e0      	movs	r1, #224	; 0xe0
 8001dda:	00c9      	lsls	r1, r1, #3
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	22f0      	movs	r2, #240	; 0xf0
 8001de6:	4393      	bics	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d040      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	029b      	lsls	r3, r3, #10
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d114      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e06e      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	049b      	lsls	r3, r3, #18
 8001e26:	4013      	ands	r3, r2
 8001e28:	d108      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e062      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2202      	movs	r2, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e05b      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3c:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e58:	e009      	b.n	8001e6e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5a:	f7ff f925 	bl	80010a8 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_RCC_ClockConfig+0x18c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e042      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	220c      	movs	r2, #12
 8001e74:	401a      	ands	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1ec      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d211      	bcs.n	8001eb2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_RCC_ClockConfig+0x184>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e020      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_RCC_ClockConfig+0x190>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed0:	f000 f820 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed4:	0001      	movs	r1, r0
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x188>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	220f      	movs	r2, #15
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_RCC_ClockConfig+0x194>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	000a      	movs	r2, r1
 8001ee6:	40da      	lsrs	r2, r3
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x198>)
 8001eea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f7ff f895 	bl	800101c <HAL_InitTick>
  
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b004      	add	sp, #16
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	00001388 	.word	0x00001388
 8001f08:	fffff8ff 	.word	0xfffff8ff
 8001f0c:	08008300 	.word	0x08008300
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b08f      	sub	sp, #60	; 0x3c
 8001f18:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f1a:	2314      	movs	r3, #20
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f22:	c313      	stmia	r3!, {r0, r1, r4}
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4a29      	ldr	r2, [pc, #164]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f2e:	c313      	stmia	r3!, {r0, r1, r4}
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	220c      	movs	r2, #12
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d002      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x4a>
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d003      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x50>
 8001f5c:	e02d      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f62:	e02d      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	220f      	movs	r2, #15
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2214      	movs	r2, #20
 8001f6e:	18ba      	adds	r2, r7, r2
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	220f      	movs	r2, #15
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	1d3a      	adds	r2, r7, #4
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	025b      	lsls	r3, r3, #9
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f8e:	4812      	ldr	r0, [pc, #72]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f90:	f7fe f8c4 	bl	800011c <__udivsi3>
 8001f94:	0003      	movs	r3, r0
 8001f96:	001a      	movs	r2, r3
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	4353      	muls	r3, r2
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa2:	000a      	movs	r2, r1
 8001fa4:	0152      	lsls	r2, r2, #5
 8001fa6:	1a52      	subs	r2, r2, r1
 8001fa8:	0193      	lsls	r3, r2, #6
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	185b      	adds	r3, r3, r1
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fb8:	e002      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fbe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b00f      	add	sp, #60	; 0x3c
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	0800810c 	.word	0x0800810c
 8001fd0:	0800811c 	.word	0x0800811c
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ff4:	f7ff fff2 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ff8:	0001      	movs	r1, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	2207      	movs	r2, #7
 8002002:	4013      	ands	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	40d9      	lsrs	r1, r3
 800200a:	000b      	movs	r3, r1
}    
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	40021000 	.word	0x40021000
 8002018:	08008310 	.word	0x08008310

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	025b      	lsls	r3, r3, #9
 8002034:	4013      	ands	r3, r2
 8002036:	d100      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002038:	e08e      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2017      	movs	r0, #23
 800203c:	183b      	adds	r3, r7, r0
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b57      	ldr	r3, [pc, #348]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	055b      	lsls	r3, r3, #21
 800204a:	4013      	ands	r3, r2
 800204c:	d110      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	0549      	lsls	r1, r1, #21
 8002058:	430a      	orrs	r2, r1
 800205a:	61da      	str	r2, [r3, #28]
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	183b      	adds	r3, r7, r0
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d11a      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207c:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0049      	lsls	r1, r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7ff f80d 	bl	80010a8 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	e008      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7ff f808 	bl	80010a8 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e077      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020b4:	6a1a      	ldr	r2, [r3, #32]
 80020b6:	23c0      	movs	r3, #192	; 0xc0
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d034      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d02c      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a33      	ldr	r2, [pc, #204]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020de:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0249      	lsls	r1, r1, #9
 80020e8:	430a      	orrs	r2, r1
 80020ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020f2:	492e      	ldr	r1, [pc, #184]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	4013      	ands	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe ffcf 	bl	80010a8 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7fe ffca 	bl	80010a8 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e038      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	2202      	movs	r2, #2
 800212a:	4013      	ands	r3, r2
 800212c:	d0f0      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800213e:	430a      	orrs	r2, r1
 8002140:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002142:	2317      	movs	r3, #23
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002152:	4918      	ldr	r1, [pc, #96]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002154:	400a      	ands	r2, r1
 8002156:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	2203      	movs	r2, #3
 8002168:	4393      	bics	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002172:	430a      	orrs	r2, r1
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2220      	movs	r2, #32
 800217c:	4013      	ands	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	2210      	movs	r2, #16
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002190:	430a      	orrs	r2, r1
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b006      	add	sp, #24
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	fffffcff 	.word	0xfffffcff
 80021ac:	fffeffff 	.word	0xfffeffff
 80021b0:	00001388 	.word	0x00001388
 80021b4:	efffffff 	.word	0xefffffff

080021b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0a8      	b.n	800231c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	2382      	movs	r3, #130	; 0x82
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	429a      	cmp	r2, r3
 80021dc:	d009      	beq.n	80021f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	61da      	str	r2, [r3, #28]
 80021e4:	e005      	b.n	80021f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	225d      	movs	r2, #93	; 0x5d
 80021fc:	5c9b      	ldrb	r3, [r3, r2]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	225c      	movs	r2, #92	; 0x5c
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0018      	movs	r0, r3
 8002210:	f7fe fce6 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	225d      	movs	r2, #93	; 0x5d
 8002218:	2102      	movs	r1, #2
 800221a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	438a      	bics	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	23e0      	movs	r3, #224	; 0xe0
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	429a      	cmp	r2, r3
 8002236:	d902      	bls.n	800223e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e002      	b.n	8002244 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	015b      	lsls	r3, r3, #5
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	23f0      	movs	r3, #240	; 0xf0
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	429a      	cmp	r2, r3
 800224e:	d008      	beq.n	8002262 <HAL_SPI_Init+0xaa>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	23e0      	movs	r3, #224	; 0xe0
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	429a      	cmp	r2, r3
 800225a:	d002      	beq.n	8002262 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	2382      	movs	r3, #130	; 0x82
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	401a      	ands	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	2384      	movs	r3, #132	; 0x84
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	400b      	ands	r3, r1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2102      	movs	r1, #2
 800227e:	400b      	ands	r3, r1
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2101      	movs	r1, #1
 8002288:	400b      	ands	r3, r1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6999      	ldr	r1, [r3, #24]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	400b      	ands	r3, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2138      	movs	r1, #56	; 0x38
 800229e:	400b      	ands	r3, r1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	400b      	ands	r3, r1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	0011      	movs	r1, r2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	2204      	movs	r2, #4
 80022c8:	401a      	ands	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2110      	movs	r1, #16
 80022d0:	400b      	ands	r3, r1
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d8:	2108      	movs	r1, #8
 80022da:	400b      	ands	r3, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68d9      	ldr	r1, [r3, #12]
 80022e2:	23f0      	movs	r3, #240	; 0xf0
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	400b      	ands	r3, r1
 80022e8:	431a      	orrs	r2, r3
 80022ea:	0011      	movs	r1, r2
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	015b      	lsls	r3, r3, #5
 80022f2:	401a      	ands	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4907      	ldr	r1, [pc, #28]	; (8002324 <HAL_SPI_Init+0x16c>)
 8002308:	400a      	ands	r2, r1
 800230a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	225d      	movs	r2, #93	; 0x5d
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	fffff7ff 	.word	0xfffff7ff

08002328 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	1dbb      	adds	r3, r7, #6
 8002336:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002338:	231f      	movs	r3, #31
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	225c      	movs	r2, #92	; 0x5c
 8002344:	5c9b      	ldrb	r3, [r3, r2]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_SPI_Transmit+0x26>
 800234a:	2302      	movs	r3, #2
 800234c:	e140      	b.n	80025d0 <HAL_SPI_Transmit+0x2a8>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	225c      	movs	r2, #92	; 0x5c
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002356:	f7fe fea7 	bl	80010a8 <HAL_GetTick>
 800235a:	0003      	movs	r3, r0
 800235c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800235e:	2316      	movs	r3, #22
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	1dba      	adds	r2, r7, #6
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	225d      	movs	r2, #93	; 0x5d
 800236c:	5c9b      	ldrb	r3, [r3, r2]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d004      	beq.n	800237e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002374:	231f      	movs	r3, #31
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2202      	movs	r2, #2
 800237a:	701a      	strb	r2, [r3, #0]
    goto error;
 800237c:	e11d      	b.n	80025ba <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_SPI_Transmit+0x64>
 8002384:	1dbb      	adds	r3, r7, #6
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800238c:	231f      	movs	r3, #31
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
    goto error;
 8002394:	e111      	b.n	80025ba <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	225d      	movs	r2, #93	; 0x5d
 800239a:	2103      	movs	r1, #3
 800239c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1dba      	adds	r2, r7, #6
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1dba      	adds	r2, r7, #6
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2244      	movs	r2, #68	; 0x44
 80023c4:	2100      	movs	r1, #0
 80023c6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2246      	movs	r2, #70	; 0x46
 80023cc:	2100      	movs	r1, #0
 80023ce:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d110      	bne.n	800240a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	438a      	bics	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	01c9      	lsls	r1, r1, #7
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	4013      	ands	r3, r2
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d007      	beq.n	8002428 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	23e0      	movs	r3, #224	; 0xe0
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	429a      	cmp	r2, r3
 8002432:	d94e      	bls.n	80024d2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <HAL_SPI_Transmit+0x11e>
 800243c:	2316      	movs	r3, #22
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d13f      	bne.n	80024c6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	881a      	ldrh	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	1c9a      	adds	r2, r3, #2
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800246a:	e02c      	b.n	80024c6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d112      	bne.n	80024a0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	881a      	ldrh	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	1c9a      	adds	r2, r3, #2
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800249e:	e012      	b.n	80024c6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a0:	f7fe fe02 	bl	80010a8 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d802      	bhi.n	80024b6 <HAL_SPI_Transmit+0x18e>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	d102      	bne.n	80024bc <HAL_SPI_Transmit+0x194>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d104      	bne.n	80024c6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2203      	movs	r2, #3
 80024c2:	701a      	strb	r2, [r3, #0]
          goto error;
 80024c4:	e079      	b.n	80025ba <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1cd      	bne.n	800246c <HAL_SPI_Transmit+0x144>
 80024d0:	e04f      	b.n	8002572 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <HAL_SPI_Transmit+0x1bc>
 80024da:	2316      	movs	r3, #22
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d141      	bne.n	8002568 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800250a:	e02d      	b.n	8002568 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2202      	movs	r2, #2
 8002514:	4013      	ands	r3, r2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d113      	bne.n	8002542 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002540:	e012      	b.n	8002568 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002542:	f7fe fdb1 	bl	80010a8 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d802      	bhi.n	8002558 <HAL_SPI_Transmit+0x230>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_SPI_Transmit+0x236>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800255e:	231f      	movs	r3, #31
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2203      	movs	r2, #3
 8002564:	701a      	strb	r2, [r3, #0]
          goto error;
 8002566:	e028      	b.n	80025ba <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1cc      	bne.n	800250c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fdf5 	bl	8003168 <SPI_EndRxTxTransaction>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d002      	beq.n	8002588 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e000      	b.n	80025ba <HAL_SPI_Transmit+0x292>
  }

error:
 80025b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	225d      	movs	r2, #93	; 0x5d
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	225c      	movs	r2, #92	; 0x5c
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025ca:	231f      	movs	r3, #31
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b008      	add	sp, #32
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	1dbb      	adds	r3, r7, #6
 80025e6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025e8:	2317      	movs	r3, #23
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	2382      	movs	r3, #130	; 0x82
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d113      	bne.n	8002624 <HAL_SPI_Receive+0x4c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10f      	bne.n	8002624 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	225d      	movs	r2, #93	; 0x5d
 8002608:	2104      	movs	r1, #4
 800260a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800260c:	1dbb      	adds	r3, r7, #6
 800260e:	881c      	ldrh	r4, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	0023      	movs	r3, r4
 800261c:	f000 f928 	bl	8002870 <HAL_SPI_TransmitReceive>
 8002620:	0003      	movs	r3, r0
 8002622:	e11c      	b.n	800285e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	225c      	movs	r2, #92	; 0x5c
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_SPI_Receive+0x5a>
 800262e:	2302      	movs	r3, #2
 8002630:	e115      	b.n	800285e <HAL_SPI_Receive+0x286>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	225c      	movs	r2, #92	; 0x5c
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800263a:	f7fe fd35 	bl	80010a8 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	225d      	movs	r2, #93	; 0x5d
 8002646:	5c9b      	ldrb	r3, [r3, r2]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d004      	beq.n	8002658 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800264e:	2317      	movs	r3, #23
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]
    goto error;
 8002656:	e0f7      	b.n	8002848 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_SPI_Receive+0x8e>
 800265e:	1dbb      	adds	r3, r7, #6
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002666:	2317      	movs	r3, #23
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
    goto error;
 800266e:	e0eb      	b.n	8002848 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	225d      	movs	r2, #93	; 0x5d
 8002674:	2104      	movs	r1, #4
 8002676:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1dba      	adds	r2, r7, #6
 8002688:	2144      	movs	r1, #68	; 0x44
 800268a:	8812      	ldrh	r2, [r2, #0]
 800268c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1dba      	adds	r2, r7, #6
 8002692:	2146      	movs	r1, #70	; 0x46
 8002694:	8812      	ldrh	r2, [r2, #0]
 8002696:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	23e0      	movs	r3, #224	; 0xe0
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	429a      	cmp	r2, r3
 80026c0:	d908      	bls.n	80026d4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4966      	ldr	r1, [pc, #408]	; (8002868 <HAL_SPI_Receive+0x290>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	e008      	b.n	80026e6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0149      	lsls	r1, r1, #5
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d10f      	bne.n	8002712 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2140      	movs	r1, #64	; 0x40
 80026fe:	438a      	bics	r2, r1
 8002700:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4957      	ldr	r1, [pc, #348]	; (800286c <HAL_SPI_Receive+0x294>)
 800270e:	400a      	ands	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d007      	beq.n	8002730 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	23e0      	movs	r3, #224	; 0xe0
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	429a      	cmp	r2, r3
 800273a:	d900      	bls.n	800273e <HAL_SPI_Receive+0x166>
 800273c:	e069      	b.n	8002812 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800273e:	e031      	b.n	80027a4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	2b01      	cmp	r3, #1
 800274c:	d117      	bne.n	800277e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	001a      	movs	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	7812      	ldrb	r2, [r2, #0]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2246      	movs	r2, #70	; 0x46
 800276e:	5a9b      	ldrh	r3, [r3, r2]
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b299      	uxth	r1, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2246      	movs	r2, #70	; 0x46
 800277a:	5299      	strh	r1, [r3, r2]
 800277c:	e012      	b.n	80027a4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d802      	bhi.n	8002794 <HAL_SPI_Receive+0x1bc>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	d102      	bne.n	800279a <HAL_SPI_Receive+0x1c2>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800279a:	2317      	movs	r3, #23
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2203      	movs	r2, #3
 80027a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80027a2:	e051      	b.n	8002848 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2246      	movs	r2, #70	; 0x46
 80027a8:	5a9b      	ldrh	r3, [r3, r2]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1c7      	bne.n	8002740 <HAL_SPI_Receive+0x168>
 80027b0:	e035      	b.n	800281e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d115      	bne.n	80027ec <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	b292      	uxth	r2, r2
 80027cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	1c9a      	adds	r2, r3, #2
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2246      	movs	r2, #70	; 0x46
 80027dc:	5a9b      	ldrh	r3, [r3, r2]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b299      	uxth	r1, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2246      	movs	r2, #70	; 0x46
 80027e8:	5299      	strh	r1, [r3, r2]
 80027ea:	e012      	b.n	8002812 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ec:	f7fe fc5c 	bl	80010a8 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d802      	bhi.n	8002802 <HAL_SPI_Receive+0x22a>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	d102      	bne.n	8002808 <HAL_SPI_Receive+0x230>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002808:	2317      	movs	r3, #23
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2203      	movs	r2, #3
 800280e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002810:	e01a      	b.n	8002848 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2246      	movs	r2, #70	; 0x46
 8002816:	5a9b      	ldrh	r3, [r3, r2]
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1c9      	bne.n	80027b2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0018      	movs	r0, r3
 8002826:	f000 fc41 	bl	80030ac <SPI_EndRxTransaction>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d002      	beq.n	8002834 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800283c:	2317      	movs	r3, #23
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e000      	b.n	8002848 <HAL_SPI_Receive+0x270>
  }

error :
 8002846:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	225d      	movs	r2, #93	; 0x5d
 800284c:	2101      	movs	r1, #1
 800284e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	225c      	movs	r2, #92	; 0x5c
 8002854:	2100      	movs	r1, #0
 8002856:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002858:	2317      	movs	r3, #23
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	781b      	ldrb	r3, [r3, #0]
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b007      	add	sp, #28
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	ffffefff 	.word	0xffffefff
 800286c:	ffffbfff 	.word	0xffffbfff

08002870 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	001a      	movs	r2, r3
 800287e:	1cbb      	adds	r3, r7, #2
 8002880:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002886:	2323      	movs	r3, #35	; 0x23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	225c      	movs	r2, #92	; 0x5c
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_SPI_TransmitReceive+0x2c>
 8002898:	2302      	movs	r3, #2
 800289a:	e1b5      	b.n	8002c08 <HAL_SPI_TransmitReceive+0x398>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	225c      	movs	r2, #92	; 0x5c
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a4:	f7fe fc00 	bl	80010a8 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028ac:	201b      	movs	r0, #27
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	215d      	movs	r1, #93	; 0x5d
 80028b4:	5c52      	ldrb	r2, [r2, r1]
 80028b6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028be:	2312      	movs	r3, #18
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	1cba      	adds	r2, r7, #2
 80028c4:	8812      	ldrh	r2, [r2, #0]
 80028c6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028c8:	183b      	adds	r3, r7, r0
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d011      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x84>
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	2382      	movs	r3, #130	; 0x82
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d107      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d103      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x7a>
 80028e2:	183b      	adds	r3, r7, r0
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d004      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80028ea:	2323      	movs	r3, #35	; 0x23
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80028f2:	e17e      	b.n	8002bf2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x98>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x98>
 8002900:	1cbb      	adds	r3, r7, #2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d104      	bne.n	8002912 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002908:	2323      	movs	r3, #35	; 0x23
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002910:	e16f      	b.n	8002bf2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	225d      	movs	r2, #93	; 0x5d
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b04      	cmp	r3, #4
 800291c:	d003      	beq.n	8002926 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	225d      	movs	r2, #93	; 0x5d
 8002922:	2105      	movs	r1, #5
 8002924:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1cba      	adds	r2, r7, #2
 8002936:	2146      	movs	r1, #70	; 0x46
 8002938:	8812      	ldrh	r2, [r2, #0]
 800293a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1cba      	adds	r2, r7, #2
 8002940:	2144      	movs	r1, #68	; 0x44
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1cba      	adds	r2, r7, #2
 8002950:	8812      	ldrh	r2, [r2, #0]
 8002952:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1cba      	adds	r2, r7, #2
 8002958:	8812      	ldrh	r2, [r2, #0]
 800295a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	23e0      	movs	r3, #224	; 0xe0
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	429a      	cmp	r2, r3
 8002972:	d908      	bls.n	8002986 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	49a4      	ldr	r1, [pc, #656]	; (8002c10 <HAL_SPI_TransmitReceive+0x3a0>)
 8002980:	400a      	ands	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	e008      	b.n	8002998 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0149      	lsls	r1, r1, #5
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2240      	movs	r2, #64	; 0x40
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d007      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2140      	movs	r1, #64	; 0x40
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	23e0      	movs	r3, #224	; 0xe0
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	429a      	cmp	r2, r3
 80029c0:	d800      	bhi.n	80029c4 <HAL_SPI_TransmitReceive+0x154>
 80029c2:	e07f      	b.n	8002ac4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0x168>
 80029cc:	2312      	movs	r3, #18
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d000      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0x168>
 80029d6:	e069      	b.n	8002aac <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fc:	e056      	b.n	8002aac <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11b      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x1d4>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x1d4>
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d113      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d11c      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x21c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2246      	movs	r2, #70	; 0x46
 8002a56:	5a9b      	ldrh	r3, [r3, r2]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2246      	movs	r2, #70	; 0x46
 8002a7a:	5a9b      	ldrh	r3, [r3, r2]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b299      	uxth	r1, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2246      	movs	r2, #70	; 0x46
 8002a86:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a8c:	f7fe fb0c 	bl	80010a8 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d807      	bhi.n	8002aac <HAL_SPI_TransmitReceive+0x23c>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	d004      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002aa2:	2323      	movs	r3, #35	; 0x23
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	701a      	strb	r2, [r3, #0]
        goto error;
 8002aaa:	e0a2      	b.n	8002bf2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1a3      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x18e>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2246      	movs	r2, #70	; 0x46
 8002aba:	5a9b      	ldrh	r3, [r3, r2]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d19d      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x18e>
 8002ac2:	e085      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x268>
 8002acc:	2312      	movs	r3, #18
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d000      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x268>
 8002ad6:	e070      	b.n	8002bba <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afe:	e05c      	b.n	8002bba <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d11c      	bne.n	8002b48 <HAL_SPI_TransmitReceive+0x2d8>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d017      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x2d8>
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d114      	bne.n	8002b48 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	7812      	ldrb	r2, [r2, #0]
 8002b2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d11e      	bne.n	8002b94 <HAL_SPI_TransmitReceive+0x324>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2246      	movs	r2, #70	; 0x46
 8002b5a:	5a9b      	ldrh	r3, [r3, r2]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	001a      	movs	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2246      	movs	r2, #70	; 0x46
 8002b82:	5a9b      	ldrh	r3, [r3, r2]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2246      	movs	r2, #70	; 0x46
 8002b8e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b90:	2301      	movs	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b94:	f7fe fa88 	bl	80010a8 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d802      	bhi.n	8002baa <HAL_SPI_TransmitReceive+0x33a>
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x340>
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d104      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002bb0:	2323      	movs	r3, #35	; 0x23
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	701a      	strb	r2, [r3, #0]
        goto error;
 8002bb8:	e01b      	b.n	8002bf2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d19d      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x290>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2246      	movs	r2, #70	; 0x46
 8002bc8:	5a9b      	ldrh	r3, [r3, r2]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d197      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 fac6 	bl	8003168 <SPI_EndRxTxTransaction>
 8002bdc:	1e03      	subs	r3, r0, #0
 8002bde:	d007      	beq.n	8002bf0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002be0:	2323      	movs	r3, #35	; 0x23
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60
 8002bee:	e000      	b.n	8002bf2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002bf0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	225d      	movs	r2, #93	; 0x5d
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	225c      	movs	r2, #92	; 0x5c
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c02:	2323      	movs	r3, #35	; 0x23
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	781b      	ldrb	r3, [r3, #0]
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b00a      	add	sp, #40	; 0x28
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	ffffefff 	.word	0xffffefff

08002c14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	001a      	movs	r2, r3
 8002c32:	2301      	movs	r3, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d10f      	bne.n	8002c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c3e:	d00b      	beq.n	8002c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	001a      	movs	r2, r3
 8002c46:	2301      	movs	r3, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d005      	beq.n	8002c58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	0010      	movs	r0, r2
 8002c54:	4798      	blx	r3
    return;
 8002c56:	e0d5      	b.n	8002e04 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	2301      	movs	r3, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <HAL_SPI_IRQHandler+0x68>
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	09db      	lsrs	r3, r3, #7
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d005      	beq.n	8002c7c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	0010      	movs	r0, r2
 8002c78:	4798      	blx	r3
    return;
 8002c7a:	e0c3      	b.n	8002e04 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	001a      	movs	r2, r3
 8002c82:	2301      	movs	r3, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d10c      	bne.n	8002ca2 <HAL_SPI_IRQHandler+0x8e>
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	2301      	movs	r3, #1
 8002c90:	4013      	ands	r3, r2
 8002c92:	d106      	bne.n	8002ca2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <HAL_SPI_IRQHandler+0x8e>
 8002ca0:	e0b0      	b.n	8002e04 <HAL_SPI_IRQHandler+0x1f0>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	2301      	movs	r3, #1
 8002caa:	4013      	ands	r3, r2
 8002cac:	d100      	bne.n	8002cb0 <HAL_SPI_IRQHandler+0x9c>
 8002cae:	e0a9      	b.n	8002e04 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d023      	beq.n	8002d04 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	225d      	movs	r2, #93	; 0x5d
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d011      	beq.n	8002cec <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ccc:	2204      	movs	r2, #4
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	e00b      	b.n	8002d04 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
        return;
 8002d02:	e07f      	b.n	8002e04 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d014      	beq.n	8002d3a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d14:	2201      	movs	r2, #1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2140      	movs	r1, #64	; 0x40
 8002d34:	438a      	bics	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	001a      	movs	r2, r3
 8002d40:	2301      	movs	r3, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	d00c      	beq.n	8002d60 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d04c      	beq.n	8002e02 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	21e0      	movs	r1, #224	; 0xe0
 8002d74:	438a      	bics	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	225d      	movs	r2, #93	; 0x5d
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2202      	movs	r2, #2
 8002d84:	4013      	ands	r3, r2
 8002d86:	d103      	bne.n	8002d90 <HAL_SPI_IRQHandler+0x17c>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d032      	beq.n	8002df6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_SPI_IRQHandler+0x1f8>)
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe fabb 	bl	8001330 <HAL_DMA_Abort_IT>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <HAL_SPI_IRQHandler+0x1f8>)
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7fe faa6 	bl	8001330 <HAL_DMA_Abort_IT>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002df4:	e004      	b.n	8002e00 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 f809 	bl	8002e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002dfe:	e000      	b.n	8002e02 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002e00:	46c0      	nop			; (mov r8, r8)
    return;
 8002e02:	46c0      	nop			; (mov r8, r8)
  }
}
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b008      	add	sp, #32
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	08002e21 	.word	0x08002e21

08002e10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2246      	movs	r2, #70	; 0x46
 8002e32:	2100      	movs	r1, #0
 8002e34:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7ff ffe6 	bl	8002e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	1dfb      	adds	r3, r7, #7
 8002e5a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e5c:	f7fe f924 	bl	80010a8 <HAL_GetTick>
 8002e60:	0002      	movs	r2, r0
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	18d3      	adds	r3, r2, r3
 8002e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e6c:	f7fe f91c 	bl	80010a8 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	015b      	lsls	r3, r3, #5
 8002e7a:	0d1b      	lsrs	r3, r3, #20
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4353      	muls	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e82:	e058      	b.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	d055      	beq.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e8a:	f7fe f90d 	bl	80010a8 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d902      	bls.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d142      	bne.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	21e0      	movs	r1, #224	; 0xe0
 8002eac:	438a      	bics	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	2382      	movs	r3, #130	; 0x82
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d113      	bne.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d005      	beq.n	8002ed4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	019b      	lsls	r3, r3, #6
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d110      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	491a      	ldr	r1, [pc, #104]	; (8002f64 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	0189      	lsls	r1, r1, #6
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	225d      	movs	r2, #93	; 0x5d
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	225c      	movs	r2, #92	; 0x5c
 8002f1e:	2100      	movs	r1, #0
 8002f20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e017      	b.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	425a      	negs	r2, r3
 8002f46:	4153      	adcs	r3, r2
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d197      	bne.n	8002e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b008      	add	sp, #32
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	20000004 	.word	0x20000004
 8002f64:	ffffdfff 	.word	0xffffdfff

08002f68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f76:	2317      	movs	r3, #23
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f7e:	f7fe f893 	bl	80010a8 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	18d3      	adds	r3, r2, r3
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f8e:	f7fe f88b 	bl	80010a8 <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	0013      	movs	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	00da      	lsls	r2, r3, #3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	0d1b      	lsrs	r3, r3, #20
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	4353      	muls	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fb4:	e068      	b.n	8003088 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	23c0      	movs	r3, #192	; 0xc0
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10a      	bne.n	8002fd6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	2117      	movs	r1, #23
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	d055      	beq.n	8003088 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fdc:	f7fe f864 	bl	80010a8 <HAL_GetTick>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d902      	bls.n	8002ff2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d142      	bne.n	8003078 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	21e0      	movs	r1, #224	; 0xe0
 8002ffe:	438a      	bics	r2, r1
 8003000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	2382      	movs	r3, #130	; 0x82
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	429a      	cmp	r2, r3
 800300c:	d113      	bne.n	8003036 <SPI_WaitFifoStateUntilTimeout+0xce>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	429a      	cmp	r2, r3
 8003018:	d005      	beq.n	8003026 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	429a      	cmp	r2, r3
 8003024:	d107      	bne.n	8003036 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	438a      	bics	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	019b      	lsls	r3, r3, #6
 800303e:	429a      	cmp	r2, r3
 8003040:	d110      	bne.n	8003064 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4916      	ldr	r1, [pc, #88]	; (80030a8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800304e:	400a      	ands	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	0189      	lsls	r1, r1, #6
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	225d      	movs	r2, #93	; 0x5d
 8003068:	2101      	movs	r1, #1
 800306a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	225c      	movs	r2, #92	; 0x5c
 8003070:	2100      	movs	r1, #0
 8003072:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e010      	b.n	800309a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3b01      	subs	r3, #1
 8003086:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d18e      	bne.n	8002fb6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b00a      	add	sp, #40	; 0x28
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	20000004 	.word	0x20000004
 80030a8:	ffffdfff 	.word	0xffffdfff

080030ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	2382      	movs	r3, #130	; 0x82
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d113      	bne.n	80030ec <SPI_EndRxTransaction+0x40>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d005      	beq.n	80030dc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	429a      	cmp	r2, r3
 80030da:	d107      	bne.n	80030ec <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	438a      	bics	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	0013      	movs	r3, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	f7ff fea7 	bl	8002e4c <SPI_WaitFlagStateUntilTimeout>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d007      	beq.n	8003112 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	2220      	movs	r2, #32
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e026      	b.n	8003160 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	2382      	movs	r3, #130	; 0x82
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	429a      	cmp	r2, r3
 800311c:	d11f      	bne.n	800315e <SPI_EndRxTransaction+0xb2>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	429a      	cmp	r2, r3
 8003128:	d005      	beq.n	8003136 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	429a      	cmp	r2, r3
 8003134:	d113      	bne.n	800315e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	23c0      	movs	r3, #192	; 0xc0
 800313a:	00d9      	lsls	r1, r3, #3
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	0013      	movs	r3, r2
 8003144:	2200      	movs	r2, #0
 8003146:	f7ff ff0f 	bl	8002f68 <SPI_WaitFifoStateUntilTimeout>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d007      	beq.n	800315e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003152:	2220      	movs	r2, #32
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e000      	b.n	8003160 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}

08003168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	23c0      	movs	r3, #192	; 0xc0
 8003178:	0159      	lsls	r1, r3, #5
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	0013      	movs	r3, r2
 8003182:	2200      	movs	r2, #0
 8003184:	f7ff fef0 	bl	8002f68 <SPI_WaitFifoStateUntilTimeout>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d007      	beq.n	800319c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	2220      	movs	r2, #32
 8003192:	431a      	orrs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e027      	b.n	80031ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	0013      	movs	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	f7ff fe4f 	bl	8002e4c <SPI_WaitFlagStateUntilTimeout>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d007      	beq.n	80031c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	2220      	movs	r2, #32
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e014      	b.n	80031ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	23c0      	movs	r3, #192	; 0xc0
 80031c6:	00d9      	lsls	r1, r3, #3
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	0013      	movs	r3, r2
 80031d0:	2200      	movs	r2, #0
 80031d2:	f7ff fec9 	bl	8002f68 <SPI_WaitFifoStateUntilTimeout>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d007      	beq.n	80031ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	2220      	movs	r2, #32
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e000      	b.n	80031ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e042      	b.n	800328c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223d      	movs	r2, #61	; 0x3d
 800320a:	5c9b      	ldrb	r3, [r3, r2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fd fd35 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223d      	movs	r2, #61	; 0x3d
 8003226:	2102      	movs	r1, #2
 8003228:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f000 fa83 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2246      	movs	r2, #70	; 0x46
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	223e      	movs	r2, #62	; 0x3e
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223f      	movs	r2, #63	; 0x3f
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2241      	movs	r2, #65	; 0x41
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2242      	movs	r2, #66	; 0x42
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2243      	movs	r2, #67	; 0x43
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2244      	movs	r2, #68	; 0x44
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2245      	movs	r2, #69	; 0x45
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223d      	movs	r2, #61	; 0x3d
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	223d      	movs	r2, #61	; 0x3d
 80032a0:	5c9b      	ldrb	r3, [r3, r2]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d001      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e035      	b.n	8003318 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223d      	movs	r2, #61	; 0x3d
 80032b0:	2102      	movs	r1, #2
 80032b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a15      	ldr	r2, [pc, #84]	; (8003320 <HAL_TIM_Base_Start_IT+0x8c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0x4e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <HAL_TIM_Base_Start_IT+0x90>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0x4e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a12      	ldr	r2, [pc, #72]	; (8003328 <HAL_TIM_Base_Start_IT+0x94>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d111      	bne.n	8003306 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2207      	movs	r2, #7
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d010      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	e007      	b.n	8003316 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40014000 	.word	0x40014000

0800332c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d124      	bne.n	800338c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2202      	movs	r2, #2
 800334a:	4013      	ands	r3, r2
 800334c:	2b02      	cmp	r3, #2
 800334e:	d11d      	bne.n	800338c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2203      	movs	r2, #3
 8003356:	4252      	negs	r2, r2
 8003358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2203      	movs	r2, #3
 8003368:	4013      	ands	r3, r2
 800336a:	d004      	beq.n	8003376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 f9ce 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 8003374:	e007      	b.n	8003386 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f9c1 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0018      	movs	r0, r3
 8003382:	f000 f9cd 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2204      	movs	r2, #4
 8003394:	4013      	ands	r3, r2
 8003396:	2b04      	cmp	r3, #4
 8003398:	d125      	bne.n	80033e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2204      	movs	r2, #4
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11e      	bne.n	80033e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2205      	movs	r2, #5
 80033ae:	4252      	negs	r2, r2
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	23c0      	movs	r3, #192	; 0xc0
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4013      	ands	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 f9a1 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 80033ce:	e007      	b.n	80033e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 f994 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 f9a0 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2208      	movs	r2, #8
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d124      	bne.n	800343e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2208      	movs	r2, #8
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d11d      	bne.n	800343e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2209      	movs	r2, #9
 8003408:	4252      	negs	r2, r2
 800340a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2204      	movs	r2, #4
 8003410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2203      	movs	r2, #3
 800341a:	4013      	ands	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 f975 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 8003426:	e007      	b.n	8003438 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	0018      	movs	r0, r3
 800342c:	f000 f968 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 f974 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2210      	movs	r2, #16
 8003446:	4013      	ands	r3, r2
 8003448:	2b10      	cmp	r3, #16
 800344a:	d125      	bne.n	8003498 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2210      	movs	r2, #16
 8003454:	4013      	ands	r3, r2
 8003456:	2b10      	cmp	r3, #16
 8003458:	d11e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2211      	movs	r2, #17
 8003460:	4252      	negs	r2, r2
 8003462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2208      	movs	r2, #8
 8003468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	23c0      	movs	r3, #192	; 0xc0
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f948 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 8003480:	e007      	b.n	8003492 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f93b 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0018      	movs	r0, r3
 800348e:	f000 f947 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2201      	movs	r2, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d10f      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d108      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2202      	movs	r2, #2
 80034ba:	4252      	negs	r2, r2
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7fd fb3b 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d10f      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	4013      	ands	r3, r2
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d108      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2281      	movs	r2, #129	; 0x81
 80034e8:	4252      	negs	r2, r2
 80034ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fa96 	bl	8003a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d10f      	bne.n	8003522 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2240      	movs	r2, #64	; 0x40
 800350a:	4013      	ands	r3, r2
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d108      	bne.n	8003522 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2241      	movs	r2, #65	; 0x41
 8003516:	4252      	negs	r2, r2
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 f907 	bl	8003730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2220      	movs	r2, #32
 800352a:	4013      	ands	r3, r2
 800352c:	2b20      	cmp	r3, #32
 800352e:	d10f      	bne.n	8003550 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	4013      	ands	r3, r2
 800353a:	2b20      	cmp	r3, #32
 800353c:	d108      	bne.n	8003550 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2221      	movs	r2, #33	; 0x21
 8003544:	4252      	negs	r2, r2
 8003546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f000 fa60 	bl	8003a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	230f      	movs	r3, #15
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	223c      	movs	r2, #60	; 0x3c
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x20>
 8003574:	2302      	movs	r3, #2
 8003576:	e0bc      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x19a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223c      	movs	r2, #60	; 0x3c
 800357c:	2101      	movs	r1, #1
 800357e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223d      	movs	r2, #61	; 0x3d
 8003584:	2102      	movs	r1, #2
 8003586:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2277      	movs	r2, #119	; 0x77
 8003594:	4393      	bics	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_TIM_ConfigClockSource+0x1a4>)
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0192      	lsls	r2, r2, #6
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d040      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xde>
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	0192      	lsls	r2, r2, #6
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d900      	bls.n	80035be <HAL_TIM_ConfigClockSource+0x66>
 80035bc:	e088      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	0152      	lsls	r2, r2, #5
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d100      	bne.n	80035c8 <HAL_TIM_ConfigClockSource+0x70>
 80035c6:	e088      	b.n	80036da <HAL_TIM_ConfigClockSource+0x182>
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	0152      	lsls	r2, r2, #5
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d900      	bls.n	80035d2 <HAL_TIM_ConfigClockSource+0x7a>
 80035d0:	e07e      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035d2:	2b70      	cmp	r3, #112	; 0x70
 80035d4:	d018      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xb0>
 80035d6:	d900      	bls.n	80035da <HAL_TIM_ConfigClockSource+0x82>
 80035d8:	e07a      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035da:	2b60      	cmp	r3, #96	; 0x60
 80035dc:	d04f      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x126>
 80035de:	d900      	bls.n	80035e2 <HAL_TIM_ConfigClockSource+0x8a>
 80035e0:	e076      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035e2:	2b50      	cmp	r3, #80	; 0x50
 80035e4:	d03b      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x106>
 80035e6:	d900      	bls.n	80035ea <HAL_TIM_ConfigClockSource+0x92>
 80035e8:	e072      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d057      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x146>
 80035ee:	d900      	bls.n	80035f2 <HAL_TIM_ConfigClockSource+0x9a>
 80035f0:	e06e      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035f2:	2b30      	cmp	r3, #48	; 0x30
 80035f4:	d063      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 80035f6:	d86b      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d060      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 80035fc:	d868      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d05d      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 8003602:	2b10      	cmp	r3, #16
 8003604:	d05b      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 8003606:	e063      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f000 f982 	bl	8003920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2277      	movs	r2, #119	; 0x77
 8003628:	4313      	orrs	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
      break;
 8003634:	e052      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f000 f96b 	bl	8003920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	01c9      	lsls	r1, r1, #7
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
      break;
 800365c:	e03e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	001a      	movs	r2, r3
 800366c:	f000 f8de 	bl	800382c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2150      	movs	r1, #80	; 0x50
 8003676:	0018      	movs	r0, r3
 8003678:	f000 f938 	bl	80038ec <TIM_ITRx_SetConfig>
      break;
 800367c:	e02e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	001a      	movs	r2, r3
 800368c:	f000 f8fc 	bl	8003888 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2160      	movs	r1, #96	; 0x60
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f928 	bl	80038ec <TIM_ITRx_SetConfig>
      break;
 800369c:	e01e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	001a      	movs	r2, r3
 80036ac:	f000 f8be 	bl	800382c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2140      	movs	r1, #64	; 0x40
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 f918 	bl	80038ec <TIM_ITRx_SetConfig>
      break;
 80036bc:	e00e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0019      	movs	r1, r3
 80036c8:	0010      	movs	r0, r2
 80036ca:	f000 f90f 	bl	80038ec <TIM_ITRx_SetConfig>
      break;
 80036ce:	e005      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036d0:	230f      	movs	r3, #15
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
      break;
 80036d8:	e000      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036da:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	223d      	movs	r2, #61	; 0x3d
 80036e0:	2101      	movs	r1, #1
 80036e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	223c      	movs	r2, #60	; 0x3c
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]

  return status;
 80036ec:	230f      	movs	r3, #15
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	781b      	ldrb	r3, [r3, #0]
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b004      	add	sp, #16
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	ffff00ff 	.word	0xffff00ff

08003700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a2f      	ldr	r2, [pc, #188]	; (8003810 <TIM_Base_SetConfig+0xd0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x20>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <TIM_Base_SetConfig+0xd4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2270      	movs	r2, #112	; 0x70
 8003764:	4393      	bics	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <TIM_Base_SetConfig+0xd0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <TIM_Base_SetConfig+0xd4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00f      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <TIM_Base_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00b      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <TIM_Base_SetConfig+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <TIM_Base_SetConfig+0xe0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_Base_SetConfig+0x62>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <TIM_Base_SetConfig+0xe4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d108      	bne.n	80037b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <TIM_Base_SetConfig+0xe8>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	4393      	bics	r3, r2
 80037ba:	001a      	movs	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <TIM_Base_SetConfig+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0xba>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <TIM_Base_SetConfig+0xdc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0xba>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <TIM_Base_SetConfig+0xe0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0xba>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <TIM_Base_SetConfig+0xe4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d103      	bne.n	8003802 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	615a      	str	r2, [r3, #20]
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b004      	add	sp, #16
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400
 8003818:	40002000 	.word	0x40002000
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800
 8003828:	fffffcff 	.word	0xfffffcff

0800382c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	2201      	movs	r2, #1
 8003844:	4393      	bics	r3, r2
 8003846:	001a      	movs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	22f0      	movs	r2, #240	; 0xf0
 8003856:	4393      	bics	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	220a      	movs	r2, #10
 8003868:	4393      	bics	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b006      	add	sp, #24
 8003886:	bd80      	pop	{r7, pc}

08003888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	2210      	movs	r2, #16
 800389a:	4393      	bics	r3, r2
 800389c:	001a      	movs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <TIM_TI2_ConfigInputStage+0x60>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	031b      	lsls	r3, r3, #12
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	22a0      	movs	r2, #160	; 0xa0
 80038c4:	4393      	bics	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b006      	add	sp, #24
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	ffff0fff 	.word	0xffff0fff

080038ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2270      	movs	r2, #112	; 0x70
 8003900:	4393      	bics	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	2207      	movs	r2, #7
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <TIM_ETR_SetConfig+0x3c>)
 8003938:	4013      	ands	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	431a      	orrs	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b006      	add	sp, #24
 800395a:	bd80      	pop	{r7, pc}
 800395c:	ffff00ff 	.word	0xffff00ff

08003960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	223c      	movs	r2, #60	; 0x3c
 800396e:	5c9b      	ldrb	r3, [r3, r2]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e041      	b.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	223c      	movs	r2, #60	; 0x3c
 800397c:	2101      	movs	r1, #1
 800397e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	223d      	movs	r2, #61	; 0x3d
 8003984:	2102      	movs	r1, #2
 8003986:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2270      	movs	r2, #112	; 0x70
 800399c:	4393      	bics	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10c      	bne.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	4393      	bics	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	223d      	movs	r2, #61	; 0x3d
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	223c      	movs	r2, #60	; 0x3c
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b004      	add	sp, #16
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40014000 	.word	0x40014000

08003a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e044      	b.n	8003acc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2274      	movs	r2, #116	; 0x74
 8003a4e:	2100      	movs	r1, #0
 8003a50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7fd f965 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2224      	movs	r2, #36	; 0x24
 8003a5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	438a      	bics	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fbb6 	bl	80041e4 <UART_SetConfig>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e024      	b.n	8003acc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 fce9 	bl	8004464 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	490d      	ldr	r1, [pc, #52]	; (8003ad4 <HAL_UART_Init+0xa4>)
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2108      	movs	r1, #8
 8003aae:	438a      	bics	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 fd81 	bl	80045cc <UART_CheckIdleState>
 8003aca:	0003      	movs	r3, r0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	fffff7ff 	.word	0xfffff7ff

08003ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d000      	beq.n	8003af2 <HAL_UART_Transmit+0x1a>
 8003af0:	e096      	b.n	8003c20 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_UART_Transmit+0x28>
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e08e      	b.n	8003c22 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d109      	bne.n	8003b24 <HAL_UART_Transmit+0x4c>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e07e      	b.n	8003c22 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2274      	movs	r2, #116	; 0x74
 8003b28:	5c9b      	ldrb	r3, [r3, r2]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Transmit+0x5a>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e077      	b.n	8003c22 <HAL_UART_Transmit+0x14a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2274      	movs	r2, #116	; 0x74
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2280      	movs	r2, #128	; 0x80
 8003b3e:	2100      	movs	r1, #0
 8003b40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2221      	movs	r2, #33	; 0x21
 8003b46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b48:	f7fd faae 	bl	80010a8 <HAL_GetTick>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1dba      	adds	r2, r7, #6
 8003b54:	2150      	movs	r1, #80	; 0x50
 8003b56:	8812      	ldrh	r2, [r2, #0]
 8003b58:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1dba      	adds	r2, r7, #6
 8003b5e:	2152      	movs	r1, #82	; 0x52
 8003b60:	8812      	ldrh	r2, [r2, #0]
 8003b62:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	015b      	lsls	r3, r3, #5
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d108      	bne.n	8003b82 <HAL_UART_Transmit+0xaa>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e003      	b.n	8003b8a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2274      	movs	r2, #116	; 0x74
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003b92:	e02d      	b.n	8003bf0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2180      	movs	r1, #128	; 0x80
 8003ba2:	f000 fd5b 	bl	800465c <UART_WaitOnFlagUntilTimeout>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e039      	b.n	8003c22 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	05d2      	lsls	r2, r2, #23
 8003bbe:	0dd2      	lsrs	r2, r2, #23
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e008      	b.n	8003bde <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2252      	movs	r2, #82	; 0x52
 8003be2:	5a9b      	ldrh	r3, [r3, r2]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b299      	uxth	r1, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2252      	movs	r2, #82	; 0x52
 8003bee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2252      	movs	r2, #82	; 0x52
 8003bf4:	5a9b      	ldrh	r3, [r3, r2]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1cb      	bne.n	8003b94 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	0013      	movs	r3, r2
 8003c06:	2200      	movs	r2, #0
 8003c08:	2140      	movs	r1, #64	; 0x40
 8003c0a:	f000 fd27 	bl	800465c <UART_WaitOnFlagUntilTimeout>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e005      	b.n	8003c22 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b008      	add	sp, #32
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b0ab      	sub	sp, #172	; 0xac
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	22a4      	movs	r2, #164	; 0xa4
 8003c3c:	18b9      	adds	r1, r7, r2
 8003c3e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	20a0      	movs	r0, #160	; 0xa0
 8003c48:	1839      	adds	r1, r7, r0
 8003c4a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	219c      	movs	r1, #156	; 0x9c
 8003c54:	1879      	adds	r1, r7, r1
 8003c56:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c58:	0011      	movs	r1, r2
 8003c5a:	18bb      	adds	r3, r7, r2
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a99      	ldr	r2, [pc, #612]	; (8003ec4 <HAL_UART_IRQHandler+0x298>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	2298      	movs	r2, #152	; 0x98
 8003c64:	18bc      	adds	r4, r7, r2
 8003c66:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003c68:	18bb      	adds	r3, r7, r2
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d114      	bne.n	8003c9a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2220      	movs	r2, #32
 8003c76:	4013      	ands	r3, r2
 8003c78:	d00f      	beq.n	8003c9a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00a      	beq.n	8003c9a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d100      	bne.n	8003c8e <HAL_UART_IRQHandler+0x62>
 8003c8c:	e27e      	b.n	800418c <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	0010      	movs	r0, r2
 8003c96:	4798      	blx	r3
      }
      return;
 8003c98:	e278      	b.n	800418c <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c9a:	2398      	movs	r3, #152	; 0x98
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d100      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x7a>
 8003ca4:	e114      	b.n	8003ed0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ca6:	239c      	movs	r3, #156	; 0x9c
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cb2:	23a0      	movs	r3, #160	; 0xa0
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a83      	ldr	r2, [pc, #524]	; (8003ec8 <HAL_UART_IRQHandler+0x29c>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d100      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x94>
 8003cbe:	e107      	b.n	8003ed0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cc0:	23a4      	movs	r3, #164	; 0xa4
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d012      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xc6>
 8003ccc:	23a0      	movs	r3, #160	; 0xa0
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	589b      	ldr	r3, [r3, r2]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf2:	23a4      	movs	r3, #164	; 0xa4
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d011      	beq.n	8003d22 <HAL_UART_IRQHandler+0xf6>
 8003cfe:	239c      	movs	r3, #156	; 0x9c
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2201      	movs	r2, #1
 8003d06:	4013      	ands	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	589b      	ldr	r3, [r3, r2]
 8003d18:	2204      	movs	r2, #4
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2180      	movs	r1, #128	; 0x80
 8003d20:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d22:	23a4      	movs	r3, #164	; 0xa4
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d011      	beq.n	8003d52 <HAL_UART_IRQHandler+0x126>
 8003d2e:	239c      	movs	r3, #156	; 0x9c
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2201      	movs	r2, #1
 8003d36:	4013      	ands	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	589b      	ldr	r3, [r3, r2]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d52:	23a4      	movs	r3, #164	; 0xa4
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d017      	beq.n	8003d8e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d5e:	23a0      	movs	r3, #160	; 0xa0
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2220      	movs	r2, #32
 8003d66:	4013      	ands	r3, r2
 8003d68:	d105      	bne.n	8003d76 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d6a:	239c      	movs	r3, #156	; 0x9c
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2201      	movs	r2, #1
 8003d72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d74:	d00b      	beq.n	8003d8e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	589b      	ldr	r3, [r3, r2]
 8003d84:	2208      	movs	r2, #8
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d8e:	23a4      	movs	r3, #164	; 0xa4
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x198>
 8003d9c:	23a0      	movs	r3, #160	; 0xa0
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	04db      	lsls	r3, r3, #19
 8003da6:	4013      	ands	r3, r2
 8003da8:	d00c      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	589b      	ldr	r3, [r3, r2]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	589b      	ldr	r3, [r3, r2]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d100      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x1a4>
 8003dce:	e1df      	b.n	8004190 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dd0:	23a4      	movs	r3, #164	; 0xa4
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ddc:	23a0      	movs	r3, #160	; 0xa0
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2220      	movs	r2, #32
 8003de4:	4013      	ands	r3, r2
 8003de6:	d008      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	0010      	movs	r0, r2
 8003df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	589b      	ldr	r3, [r3, r2]
 8003e00:	2194      	movs	r1, #148	; 0x94
 8003e02:	187a      	adds	r2, r7, r1
 8003e04:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d004      	beq.n	8003e1e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2228      	movs	r2, #40	; 0x28
 8003e1a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e1c:	d047      	beq.n	8003eae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fcdf 	bl	80047e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2240      	movs	r2, #64	; 0x40
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d137      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e34:	f3ef 8310 	mrs	r3, PRIMASK
 8003e38:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3c:	2090      	movs	r0, #144	; 0x90
 8003e3e:	183a      	adds	r2, r7, r0
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	2301      	movs	r3, #1
 8003e44:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2140      	movs	r1, #64	; 0x40
 8003e5a:	438a      	bics	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e66:	f383 8810 	msr	PRIMASK, r3
}
 8003e6a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d012      	beq.n	8003e9a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <HAL_UART_IRQHandler+0x2a0>)
 8003e7a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7fd fa55 	bl	8001330 <HAL_DMA_Abort_IT>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d01a      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	0018      	movs	r0, r3
 8003e96:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	e012      	b.n	8003ec0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f000 f98d 	bl	80041bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea2:	e00d      	b.n	8003ec0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 f988 	bl	80041bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e008      	b.n	8003ec0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f983 	bl	80041bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003ebe:	e167      	b.n	8004190 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	46c0      	nop			; (mov r8, r8)
    return;
 8003ec2:	e165      	b.n	8004190 <HAL_UART_IRQHandler+0x564>
 8003ec4:	0000080f 	.word	0x0000080f
 8003ec8:	04000120 	.word	0x04000120
 8003ecc:	080048a9 	.word	0x080048a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d000      	beq.n	8003eda <HAL_UART_IRQHandler+0x2ae>
 8003ed8:	e131      	b.n	800413e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eda:	23a4      	movs	r3, #164	; 0xa4
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d100      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x2bc>
 8003ee6:	e12a      	b.n	800413e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ee8:	23a0      	movs	r3, #160	; 0xa0
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x2ca>
 8003ef4:	e123      	b.n	800413e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2210      	movs	r2, #16
 8003efc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2240      	movs	r2, #64	; 0x40
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b40      	cmp	r3, #64	; 0x40
 8003f0a:	d000      	beq.n	8003f0e <HAL_UART_IRQHandler+0x2e2>
 8003f0c:	e09b      	b.n	8004046 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	217e      	movs	r1, #126	; 0x7e
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d100      	bne.n	8003f26 <HAL_UART_IRQHandler+0x2fa>
 8003f24:	e136      	b.n	8004194 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2258      	movs	r2, #88	; 0x58
 8003f2a:	5a9b      	ldrh	r3, [r3, r2]
 8003f2c:	187a      	adds	r2, r7, r1
 8003f2e:	8812      	ldrh	r2, [r2, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d300      	bcc.n	8003f36 <HAL_UART_IRQHandler+0x30a>
 8003f34:	e12e      	b.n	8004194 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	187a      	adds	r2, r7, r1
 8003f3a:	215a      	movs	r1, #90	; 0x5a
 8003f3c:	8812      	ldrh	r2, [r2, #0]
 8003f3e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d06e      	beq.n	8004028 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f52:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f54:	2301      	movs	r3, #1
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	498e      	ldr	r1, [pc, #568]	; (80041a4 <HAL_UART_IRQHandler+0x578>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	f383 8810 	msr	PRIMASK, r3
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	677b      	str	r3, [r7, #116]	; 0x74
 8003f86:	2301      	movs	r3, #1
 8003f88:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8003fb8:	2301      	movs	r3, #1
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2140      	movs	r1, #64	; 0x40
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fda:	f383 8810 	msr	PRIMASK, r3
}
 8003fde:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffc:	f383 8810 	msr	PRIMASK, r3
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2110      	movs	r1, #16
 800400e:	438a      	bics	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004014:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004018:	f383 8810 	msr	PRIMASK, r3
}
 800401c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	0018      	movs	r0, r3
 8004024:	f7fd f94c 	bl	80012c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2258      	movs	r2, #88	; 0x58
 800402c:	5a9a      	ldrh	r2, [r3, r2]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	215a      	movs	r1, #90	; 0x5a
 8004032:	5a5b      	ldrh	r3, [r3, r1]
 8004034:	b29b      	uxth	r3, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0011      	movs	r1, r2
 800403e:	0018      	movs	r0, r3
 8004040:	f000 f8c4 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004044:	e0a6      	b.n	8004194 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2258      	movs	r2, #88	; 0x58
 800404a:	5a99      	ldrh	r1, [r3, r2]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	225a      	movs	r2, #90	; 0x5a
 8004050:	5a9b      	ldrh	r3, [r3, r2]
 8004052:	b29a      	uxth	r2, r3
 8004054:	208e      	movs	r0, #142	; 0x8e
 8004056:	183b      	adds	r3, r7, r0
 8004058:	1a8a      	subs	r2, r1, r2
 800405a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	225a      	movs	r2, #90	; 0x5a
 8004060:	5a9b      	ldrh	r3, [r3, r2]
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d100      	bne.n	800406a <HAL_UART_IRQHandler+0x43e>
 8004068:	e096      	b.n	8004198 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800406a:	183b      	adds	r3, r7, r0
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d100      	bne.n	8004074 <HAL_UART_IRQHandler+0x448>
 8004072:	e091      	b.n	8004198 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004074:	f3ef 8310 	mrs	r3, PRIMASK
 8004078:	60fb      	str	r3, [r7, #12]
  return(result);
 800407a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407c:	2488      	movs	r4, #136	; 0x88
 800407e:	193a      	adds	r2, r7, r4
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	2301      	movs	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4943      	ldr	r1, [pc, #268]	; (80041a8 <HAL_UART_IRQHandler+0x57c>)
 800409a:	400a      	ands	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	193b      	adds	r3, r7, r4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f383 8810 	msr	PRIMASK, r3
}
 80040aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ac:	f3ef 8310 	mrs	r3, PRIMASK
 80040b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80040b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b4:	2484      	movs	r4, #132	; 0x84
 80040b6:	193a      	adds	r2, r7, r4
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	2301      	movs	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f383 8810 	msr	PRIMASK, r3
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	438a      	bics	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f383 8810 	msr	PRIMASK, r3
}
 80040e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f6:	f3ef 8310 	mrs	r3, PRIMASK
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fe:	2480      	movs	r4, #128	; 0x80
 8004100:	193a      	adds	r2, r7, r4
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	2301      	movs	r3, #1
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	f383 8810 	msr	PRIMASK, r3
}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2110      	movs	r1, #16
 800411c:	438a      	bics	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	193b      	adds	r3, r7, r4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800412e:	183b      	adds	r3, r7, r0
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0011      	movs	r1, r2
 8004136:	0018      	movs	r0, r3
 8004138:	f000 f848 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800413c:	e02c      	b.n	8004198 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800413e:	23a4      	movs	r3, #164	; 0xa4
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	4013      	ands	r3, r2
 8004148:	d00f      	beq.n	800416a <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800414a:	23a0      	movs	r3, #160	; 0xa0
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	4013      	ands	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01e      	beq.n	800419c <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	0010      	movs	r0, r2
 8004166:	4798      	blx	r3
    }
    return;
 8004168:	e018      	b.n	800419c <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800416a:	23a4      	movs	r3, #164	; 0xa4
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2240      	movs	r2, #64	; 0x40
 8004172:	4013      	ands	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_UART_IRQHandler+0x572>
 8004176:	23a0      	movs	r3, #160	; 0xa0
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2240      	movs	r2, #64	; 0x40
 800417e:	4013      	ands	r3, r2
 8004180:	d00d      	beq.n	800419e <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f000 fba6 	bl	80048d6 <UART_EndTransmit_IT>
    return;
 800418a:	e008      	b.n	800419e <HAL_UART_IRQHandler+0x572>
      return;
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	e006      	b.n	800419e <HAL_UART_IRQHandler+0x572>
    return;
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	e004      	b.n	800419e <HAL_UART_IRQHandler+0x572>
      return;
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	e002      	b.n	800419e <HAL_UART_IRQHandler+0x572>
      return;
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	e000      	b.n	800419e <HAL_UART_IRQHandler+0x572>
    return;
 800419c:	46c0      	nop			; (mov r8, r8)
  }

}
 800419e:	46bd      	mov	sp, r7
 80041a0:	b02b      	add	sp, #172	; 0xac
 80041a2:	bd90      	pop	{r4, r7, pc}
 80041a4:	fffffeff 	.word	0xfffffeff
 80041a8:	fffffedf 	.word	0xfffffedf

080041ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	000a      	movs	r2, r1
 80041d6:	1cbb      	adds	r3, r7, #2
 80041d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ec:	231e      	movs	r3, #30
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a8d      	ldr	r2, [pc, #564]	; (8004448 <UART_SetConfig+0x264>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a88      	ldr	r2, [pc, #544]	; (800444c <UART_SetConfig+0x268>)
 800422a:	4013      	ands	r3, r2
 800422c:	0019      	movs	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a7f      	ldr	r2, [pc, #508]	; (8004450 <UART_SetConfig+0x26c>)
 8004252:	4013      	ands	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a7b      	ldr	r2, [pc, #492]	; (8004454 <UART_SetConfig+0x270>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d127      	bne.n	80042ba <UART_SetConfig+0xd6>
 800426a:	4b7b      	ldr	r3, [pc, #492]	; (8004458 <UART_SetConfig+0x274>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	2203      	movs	r2, #3
 8004270:	4013      	ands	r3, r2
 8004272:	2b03      	cmp	r3, #3
 8004274:	d00d      	beq.n	8004292 <UART_SetConfig+0xae>
 8004276:	d81b      	bhi.n	80042b0 <UART_SetConfig+0xcc>
 8004278:	2b02      	cmp	r3, #2
 800427a:	d014      	beq.n	80042a6 <UART_SetConfig+0xc2>
 800427c:	d818      	bhi.n	80042b0 <UART_SetConfig+0xcc>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <UART_SetConfig+0xa4>
 8004282:	2b01      	cmp	r3, #1
 8004284:	d00a      	beq.n	800429c <UART_SetConfig+0xb8>
 8004286:	e013      	b.n	80042b0 <UART_SetConfig+0xcc>
 8004288:	231f      	movs	r3, #31
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e021      	b.n	80042d6 <UART_SetConfig+0xf2>
 8004292:	231f      	movs	r3, #31
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	2202      	movs	r2, #2
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e01c      	b.n	80042d6 <UART_SetConfig+0xf2>
 800429c:	231f      	movs	r3, #31
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	2204      	movs	r2, #4
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e017      	b.n	80042d6 <UART_SetConfig+0xf2>
 80042a6:	231f      	movs	r3, #31
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	2208      	movs	r2, #8
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e012      	b.n	80042d6 <UART_SetConfig+0xf2>
 80042b0:	231f      	movs	r3, #31
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2210      	movs	r2, #16
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e00d      	b.n	80042d6 <UART_SetConfig+0xf2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a67      	ldr	r2, [pc, #412]	; (800445c <UART_SetConfig+0x278>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d104      	bne.n	80042ce <UART_SetConfig+0xea>
 80042c4:	231f      	movs	r3, #31
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	e003      	b.n	80042d6 <UART_SetConfig+0xf2>
 80042ce:	231f      	movs	r3, #31
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	2210      	movs	r2, #16
 80042d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	429a      	cmp	r2, r3
 80042e0:	d15d      	bne.n	800439e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80042e2:	231f      	movs	r3, #31
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d015      	beq.n	8004318 <UART_SetConfig+0x134>
 80042ec:	dc18      	bgt.n	8004320 <UART_SetConfig+0x13c>
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d00d      	beq.n	800430e <UART_SetConfig+0x12a>
 80042f2:	dc15      	bgt.n	8004320 <UART_SetConfig+0x13c>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <UART_SetConfig+0x11a>
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d005      	beq.n	8004308 <UART_SetConfig+0x124>
 80042fc:	e010      	b.n	8004320 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042fe:	f7fd fe77 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8004302:	0003      	movs	r3, r0
 8004304:	61bb      	str	r3, [r7, #24]
        break;
 8004306:	e012      	b.n	800432e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004308:	4b55      	ldr	r3, [pc, #340]	; (8004460 <UART_SetConfig+0x27c>)
 800430a:	61bb      	str	r3, [r7, #24]
        break;
 800430c:	e00f      	b.n	800432e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430e:	f7fd fe01 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8004312:	0003      	movs	r3, r0
 8004314:	61bb      	str	r3, [r7, #24]
        break;
 8004316:	e00a      	b.n	800432e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	61bb      	str	r3, [r7, #24]
        break;
 800431e:	e006      	b.n	800432e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004324:	231e      	movs	r3, #30
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
        break;
 800432c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d100      	bne.n	8004336 <UART_SetConfig+0x152>
 8004334:	e07b      	b.n	800442e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	005a      	lsls	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	18d2      	adds	r2, r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	0019      	movs	r1, r3
 8004348:	0010      	movs	r0, r2
 800434a:	f7fb fee7 	bl	800011c <__udivsi3>
 800434e:	0003      	movs	r3, r0
 8004350:	b29b      	uxth	r3, r3
 8004352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b0f      	cmp	r3, #15
 8004358:	d91c      	bls.n	8004394 <UART_SetConfig+0x1b0>
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	025b      	lsls	r3, r3, #9
 8004360:	429a      	cmp	r2, r3
 8004362:	d217      	bcs.n	8004394 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	b29a      	uxth	r2, r3
 8004368:	200e      	movs	r0, #14
 800436a:	183b      	adds	r3, r7, r0
 800436c:	210f      	movs	r1, #15
 800436e:	438a      	bics	r2, r1
 8004370:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	b29b      	uxth	r3, r3
 8004378:	2207      	movs	r2, #7
 800437a:	4013      	ands	r3, r2
 800437c:	b299      	uxth	r1, r3
 800437e:	183b      	adds	r3, r7, r0
 8004380:	183a      	adds	r2, r7, r0
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	183a      	adds	r2, r7, r0
 800438e:	8812      	ldrh	r2, [r2, #0]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	e04c      	b.n	800442e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004394:	231e      	movs	r3, #30
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e047      	b.n	800442e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800439e:	231f      	movs	r3, #31
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d015      	beq.n	80043d4 <UART_SetConfig+0x1f0>
 80043a8:	dc18      	bgt.n	80043dc <UART_SetConfig+0x1f8>
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d00d      	beq.n	80043ca <UART_SetConfig+0x1e6>
 80043ae:	dc15      	bgt.n	80043dc <UART_SetConfig+0x1f8>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <UART_SetConfig+0x1d6>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d005      	beq.n	80043c4 <UART_SetConfig+0x1e0>
 80043b8:	e010      	b.n	80043dc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ba:	f7fd fe19 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80043be:	0003      	movs	r3, r0
 80043c0:	61bb      	str	r3, [r7, #24]
        break;
 80043c2:	e012      	b.n	80043ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b26      	ldr	r3, [pc, #152]	; (8004460 <UART_SetConfig+0x27c>)
 80043c6:	61bb      	str	r3, [r7, #24]
        break;
 80043c8:	e00f      	b.n	80043ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fd fda3 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 80043ce:	0003      	movs	r3, r0
 80043d0:	61bb      	str	r3, [r7, #24]
        break;
 80043d2:	e00a      	b.n	80043ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	61bb      	str	r3, [r7, #24]
        break;
 80043da:	e006      	b.n	80043ea <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043e0:	231e      	movs	r3, #30
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
        break;
 80043e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01e      	beq.n	800442e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	085a      	lsrs	r2, r3, #1
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	18d2      	adds	r2, r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	0019      	movs	r1, r3
 8004400:	0010      	movs	r0, r2
 8004402:	f7fb fe8b 	bl	800011c <__udivsi3>
 8004406:	0003      	movs	r3, r0
 8004408:	b29b      	uxth	r3, r3
 800440a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b0f      	cmp	r3, #15
 8004410:	d909      	bls.n	8004426 <UART_SetConfig+0x242>
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	025b      	lsls	r3, r3, #9
 8004418:	429a      	cmp	r2, r3
 800441a:	d204      	bcs.n	8004426 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	60da      	str	r2, [r3, #12]
 8004424:	e003      	b.n	800442e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004426:	231e      	movs	r3, #30
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800443a:	231e      	movs	r3, #30
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	781b      	ldrb	r3, [r3, #0]
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b008      	add	sp, #32
 8004446:	bd80      	pop	{r7, pc}
 8004448:	ffff69f3 	.word	0xffff69f3
 800444c:	ffffcfff 	.word	0xffffcfff
 8004450:	fffff4ff 	.word	0xfffff4ff
 8004454:	40013800 	.word	0x40013800
 8004458:	40021000 	.word	0x40021000
 800445c:	40004400 	.word	0x40004400
 8004460:	007a1200 	.word	0x007a1200

08004464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	d00b      	beq.n	800448e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4a4a      	ldr	r2, [pc, #296]	; (80045a8 <UART_AdvFeatureConfig+0x144>)
 800447e:	4013      	ands	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2202      	movs	r2, #2
 8004494:	4013      	ands	r3, r2
 8004496:	d00b      	beq.n	80044b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4a43      	ldr	r2, [pc, #268]	; (80045ac <UART_AdvFeatureConfig+0x148>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2204      	movs	r2, #4
 80044b6:	4013      	ands	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <UART_AdvFeatureConfig+0x14c>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	0019      	movs	r1, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2208      	movs	r2, #8
 80044d8:	4013      	ands	r3, r2
 80044da:	d00b      	beq.n	80044f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <UART_AdvFeatureConfig+0x150>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2210      	movs	r2, #16
 80044fa:	4013      	ands	r3, r2
 80044fc:	d00b      	beq.n	8004516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <UART_AdvFeatureConfig+0x154>)
 8004506:	4013      	ands	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2220      	movs	r2, #32
 800451c:	4013      	ands	r3, r2
 800451e:	d00b      	beq.n	8004538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4a25      	ldr	r2, [pc, #148]	; (80045bc <UART_AdvFeatureConfig+0x158>)
 8004528:	4013      	ands	r3, r2
 800452a:	0019      	movs	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	4013      	ands	r3, r2
 8004540:	d01d      	beq.n	800457e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <UART_AdvFeatureConfig+0x15c>)
 800454a:	4013      	ands	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	035b      	lsls	r3, r3, #13
 8004562:	429a      	cmp	r2, r3
 8004564:	d10b      	bne.n	800457e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <UART_AdvFeatureConfig+0x160>)
 800456e:	4013      	ands	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	4013      	ands	r3, r2
 8004586:	d00b      	beq.n	80045a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4a0e      	ldr	r2, [pc, #56]	; (80045c8 <UART_AdvFeatureConfig+0x164>)
 8004590:	4013      	ands	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	fffdffff 	.word	0xfffdffff
 80045ac:	fffeffff 	.word	0xfffeffff
 80045b0:	fffbffff 	.word	0xfffbffff
 80045b4:	ffff7fff 	.word	0xffff7fff
 80045b8:	ffffefff 	.word	0xffffefff
 80045bc:	ffffdfff 	.word	0xffffdfff
 80045c0:	ffefffff 	.word	0xffefffff
 80045c4:	ff9fffff 	.word	0xff9fffff
 80045c8:	fff7ffff 	.word	0xfff7ffff

080045cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	2100      	movs	r1, #0
 80045da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045dc:	f7fc fd64 	bl	80010a8 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2208      	movs	r2, #8
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d10c      	bne.n	800460c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	0391      	lsls	r1, r2, #14
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <UART_CheckIdleState+0x8c>)
 80045fc:	9200      	str	r2, [sp, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	f000 f82c 	bl	800465c <UART_WaitOnFlagUntilTimeout>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e021      	b.n	8004650 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2204      	movs	r2, #4
 8004614:	4013      	ands	r3, r2
 8004616:	2b04      	cmp	r3, #4
 8004618:	d10c      	bne.n	8004634 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	03d1      	lsls	r1, r2, #15
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <UART_CheckIdleState+0x8c>)
 8004624:	9200      	str	r2, [sp, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	f000 f818 	bl	800465c <UART_WaitOnFlagUntilTimeout>
 800462c:	1e03      	subs	r3, r0, #0
 800462e:	d001      	beq.n	8004634 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e00d      	b.n	8004650 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2274      	movs	r2, #116	; 0x74
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b004      	add	sp, #16
 8004656:	bd80      	pop	{r7, pc}
 8004658:	01ffffff 	.word	0x01ffffff

0800465c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b094      	sub	sp, #80	; 0x50
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	1dfb      	adds	r3, r7, #7
 800466a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466c:	e0a3      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004670:	3301      	adds	r3, #1
 8004672:	d100      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004674:	e09f      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fc fd17 	bl	80010a8 <HAL_GetTick>
 800467a:	0002      	movs	r2, r0
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <UART_WaitOnFlagUntilTimeout+0x30>
 8004686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004688:	2b00      	cmp	r3, #0
 800468a:	d13d      	bne.n	8004708 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468c:	f3ef 8310 	mrs	r3, PRIMASK
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	2301      	movs	r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	494c      	ldr	r1, [pc, #304]	; (80047e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80046ae:	400a      	ands	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046be:	f3ef 8310 	mrs	r3, PRIMASK
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
 80046c8:	2301      	movs	r3, #1
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	438a      	bics	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2274      	movs	r2, #116	; 0x74
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e067      	b.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	4013      	ands	r3, r2
 8004712:	d050      	beq.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	401a      	ands	r2, r3
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	429a      	cmp	r2, r3
 8004726:	d146      	bne.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	0112      	lsls	r2, r2, #4
 8004730:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004732:	f3ef 8310 	mrs	r3, PRIMASK
 8004736:	613b      	str	r3, [r7, #16]
  return(result);
 8004738:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800473a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f383 8810 	msr	PRIMASK, r3
}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4923      	ldr	r1, [pc, #140]	; (80047e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004754:	400a      	ands	r2, r1
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f383 8810 	msr	PRIMASK, r3
}
 8004762:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004764:	f3ef 8310 	mrs	r3, PRIMASK
 8004768:	61fb      	str	r3, [r7, #28]
  return(result);
 800476a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476c:	64bb      	str	r3, [r7, #72]	; 0x48
 800476e:	2301      	movs	r3, #1
 8004770:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	438a      	bics	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	2120      	movs	r1, #32
 80047a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2274      	movs	r2, #116	; 0x74
 80047ae:	2100      	movs	r1, #0
 80047b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e010      	b.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	425a      	negs	r2, r3
 80047c6:	4153      	adcs	r3, r2
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	001a      	movs	r2, r3
 80047cc:	1dfb      	adds	r3, r7, #7
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d100      	bne.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80047d4:	e74b      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b014      	add	sp, #80	; 0x50
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	fffffe5f 	.word	0xfffffe5f

080047e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08e      	sub	sp, #56	; 0x38
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ec:	f3ef 8310 	mrs	r3, PRIMASK
 80047f0:	617b      	str	r3, [r7, #20]
  return(result);
 80047f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
 80047f6:	2301      	movs	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f383 8810 	msr	PRIMASK, r3
}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4925      	ldr	r1, [pc, #148]	; (80048a4 <UART_EndRxTransfer+0xc0>)
 800480e:	400a      	ands	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481e:	f3ef 8310 	mrs	r3, PRIMASK
 8004822:	623b      	str	r3, [r7, #32]
  return(result);
 8004824:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	633b      	str	r3, [r7, #48]	; 0x30
 8004828:	2301      	movs	r3, #1
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	f383 8810 	msr	PRIMASK, r3
}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	438a      	bics	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	f383 8810 	msr	PRIMASK, r3
}
 800484e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	2b01      	cmp	r3, #1
 8004856:	d118      	bne.n	800488a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004858:	f3ef 8310 	mrs	r3, PRIMASK
 800485c:	60bb      	str	r3, [r7, #8]
  return(result);
 800485e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004862:	2301      	movs	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2110      	movs	r1, #16
 800487a:	438a      	bics	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f383 8810 	msr	PRIMASK, r3
}
 8004888:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b00e      	add	sp, #56	; 0x38
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	fffffedf 	.word	0xfffffedf

080048a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	225a      	movs	r2, #90	; 0x5a
 80048ba:	2100      	movs	r1, #0
 80048bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2252      	movs	r2, #82	; 0x52
 80048c2:	2100      	movs	r1, #0
 80048c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7ff fc77 	bl	80041bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b004      	add	sp, #16
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048de:	f3ef 8310 	mrs	r3, PRIMASK
 80048e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80048e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	2301      	movs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2140      	movs	r1, #64	; 0x40
 8004900:	438a      	bics	r2, r1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	0018      	movs	r0, r3
 8004920:	f7ff fc44 	bl	80041ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	46bd      	mov	sp, r7
 8004928:	b006      	add	sp, #24
 800492a:	bd80      	pop	{r7, pc}

0800492c <printNetworkInfo>:
 */

#include "wiznet_extension.h"

void printNetworkInfo(void)
{
 800492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492e:	46de      	mov	lr, fp
 8004930:	4657      	mov	r7, sl
 8004932:	464e      	mov	r6, r9
 8004934:	4645      	mov	r5, r8
 8004936:	b5e0      	push	{r5, r6, r7, lr}
 8004938:	b0a3      	sub	sp, #140	; 0x8c
 800493a:	af12      	add	r7, sp, #72	; 0x48
  wiz_NetInfo netInfo;
  wizchip_getnetinfo(&netInfo);
 800493c:	2428      	movs	r4, #40	; 0x28
 800493e:	193b      	adds	r3, r7, r4
 8004940:	0018      	movs	r0, r3
 8004942:	f001 ffc5 	bl	80068d0 <wizchip_getnetinfo>
      "sn   = %d.%d.%d.%d\r\n"
      "gw   = %d.%d.%d.%d\r\n"
      "dns  = %d.%d.%d.%d\r\n"
      "dhcp:  %s\r\n"
      "===========================\r\n",
      netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3],
 8004946:	0022      	movs	r2, r4
 8004948:	18bb      	adds	r3, r7, r2
 800494a:	781b      	ldrb	r3, [r3, #0]
  printf(
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
      netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3],
 800494e:	18bb      	adds	r3, r7, r2
 8004950:	785b      	ldrb	r3, [r3, #1]
  printf(
 8004952:	623b      	str	r3, [r7, #32]
      netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3],
 8004954:	18bb      	adds	r3, r7, r2
 8004956:	789b      	ldrb	r3, [r3, #2]
  printf(
 8004958:	61fb      	str	r3, [r7, #28]
      netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3],
 800495a:	18bb      	adds	r3, r7, r2
 800495c:	78db      	ldrb	r3, [r3, #3]
  printf(
 800495e:	469a      	mov	sl, r3
      netInfo.ip[0],  netInfo.ip[1],  netInfo.ip[2],  netInfo.ip[3],
 8004960:	18bb      	adds	r3, r7, r2
 8004962:	799b      	ldrb	r3, [r3, #6]
  printf(
 8004964:	469b      	mov	fp, r3
      netInfo.ip[0],  netInfo.ip[1],  netInfo.ip[2],  netInfo.ip[3],
 8004966:	0010      	movs	r0, r2
 8004968:	183b      	adds	r3, r7, r0
 800496a:	79db      	ldrb	r3, [r3, #7]
  printf(
 800496c:	61bb      	str	r3, [r7, #24]
      netInfo.ip[0],  netInfo.ip[1],  netInfo.ip[2],  netInfo.ip[3],
 800496e:	183b      	adds	r3, r7, r0
 8004970:	7a1b      	ldrb	r3, [r3, #8]
  printf(
 8004972:	617b      	str	r3, [r7, #20]
      netInfo.ip[0],  netInfo.ip[1],  netInfo.ip[2],  netInfo.ip[3],
 8004974:	183b      	adds	r3, r7, r0
 8004976:	7a5b      	ldrb	r3, [r3, #9]
  printf(
 8004978:	613b      	str	r3, [r7, #16]
      netInfo.sn[0],  netInfo.sn[1],  netInfo.sn[2],  netInfo.sn[3],
 800497a:	183b      	adds	r3, r7, r0
 800497c:	7a9b      	ldrb	r3, [r3, #10]
  printf(
 800497e:	60fb      	str	r3, [r7, #12]
      netInfo.sn[0],  netInfo.sn[1],  netInfo.sn[2],  netInfo.sn[3],
 8004980:	183b      	adds	r3, r7, r0
 8004982:	7adb      	ldrb	r3, [r3, #11]
  printf(
 8004984:	60bb      	str	r3, [r7, #8]
      netInfo.sn[0],  netInfo.sn[1],  netInfo.sn[2],  netInfo.sn[3],
 8004986:	183b      	adds	r3, r7, r0
 8004988:	7b1b      	ldrb	r3, [r3, #12]
  printf(
 800498a:	607b      	str	r3, [r7, #4]
      netInfo.sn[0],  netInfo.sn[1],  netInfo.sn[2],  netInfo.sn[3],
 800498c:	183b      	adds	r3, r7, r0
 800498e:	7b5b      	ldrb	r3, [r3, #13]
  printf(
 8004990:	603b      	str	r3, [r7, #0]
      netInfo.gw[0],  netInfo.gw[1],  netInfo.gw[2],  netInfo.gw[3],
 8004992:	183b      	adds	r3, r7, r0
 8004994:	7b9b      	ldrb	r3, [r3, #14]
  printf(
 8004996:	4699      	mov	r9, r3
      netInfo.gw[0],  netInfo.gw[1],  netInfo.gw[2],  netInfo.gw[3],
 8004998:	183b      	adds	r3, r7, r0
 800499a:	7bdb      	ldrb	r3, [r3, #15]
  printf(
 800499c:	4698      	mov	r8, r3
      netInfo.gw[0],  netInfo.gw[1],  netInfo.gw[2],  netInfo.gw[3],
 800499e:	183b      	adds	r3, r7, r0
 80049a0:	7c1b      	ldrb	r3, [r3, #16]
  printf(
 80049a2:	469c      	mov	ip, r3
      netInfo.gw[0],  netInfo.gw[1],  netInfo.gw[2],  netInfo.gw[3],
 80049a4:	183b      	adds	r3, r7, r0
 80049a6:	7c5b      	ldrb	r3, [r3, #17]
  printf(
 80049a8:	001e      	movs	r6, r3
      netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3],
 80049aa:	183b      	adds	r3, r7, r0
 80049ac:	7c9b      	ldrb	r3, [r3, #18]
  printf(
 80049ae:	001d      	movs	r5, r3
      netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3],
 80049b0:	183b      	adds	r3, r7, r0
 80049b2:	7cdb      	ldrb	r3, [r3, #19]
  printf(
 80049b4:	001c      	movs	r4, r3
      netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3],
 80049b6:	183b      	adds	r3, r7, r0
 80049b8:	7d1b      	ldrb	r3, [r3, #20]
  printf(
 80049ba:	0019      	movs	r1, r3
      netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3],
 80049bc:	183b      	adds	r3, r7, r0
 80049be:	7d5b      	ldrb	r3, [r3, #21]
  printf(
 80049c0:	001a      	movs	r2, r3
      netInfo.dhcp == 1 ? "static" : "dynamic");
 80049c2:	183b      	adds	r3, r7, r0
 80049c4:	7d9b      	ldrb	r3, [r3, #22]
  printf(
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <printNetworkInfo+0xa2>
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <printNetworkInfo+0x100>)
 80049cc:	e000      	b.n	80049d0 <printNetworkInfo+0xa4>
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <printNetworkInfo+0x104>)
 80049d0:	4818      	ldr	r0, [pc, #96]	; (8004a34 <printNetworkInfo+0x108>)
 80049d2:	9311      	str	r3, [sp, #68]	; 0x44
 80049d4:	9210      	str	r2, [sp, #64]	; 0x40
 80049d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80049d8:	940e      	str	r4, [sp, #56]	; 0x38
 80049da:	950d      	str	r5, [sp, #52]	; 0x34
 80049dc:	960c      	str	r6, [sp, #48]	; 0x30
 80049de:	4663      	mov	r3, ip
 80049e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e2:	4643      	mov	r3, r8
 80049e4:	930a      	str	r3, [sp, #40]	; 0x28
 80049e6:	464b      	mov	r3, r9
 80049e8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	9308      	str	r3, [sp, #32]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	9307      	str	r3, [sp, #28]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	9306      	str	r3, [sp, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	9305      	str	r3, [sp, #20]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	9304      	str	r3, [sp, #16]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	9303      	str	r3, [sp, #12]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	9302      	str	r3, [sp, #8]
 8004a06:	465b      	mov	r3, fp
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	4653      	mov	r3, sl
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a14:	f002 f858 	bl	8006ac8 <iprintf>
}
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b011      	add	sp, #68	; 0x44
 8004a1e:	bcf0      	pop	{r4, r5, r6, r7}
 8004a20:	46bb      	mov	fp, r7
 8004a22:	46b2      	mov	sl, r6
 8004a24:	46a9      	mov	r9, r5
 8004a26:	46a0      	mov	r8, r4
 8004a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	0800812c 	.word	0x0800812c
 8004a30:	08008134 	.word	0x08008134
 8004a34:	0800813c 	.word	0x0800813c

08004a38 <httpc_connect>:
{
  return socket(sn, Sn_MR_TCP, 818, Sn_MR_ND);
}

uint8_t httpc_connect(uint8_t sn)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	0002      	movs	r2, r0
 8004a40:	1dfb      	adds	r3, r7, #7
 8004a42:	701a      	strb	r2, [r3, #0]
  return connect(sn, SERVER_IP, SERVER_PORT);
 8004a44:	2250      	movs	r2, #80	; 0x50
 8004a46:	4906      	ldr	r1, [pc, #24]	; (8004a60 <httpc_connect+0x28>)
 8004a48:	1dfb      	adds	r3, r7, #7
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 fdf3 	bl	8005638 <connect>
 8004a52:	0003      	movs	r3, r0
 8004a54:	b2db      	uxtb	r3, r3
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	08008318 	.word	0x08008318

08004a64 <httpc_send>:

uint8_t httpc_send(uint8_t sn, Request* request)
{
 8004a64:	b5b0      	push	{r4, r5, r7, lr}
 8004a66:	4c44      	ldr	r4, [pc, #272]	; (8004b78 <httpc_send+0x114>)
 8004a68:	44a5      	add	sp, r4
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	6039      	str	r1, [r7, #0]
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <httpc_send+0x118>)
 8004a72:	2181      	movs	r1, #129	; 0x81
 8004a74:	0109      	lsls	r1, r1, #4
 8004a76:	185b      	adds	r3, r3, r1
 8004a78:	19db      	adds	r3, r3, r7
 8004a7a:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[DATA_BUF_SIZE] = {};
 8004a7c:	4b40      	ldr	r3, [pc, #256]	; (8004b80 <httpc_send+0x11c>)
 8004a7e:	185b      	adds	r3, r3, r1
 8004a80:	19db      	adds	r3, r3, r7
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4a3e      	ldr	r2, [pc, #248]	; (8004b84 <httpc_send+0x120>)
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f002 f812 	bl	8006ab6 <memset>
  int requestLength = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	4a3c      	ldr	r2, [pc, #240]	; (8004b88 <httpc_send+0x124>)
 8004a96:	18ba      	adds	r2, r7, r2
 8004a98:	6013      	str	r3, [r2, #0]

  requestLength += sprintf((char*)buffer,
                           "%s %s HTTP/1.1\r\n",
                           request->method ? "POST" : "GET", request->uri);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
  requestLength += sprintf((char*)buffer,
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <httpc_send+0x42>
 8004aa2:	4a3a      	ldr	r2, [pc, #232]	; (8004b8c <httpc_send+0x128>)
 8004aa4:	e000      	b.n	8004aa8 <httpc_send+0x44>
 8004aa6:	4a3a      	ldr	r2, [pc, #232]	; (8004b90 <httpc_send+0x12c>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4939      	ldr	r1, [pc, #228]	; (8004b94 <httpc_send+0x130>)
 8004aae:	250c      	movs	r5, #12
 8004ab0:	1978      	adds	r0, r7, r5
 8004ab2:	f002 f89f 	bl	8006bf4 <siprintf>
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	4c33      	ldr	r4, [pc, #204]	; (8004b88 <httpc_send+0x124>)
 8004aba:	193b      	adds	r3, r7, r4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	193a      	adds	r2, r7, r4
 8004ac2:	6013      	str	r3, [r2, #0]
  requestLength += sprintf((char*)buffer + requestLength,
 8004ac4:	193b      	adds	r3, r7, r4
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	197a      	adds	r2, r7, r5
 8004aca:	18d0      	adds	r0, r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <httpc_send+0x134>)
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	f002 f88e 	bl	8006bf4 <siprintf>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	193b      	adds	r3, r7, r4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	193a      	adds	r2, r7, r4
 8004ae2:	6013      	str	r3, [r2, #0]
                           "Host: %s\r\n", request->host);
  requestLength += sprintf((char*)buffer + requestLength,
 8004ae4:	193b      	adds	r3, r7, r4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	197a      	adds	r2, r7, r5
 8004aea:	18d3      	adds	r3, r2, r3
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <httpc_send+0x138>)
 8004aee:	492c      	ldr	r1, [pc, #176]	; (8004ba0 <httpc_send+0x13c>)
 8004af0:	0018      	movs	r0, r3
 8004af2:	f002 f87f 	bl	8006bf4 <siprintf>
 8004af6:	0002      	movs	r2, r0
 8004af8:	193b      	adds	r3, r7, r4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	193a      	adds	r2, r7, r4
 8004b00:	6013      	str	r3, [r2, #0]
                           "Connection: %s\r\n", "keep-alive");
  requestLength += sprintf((char*)buffer + requestLength,
 8004b02:	193b      	adds	r3, r7, r4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	197a      	adds	r2, r7, r5
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	4a26      	ldr	r2, [pc, #152]	; (8004ba4 <httpc_send+0x140>)
 8004b0c:	4926      	ldr	r1, [pc, #152]	; (8004ba8 <httpc_send+0x144>)
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f002 f870 	bl	8006bf4 <siprintf>
 8004b14:	0002      	movs	r2, r0
 8004b16:	193b      	adds	r3, r7, r4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	193a      	adds	r2, r7, r4
 8004b1e:	6013      	str	r3, [r2, #0]
                           "Keep-Alive: %s\r\n", "2000");
  requestLength += sprintf((char*)buffer + requestLength, "\r\n");
 8004b20:	193b      	adds	r3, r7, r4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	197a      	adds	r2, r7, r5
 8004b26:	18d3      	adds	r3, r2, r3
 8004b28:	4a20      	ldr	r2, [pc, #128]	; (8004bac <httpc_send+0x148>)
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f002 f861 	bl	8006bf4 <siprintf>
 8004b32:	0002      	movs	r2, r0
 8004b34:	193b      	adds	r3, r7, r4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	193a      	adds	r2, r7, r4
 8004b3c:	6013      	str	r3, [r2, #0]

#ifdef HTTPC_DEBUG
  printf(
 8004b3e:	193b      	adds	r3, r7, r4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	1979      	adds	r1, r7, r5
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <httpc_send+0x14c>)
 8004b46:	0018      	movs	r0, r3
 8004b48:	f001 ffbe 	bl	8006ac8 <iprintf>
      "%s"
      "Request length: %d\r\n"
      "======================\r\n",
      (char*)buffer, requestLength);
#endif
  return send(sn, buffer, requestLength);
 8004b4c:	193b      	adds	r3, r7, r4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	1979      	adds	r1, r7, r5
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <httpc_send+0x118>)
 8004b56:	2081      	movs	r0, #129	; 0x81
 8004b58:	0100      	lsls	r0, r0, #4
 8004b5a:	181b      	adds	r3, r3, r0
 8004b5c:	19db      	adds	r3, r3, r7
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 fee7 	bl	8005934 <send>
 8004b66:	0003      	movs	r3, r0
 8004b68:	b2db      	uxtb	r3, r3
}
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	2381      	movs	r3, #129	; 0x81
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	449d      	add	sp, r3
 8004b74:	bdb0      	pop	{r4, r5, r7, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	fffff7f0 	.word	0xfffff7f0
 8004b7c:	fffff7f7 	.word	0xfffff7f7
 8004b80:	fffff7fc 	.word	0xfffff7fc
 8004b84:	000007fc 	.word	0x000007fc
 8004b88:	0000080c 	.word	0x0000080c
 8004b8c:	080081f0 	.word	0x080081f0
 8004b90:	080081f8 	.word	0x080081f8
 8004b94:	080081fc 	.word	0x080081fc
 8004b98:	08008210 	.word	0x08008210
 8004b9c:	0800821c 	.word	0x0800821c
 8004ba0:	08008228 	.word	0x08008228
 8004ba4:	0800823c 	.word	0x0800823c
 8004ba8:	08008244 	.word	0x08008244
 8004bac:	08008258 	.word	0x08008258
 8004bb0:	0800825c 	.word	0x0800825c

08004bb4 <httpc_recv>:

uint8_t httpc_recv(uint8_t sn)
{
 8004bb4:	b5b0      	push	{r4, r5, r7, lr}
 8004bb6:	4c1a      	ldr	r4, [pc, #104]	; (8004c20 <httpc_recv+0x6c>)
 8004bb8:	44a5      	add	sp, r4
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <httpc_recv+0x70>)
 8004bc0:	2481      	movs	r4, #129	; 0x81
 8004bc2:	0124      	lsls	r4, r4, #4
 8004bc4:	191b      	adds	r3, r3, r4
 8004bc6:	19db      	adds	r3, r3, r7
 8004bc8:	701a      	strb	r2, [r3, #0]
  uint8_t reply[DATA_BUF_SIZE] = {};
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <httpc_recv+0x74>)
 8004bcc:	191b      	adds	r3, r3, r4
 8004bce:	19db      	adds	r3, r3, r7
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <httpc_recv+0x78>)
 8004bd8:	2100      	movs	r1, #0
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f001 ff6b 	bl	8006ab6 <memset>
  int32_t replyLen = recv(sn, reply, sizeof(reply));
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	011a      	lsls	r2, r3, #4
 8004be4:	250c      	movs	r5, #12
 8004be6:	1979      	adds	r1, r7, r5
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <httpc_recv+0x70>)
 8004bea:	191b      	adds	r3, r3, r4
 8004bec:	19db      	adds	r3, r3, r7
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 ffd5 	bl	8005ba0 <recv>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <httpc_recv+0x7c>)
 8004bfa:	193a      	adds	r2, r7, r4
 8004bfc:	6013      	str	r3, [r2, #0]

#ifdef HTTPC_DEBUG
  printf(
 8004bfe:	193b      	adds	r3, r7, r4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	1979      	adds	r1, r7, r5
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <httpc_recv+0x80>)
 8004c06:	0018      	movs	r0, r3
 8004c08:	f001 ff5e 	bl	8006ac8 <iprintf>
      "%s\r\n"
      "Reply length: %d\r\n"
      "======================\r\n",
      reply, replyLen);
#endif
  return replyLen;
 8004c0c:	193b      	adds	r3, r7, r4
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	2381      	movs	r3, #129	; 0x81
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	449d      	add	sp, r3
 8004c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	fffff7f0 	.word	0xfffff7f0
 8004c24:	fffff7f7 	.word	0xfffff7f7
 8004c28:	fffff7fc 	.word	0xfffff7fc
 8004c2c:	000007fc 	.word	0x000007fc
 8004c30:	0000080c 	.word	0x0000080c
 8004c34:	080082b0 	.word	0x080082b0

08004c38 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004c38:	b5b0      	push	{r4, r5, r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004c4c:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <WIZCHIP_READ+0x24>
 8004c54:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d114      	bne.n	8004c86 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004c5c:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	0c12      	lsrs	r2, r2, #16
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	0010      	movs	r0, r2
 8004c68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	0a12      	lsrs	r2, r2, #8
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	0010      	movs	r0, r2
 8004c76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	0010      	movs	r0, r2
 8004c82:	4798      	blx	r3
 8004c84:	e014      	b.n	8004cb0 <WIZCHIP_READ+0x78>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	210c      	movs	r1, #12
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	187a      	adds	r2, r7, r1
 8004caa:	2103      	movs	r1, #3
 8004cac:	0010      	movs	r0, r2
 8004cae:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	250f      	movs	r5, #15
 8004cb6:	197c      	adds	r4, r7, r5
 8004cb8:	4798      	blx	r3
 8004cba:	0003      	movs	r3, r0
 8004cbc:	7023      	strb	r3, [r4, #0]

   WIZCHIP.CS._deselect();
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <WIZCHIP_READ+0xa0>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	4798      	blx	r3
   return ret;
 8004cca:	197b      	adds	r3, r7, r5
 8004ccc:	781b      	ldrb	r3, [r3, #0]
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b004      	add	sp, #16
 8004cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	20000010 	.word	0x20000010

08004cdc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	000a      	movs	r2, r1
 8004ce6:	1cfb      	adds	r3, r7, #3
 8004ce8:	701a      	strb	r2, [r3, #0]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004cea:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004cf0:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004cfe:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11a      	bne.n	8004d3c <WIZCHIP_WRITE+0x60>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004d06:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	0c12      	lsrs	r2, r2, #16
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	0010      	movs	r0, r2
 8004d12:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	0a12      	lsrs	r2, r2, #8
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	0010      	movs	r0, r2
 8004d20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004d2e:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	1cfa      	adds	r2, r7, #3
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	0010      	movs	r0, r2
 8004d38:	4798      	blx	r3
 8004d3a:	e018      	b.n	8004d6e <WIZCHIP_WRITE+0x92>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	210c      	movs	r1, #12
 8004d44:	187b      	adds	r3, r7, r1
 8004d46:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	187b      	adds	r3, r7, r1
 8004d58:	709a      	strb	r2, [r3, #2]
		spi_data[3] = wb;
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	1cfa      	adds	r2, r7, #3
 8004d5e:	7812      	ldrb	r2, [r2, #0]
 8004d60:	70da      	strb	r2, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	187a      	adds	r2, r7, r1
 8004d68:	2104      	movs	r1, #4
 8004d6a:	0010      	movs	r0, r2
 8004d6c:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <WIZCHIP_WRITE+0xa8>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	4798      	blx	r3
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	20000010 	.word	0x20000010

08004d88 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	1dbb      	adds	r3, r7, #6
 8004d94:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004d96:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004d9c:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <WIZCHIP_READ_BUF+0x2a>
 8004daa:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d12f      	bne.n	8004e12 <WIZCHIP_READ_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	0c12      	lsrs	r2, r2, #16
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	0010      	movs	r0, r2
 8004dbe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004dc0:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	0a12      	lsrs	r2, r2, #8
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	0010      	movs	r0, r2
 8004dcc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	0010      	movs	r0, r2
 8004dd8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004dda:	2316      	movs	r3, #22
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2200      	movs	r2, #0
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	e00e      	b.n	8004e02 <WIZCHIP_READ_BUF+0x7a>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004de4:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2516      	movs	r5, #22
 8004dea:	197a      	adds	r2, r7, r5
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	188c      	adds	r4, r1, r2
 8004df2:	4798      	blx	r3
 8004df4:	0003      	movs	r3, r0
 8004df6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004df8:	197b      	adds	r3, r7, r5
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	197b      	adds	r3, r7, r5
 8004dfe:	3201      	adds	r2, #1
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	2316      	movs	r3, #22
 8004e04:	18fa      	adds	r2, r7, r3
 8004e06:	1dbb      	adds	r3, r7, #6
 8004e08:	8812      	ldrh	r2, [r2, #0]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3e9      	bcc.n	8004de4 <WIZCHIP_READ_BUF+0x5c>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004e10:	e01b      	b.n	8004e4a <WIZCHIP_READ_BUF+0xc2>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	2110      	movs	r1, #16
 8004e1a:	187b      	adds	r3, r7, r1
 8004e1c:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	187b      	adds	r3, r7, r1
 8004e2e:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	187a      	adds	r2, r7, r1
 8004e36:	2103      	movs	r1, #3
 8004e38:	0010      	movs	r0, r2
 8004e3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004e3c:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	1dba      	adds	r2, r7, #6
 8004e42:	8811      	ldrh	r1, [r2, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	0010      	movs	r0, r2
 8004e48:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <WIZCHIP_READ_BUF+0xd8>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4798      	blx	r3
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b006      	add	sp, #24
 8004e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	20000010 	.word	0x20000010

08004e64 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	1dbb      	adds	r3, r7, #6
 8004e70:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004e72:	4b32      	ldr	r3, [pc, #200]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004e78:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2204      	movs	r2, #4
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004e86:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d12f      	bne.n	8004eee <WIZCHIP_WRITE_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004e8e:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	0c12      	lsrs	r2, r2, #16
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	0010      	movs	r0, r2
 8004e9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004e9c:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	0a12      	lsrs	r2, r2, #8
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	0010      	movs	r0, r2
 8004ea8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004eaa:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004eb6:	2316      	movs	r3, #22
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2200      	movs	r2, #0
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e00e      	b.n	8004ede <WIZCHIP_WRITE_BUF+0x7a>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	2416      	movs	r4, #22
 8004ec6:	193a      	adds	r2, r7, r4
 8004ec8:	8812      	ldrh	r2, [r2, #0]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	188a      	adds	r2, r1, r2
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	0010      	movs	r0, r2
 8004ed2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	193b      	adds	r3, r7, r4
 8004eda:	3201      	adds	r2, #1
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	2316      	movs	r3, #22
 8004ee0:	18fa      	adds	r2, r7, r3
 8004ee2:	1dbb      	adds	r3, r7, #6
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3e9      	bcc.n	8004ec0 <WIZCHIP_WRITE_BUF+0x5c>
 8004eec:	e01b      	b.n	8004f26 <WIZCHIP_WRITE_BUF+0xc2>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	0a1b      	lsrs	r3, r3, #8
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	187b      	adds	r3, r7, r1
 8004f0a:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	187a      	adds	r2, r7, r1
 8004f12:	2103      	movs	r1, #3
 8004f14:	0010      	movs	r0, r2
 8004f16:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	1dba      	adds	r2, r7, #6
 8004f1e:	8811      	ldrh	r1, [r2, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	0010      	movs	r0, r2
 8004f24:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <WIZCHIP_WRITE_BUF+0xd8>)
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	4798      	blx	r3
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b007      	add	sp, #28
 8004f38:	bd90      	pop	{r4, r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	20000010 	.word	0x20000010

08004f40 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004f40:	b5b0      	push	{r4, r5, r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	0002      	movs	r2, r0
 8004f48:	1dfb      	adds	r3, r7, #7
 8004f4a:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8004f4c:	230e      	movs	r3, #14
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	2200      	movs	r2, #0
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	230c      	movs	r3, #12
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	2200      	movs	r2, #0
 8004f5a:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004f5c:	1dfb      	adds	r3, r7, #7
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3301      	adds	r3, #1
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	0192      	lsls	r2, r2, #6
 8004f6a:	4694      	mov	ip, r2
 8004f6c:	4463      	add	r3, ip
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f7ff fe62 	bl	8004c38 <WIZCHIP_READ>
 8004f74:	0003      	movs	r3, r0
 8004f76:	001a      	movs	r2, r3
 8004f78:	250c      	movs	r5, #12
 8004f7a:	197b      	adds	r3, r7, r5
 8004f7c:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004f7e:	197b      	adds	r3, r7, r5
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	b29c      	uxth	r4, r3
 8004f86:	1dfb      	adds	r3, r7, #7
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	2284      	movs	r2, #132	; 0x84
 8004f92:	0192      	lsls	r2, r2, #6
 8004f94:	4694      	mov	ip, r2
 8004f96:	4463      	add	r3, ip
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff fe4d 	bl	8004c38 <WIZCHIP_READ>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	197b      	adds	r3, r7, r5
 8004fa4:	18a2      	adds	r2, r4, r2
 8004fa6:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8004fa8:	197b      	adds	r3, r7, r5
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d025      	beq.n	8004ffc <getSn_TX_FSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004fb0:	1dfb      	adds	r3, r7, #7
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	2280      	movs	r2, #128	; 0x80
 8004fbc:	0192      	lsls	r2, r2, #6
 8004fbe:	4694      	mov	ip, r2
 8004fc0:	4463      	add	r3, ip
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7ff fe38 	bl	8004c38 <WIZCHIP_READ>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	001a      	movs	r2, r3
 8004fcc:	250e      	movs	r5, #14
 8004fce:	197b      	adds	r3, r7, r5
 8004fd0:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004fd2:	197b      	adds	r3, r7, r5
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	b29c      	uxth	r4, r3
 8004fda:	1dfb      	adds	r3, r7, #7
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	2284      	movs	r2, #132	; 0x84
 8004fe6:	0192      	lsls	r2, r2, #6
 8004fe8:	4694      	mov	ip, r2
 8004fea:	4463      	add	r3, ip
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7ff fe23 	bl	8004c38 <WIZCHIP_READ>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	197b      	adds	r3, r7, r5
 8004ff8:	18a2      	adds	r2, r4, r2
 8004ffa:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8004ffc:	210e      	movs	r1, #14
 8004ffe:	187a      	adds	r2, r7, r1
 8005000:	230c      	movs	r3, #12
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	8812      	ldrh	r2, [r2, #0]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d1a7      	bne.n	8004f5c <getSn_TX_FSR+0x1c>
   return val;
 800500c:	187b      	adds	r3, r7, r1
 800500e:	881b      	ldrh	r3, [r3, #0]
}
 8005010:	0018      	movs	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	b004      	add	sp, #16
 8005016:	bdb0      	pop	{r4, r5, r7, pc}

08005018 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005018:	b5b0      	push	{r4, r5, r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	0002      	movs	r2, r0
 8005020:	1dfb      	adds	r3, r7, #7
 8005022:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8005024:	230e      	movs	r3, #14
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	2200      	movs	r2, #0
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	230c      	movs	r3, #12
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	2200      	movs	r2, #0
 8005032:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	3301      	adds	r3, #1
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	2298      	movs	r2, #152	; 0x98
 8005040:	0192      	lsls	r2, r2, #6
 8005042:	4694      	mov	ip, r2
 8005044:	4463      	add	r3, ip
 8005046:	0018      	movs	r0, r3
 8005048:	f7ff fdf6 	bl	8004c38 <WIZCHIP_READ>
 800504c:	0003      	movs	r3, r0
 800504e:	001a      	movs	r2, r3
 8005050:	250c      	movs	r5, #12
 8005052:	197b      	adds	r3, r7, r5
 8005054:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005056:	197b      	adds	r3, r7, r5
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	b29c      	uxth	r4, r3
 800505e:	1dfb      	adds	r3, r7, #7
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	3301      	adds	r3, #1
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	229c      	movs	r2, #156	; 0x9c
 800506a:	0192      	lsls	r2, r2, #6
 800506c:	4694      	mov	ip, r2
 800506e:	4463      	add	r3, ip
 8005070:	0018      	movs	r0, r3
 8005072:	f7ff fde1 	bl	8004c38 <WIZCHIP_READ>
 8005076:	0003      	movs	r3, r0
 8005078:	b29a      	uxth	r2, r3
 800507a:	197b      	adds	r3, r7, r5
 800507c:	18a2      	adds	r2, r4, r2
 800507e:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8005080:	197b      	adds	r3, r7, r5
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d025      	beq.n	80050d4 <getSn_RX_RSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	3301      	adds	r3, #1
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	2298      	movs	r2, #152	; 0x98
 8005094:	0192      	lsls	r2, r2, #6
 8005096:	4694      	mov	ip, r2
 8005098:	4463      	add	r3, ip
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff fdcc 	bl	8004c38 <WIZCHIP_READ>
 80050a0:	0003      	movs	r3, r0
 80050a2:	001a      	movs	r2, r3
 80050a4:	250e      	movs	r5, #14
 80050a6:	197b      	adds	r3, r7, r5
 80050a8:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80050aa:	197b      	adds	r3, r7, r5
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	b29c      	uxth	r4, r3
 80050b2:	1dfb      	adds	r3, r7, #7
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	3301      	adds	r3, #1
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	229c      	movs	r2, #156	; 0x9c
 80050be:	0192      	lsls	r2, r2, #6
 80050c0:	4694      	mov	ip, r2
 80050c2:	4463      	add	r3, ip
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7ff fdb7 	bl	8004c38 <WIZCHIP_READ>
 80050ca:	0003      	movs	r3, r0
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	197b      	adds	r3, r7, r5
 80050d0:	18a2      	adds	r2, r4, r2
 80050d2:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 80050d4:	210e      	movs	r1, #14
 80050d6:	187a      	adds	r2, r7, r1
 80050d8:	230c      	movs	r3, #12
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	8812      	ldrh	r2, [r2, #0]
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1a7      	bne.n	8005034 <getSn_RX_RSR+0x1c>
   return val;
 80050e4:	187b      	adds	r3, r7, r1
 80050e6:	881b      	ldrh	r3, [r3, #0]
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bdb0      	pop	{r4, r5, r7, pc}

080050f0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80050f0:	b5b0      	push	{r4, r5, r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6039      	str	r1, [r7, #0]
 80050f8:	0011      	movs	r1, r2
 80050fa:	1dfb      	adds	r3, r7, #7
 80050fc:	1c02      	adds	r2, r0, #0
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	1c0a      	adds	r2, r1, #0
 8005104:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8005106:	250e      	movs	r5, #14
 8005108:	197b      	adds	r3, r7, r5
 800510a:	2200      	movs	r2, #0
 800510c:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d05e      	beq.n	80051d8 <wiz_send_data+0xe8>
   ptr = getSn_TX_WR(sn);
 800511a:	1dfb      	adds	r3, r7, #7
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	3301      	adds	r3, #1
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	2290      	movs	r2, #144	; 0x90
 8005126:	0192      	lsls	r2, r2, #6
 8005128:	4694      	mov	ip, r2
 800512a:	4463      	add	r3, ip
 800512c:	0018      	movs	r0, r3
 800512e:	f7ff fd83 	bl	8004c38 <WIZCHIP_READ>
 8005132:	0003      	movs	r3, r0
 8005134:	b29b      	uxth	r3, r3
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	b29c      	uxth	r4, r3
 800513a:	1dfb      	adds	r3, r7, #7
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3301      	adds	r3, #1
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	2294      	movs	r2, #148	; 0x94
 8005146:	0192      	lsls	r2, r2, #6
 8005148:	4694      	mov	ip, r2
 800514a:	4463      	add	r3, ip
 800514c:	0018      	movs	r0, r3
 800514e:	f7ff fd73 	bl	8004c38 <WIZCHIP_READ>
 8005152:	0003      	movs	r3, r0
 8005154:	b29a      	uxth	r2, r3
 8005156:	197b      	adds	r3, r7, r5
 8005158:	18a2      	adds	r2, r4, r2
 800515a:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800515c:	002c      	movs	r4, r5
 800515e:	197b      	adds	r3, r7, r5
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	1dfa      	adds	r2, r7, #7
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	0092      	lsls	r2, r2, #2
 800516a:	3202      	adds	r2, #2
 800516c:	00d2      	lsls	r2, r2, #3
 800516e:	189b      	adds	r3, r3, r2
 8005170:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005172:	1d3b      	adds	r3, r7, #4
 8005174:	881a      	ldrh	r2, [r3, #0]
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	0018      	movs	r0, r3
 800517c:	f7ff fe72 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005180:	193b      	adds	r3, r7, r4
 8005182:	1939      	adds	r1, r7, r4
 8005184:	1d3a      	adds	r2, r7, #4
 8005186:	8809      	ldrh	r1, [r1, #0]
 8005188:	8812      	ldrh	r2, [r2, #0]
 800518a:	188a      	adds	r2, r1, r2
 800518c:	801a      	strh	r2, [r3, #0]
   setSn_TX_WR(sn,ptr);
 800518e:	1dfb      	adds	r3, r7, #7
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	3301      	adds	r3, #1
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	2290      	movs	r2, #144	; 0x90
 800519a:	0192      	lsls	r2, r2, #6
 800519c:	4694      	mov	ip, r2
 800519e:	4463      	add	r3, ip
 80051a0:	001a      	movs	r2, r3
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	0019      	movs	r1, r3
 80051ae:	0010      	movs	r0, r2
 80051b0:	f7ff fd94 	bl	8004cdc <WIZCHIP_WRITE>
 80051b4:	1dfb      	adds	r3, r7, #7
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	3301      	adds	r3, #1
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	2294      	movs	r2, #148	; 0x94
 80051c0:	0192      	lsls	r2, r2, #6
 80051c2:	4694      	mov	ip, r2
 80051c4:	4463      	add	r3, ip
 80051c6:	001a      	movs	r2, r3
 80051c8:	193b      	adds	r3, r7, r4
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	0019      	movs	r1, r3
 80051d0:	0010      	movs	r0, r2
 80051d2:	f7ff fd83 	bl	8004cdc <WIZCHIP_WRITE>
 80051d6:	e000      	b.n	80051da <wiz_send_data+0xea>
   if(len == 0)  return;
 80051d8:	46c0      	nop			; (mov r8, r8)
}
 80051da:	46bd      	mov	sp, r7
 80051dc:	b004      	add	sp, #16
 80051de:	bdb0      	pop	{r4, r5, r7, pc}

080051e0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80051e0:	b5b0      	push	{r4, r5, r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6039      	str	r1, [r7, #0]
 80051e8:	0011      	movs	r1, r2
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	1c02      	adds	r2, r0, #0
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	1c0a      	adds	r2, r1, #0
 80051f4:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 80051f6:	250e      	movs	r5, #14
 80051f8:	197b      	adds	r3, r7, r5
 80051fa:	2200      	movs	r2, #0
 80051fc:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d05e      	beq.n	80052c8 <wiz_recv_data+0xe8>
   ptr = getSn_RX_RD(sn);
 800520a:	1dfb      	adds	r3, r7, #7
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	3301      	adds	r3, #1
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	22a0      	movs	r2, #160	; 0xa0
 8005216:	0192      	lsls	r2, r2, #6
 8005218:	4694      	mov	ip, r2
 800521a:	4463      	add	r3, ip
 800521c:	0018      	movs	r0, r3
 800521e:	f7ff fd0b 	bl	8004c38 <WIZCHIP_READ>
 8005222:	0003      	movs	r3, r0
 8005224:	b29b      	uxth	r3, r3
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	b29c      	uxth	r4, r3
 800522a:	1dfb      	adds	r3, r7, #7
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	3301      	adds	r3, #1
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	22a4      	movs	r2, #164	; 0xa4
 8005236:	0192      	lsls	r2, r2, #6
 8005238:	4694      	mov	ip, r2
 800523a:	4463      	add	r3, ip
 800523c:	0018      	movs	r0, r3
 800523e:	f7ff fcfb 	bl	8004c38 <WIZCHIP_READ>
 8005242:	0003      	movs	r3, r0
 8005244:	b29a      	uxth	r2, r3
 8005246:	197b      	adds	r3, r7, r5
 8005248:	18a2      	adds	r2, r4, r2
 800524a:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800524c:	002c      	movs	r4, r5
 800524e:	197b      	adds	r3, r7, r5
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	1dfa      	adds	r2, r7, #7
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	0092      	lsls	r2, r2, #2
 800525a:	3203      	adds	r2, #3
 800525c:	00d2      	lsls	r2, r2, #3
 800525e:	189b      	adds	r3, r3, r2
 8005260:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	0018      	movs	r0, r3
 800526c:	f7ff fd8c 	bl	8004d88 <WIZCHIP_READ_BUF>
   ptr += len;
 8005270:	193b      	adds	r3, r7, r4
 8005272:	1939      	adds	r1, r7, r4
 8005274:	1d3a      	adds	r2, r7, #4
 8005276:	8809      	ldrh	r1, [r1, #0]
 8005278:	8812      	ldrh	r2, [r2, #0]
 800527a:	188a      	adds	r2, r1, r2
 800527c:	801a      	strh	r2, [r3, #0]
   
   setSn_RX_RD(sn,ptr);
 800527e:	1dfb      	adds	r3, r7, #7
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	3301      	adds	r3, #1
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	22a0      	movs	r2, #160	; 0xa0
 800528a:	0192      	lsls	r2, r2, #6
 800528c:	4694      	mov	ip, r2
 800528e:	4463      	add	r3, ip
 8005290:	001a      	movs	r2, r3
 8005292:	193b      	adds	r3, r7, r4
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	b29b      	uxth	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f7ff fd1c 	bl	8004cdc <WIZCHIP_WRITE>
 80052a4:	1dfb      	adds	r3, r7, #7
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	3301      	adds	r3, #1
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	22a4      	movs	r2, #164	; 0xa4
 80052b0:	0192      	lsls	r2, r2, #6
 80052b2:	4694      	mov	ip, r2
 80052b4:	4463      	add	r3, ip
 80052b6:	001a      	movs	r2, r3
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	0019      	movs	r1, r3
 80052c0:	0010      	movs	r0, r2
 80052c2:	f7ff fd0b 	bl	8004cdc <WIZCHIP_WRITE>
 80052c6:	e000      	b.n	80052ca <wiz_recv_data+0xea>
   if(len == 0) return;
 80052c8:	46c0      	nop			; (mov r8, r8)
}
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b004      	add	sp, #16
 80052ce:	bdb0      	pop	{r4, r5, r7, pc}

080052d0 <socket>:
    }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80052d0:	b5b0      	push	{r4, r5, r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	0005      	movs	r5, r0
 80052d8:	000c      	movs	r4, r1
 80052da:	0010      	movs	r0, r2
 80052dc:	0019      	movs	r1, r3
 80052de:	1dfb      	adds	r3, r7, #7
 80052e0:	1c2a      	adds	r2, r5, #0
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	1dbb      	adds	r3, r7, #6
 80052e6:	1c22      	adds	r2, r4, #0
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	1c02      	adds	r2, r0, #0
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	1cfb      	adds	r3, r7, #3
 80052f2:	1c0a      	adds	r2, r1, #0
 80052f4:	701a      	strb	r2, [r3, #0]
  CHECK_SOCKNUM();
 80052f6:	1dfb      	adds	r3, r7, #7
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d902      	bls.n	8005304 <socket+0x34>
 80052fe:	2301      	movs	r3, #1
 8005300:	425b      	negs	r3, r3
 8005302:	e10d      	b.n	8005520 <socket+0x250>
  switch(protocol)
 8005304:	1dbb      	adds	r3, r7, #6
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d005      	beq.n	8005318 <socket+0x48>
 800530c:	2b00      	cmp	r3, #0
 800530e:	dd11      	ble.n	8005334 <socket+0x64>
 8005310:	3b02      	subs	r3, #2
 8005312:	2b02      	cmp	r3, #2
 8005314:	d80e      	bhi.n	8005334 <socket+0x64>
      break;
    }
    case Sn_MR_UDP :
    case Sn_MR_MACRAW :
    case Sn_MR_IPRAW :
      break;
 8005316:	e011      	b.n	800533c <socket+0x6c>
      getSIPR((uint8_t*)&taddr);
 8005318:	230c      	movs	r3, #12
 800531a:	18f9      	adds	r1, r7, r3
 800531c:	23f0      	movs	r3, #240	; 0xf0
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	2204      	movs	r2, #4
 8005322:	0018      	movs	r0, r3
 8005324:	f7ff fd30 	bl	8004d88 <WIZCHIP_READ_BUF>
      if(taddr == 0) return SOCKERR_SOCKINIT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <socket+0x6a>
 800532e:	2303      	movs	r3, #3
 8005330:	425b      	negs	r3, r3
 8005332:	e0f5      	b.n	8005520 <socket+0x250>
#if ( _WIZCHIP_ < 5200 )
    case Sn_MR_PPPoE :
      break;
#endif
    default :
      return SOCKERR_SOCKMODE;
 8005334:	2305      	movs	r3, #5
 8005336:	425b      	negs	r3, r3
 8005338:	e0f2      	b.n	8005520 <socket+0x250>
      break;
 800533a:	46c0      	nop			; (mov r8, r8)
  }
  //M20150601 : For SF_TCP_ALIGN & W5300
  //if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
  if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800533c:	1cfb      	adds	r3, r7, #3
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2204      	movs	r2, #4
 8005342:	4013      	ands	r3, r2
 8005344:	d002      	beq.n	800534c <socket+0x7c>
 8005346:	2306      	movs	r3, #6
 8005348:	425b      	negs	r3, r3
 800534a:	e0e9      	b.n	8005520 <socket+0x250>
#if _WIZCHIP_ == 5200
  if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

  if(flag != 0)
 800534c:	1cfb      	adds	r3, r7, #3
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d028      	beq.n	80053a6 <socket+0xd6>
  {
    switch(protocol)
 8005354:	1dbb      	adds	r3, r7, #6
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d002      	beq.n	8005362 <socket+0x92>
 800535c:	2b02      	cmp	r3, #2
 800535e:	d008      	beq.n	8005372 <socket+0xa2>
          if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
        }
#endif
        break;
      default:
        break;
 8005360:	e026      	b.n	80053b0 <socket+0xe0>
        if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8005362:	1cfb      	adds	r3, r7, #3
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2221      	movs	r2, #33	; 0x21
 8005368:	4013      	ands	r3, r2
 800536a:	d11e      	bne.n	80053aa <socket+0xda>
 800536c:	2306      	movs	r3, #6
 800536e:	425b      	negs	r3, r3
 8005370:	e0d6      	b.n	8005520 <socket+0x250>
        if(flag & SF_IGMP_VER2)
 8005372:	1cfb      	adds	r3, r7, #3
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2220      	movs	r2, #32
 8005378:	4013      	ands	r3, r2
 800537a:	d007      	beq.n	800538c <socket+0xbc>
          if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800537c:	1cfb      	adds	r3, r7, #3
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	b25b      	sxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	db02      	blt.n	800538c <socket+0xbc>
 8005386:	2306      	movs	r3, #6
 8005388:	425b      	negs	r3, r3
 800538a:	e0c9      	b.n	8005520 <socket+0x250>
        if(flag & SF_UNI_BLOCK)
 800538c:	1cfb      	adds	r3, r7, #3
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2210      	movs	r2, #16
 8005392:	4013      	ands	r3, r2
 8005394:	d00b      	beq.n	80053ae <socket+0xde>
          if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005396:	1cfb      	adds	r3, r7, #3
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b25b      	sxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	db06      	blt.n	80053ae <socket+0xde>
 80053a0:	2306      	movs	r3, #6
 80053a2:	425b      	negs	r3, r3
 80053a4:	e0bc      	b.n	8005520 <socket+0x250>
    }
  }
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	e002      	b.n	80053b0 <socket+0xe0>
        break;
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	e000      	b.n	80053b0 <socket+0xe0>
        break;
 80053ae:	46c0      	nop			; (mov r8, r8)
  close(sn);
 80053b0:	1dfb      	adds	r3, r7, #7
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 f8c5 	bl	8005544 <close>
  //M20150601
#if _WIZCHIP_ == 5300
  setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
  setSn_MR(sn, (protocol | (flag & 0xF0)));
 80053ba:	1dfb      	adds	r3, r7, #7
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	3301      	adds	r3, #1
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	0018      	movs	r0, r3
 80053c6:	1cfb      	adds	r3, r7, #3
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b25b      	sxtb	r3, r3
 80053cc:	220f      	movs	r2, #15
 80053ce:	4393      	bics	r3, r2
 80053d0:	b25a      	sxtb	r2, r3
 80053d2:	1dbb      	adds	r3, r7, #6
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b25b      	sxtb	r3, r3
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	0019      	movs	r1, r3
 80053e0:	f7ff fc7c 	bl	8004cdc <WIZCHIP_WRITE>
#endif
  if(!port)
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10f      	bne.n	800540c <socket+0x13c>
  {
    port = sock_any_port++;
 80053ec:	4b4e      	ldr	r3, [pc, #312]	; (8005528 <socket+0x258>)
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	b291      	uxth	r1, r2
 80053f4:	4a4c      	ldr	r2, [pc, #304]	; (8005528 <socket+0x258>)
 80053f6:	8011      	strh	r1, [r2, #0]
 80053f8:	1d3a      	adds	r2, r7, #4
 80053fa:	8013      	strh	r3, [r2, #0]
    if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80053fc:	4b4a      	ldr	r3, [pc, #296]	; (8005528 <socket+0x258>)
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	4a4a      	ldr	r2, [pc, #296]	; (800552c <socket+0x25c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d102      	bne.n	800540c <socket+0x13c>
 8005406:	4b48      	ldr	r3, [pc, #288]	; (8005528 <socket+0x258>)
 8005408:	4a49      	ldr	r2, [pc, #292]	; (8005530 <socket+0x260>)
 800540a:	801a      	strh	r2, [r3, #0]
  }
  setSn_PORT(sn,port);
 800540c:	1dfb      	adds	r3, r7, #7
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	3301      	adds	r3, #1
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	4694      	mov	ip, r2
 800541c:	4463      	add	r3, ip
 800541e:	001a      	movs	r2, r3
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	b29b      	uxth	r3, r3
 8005428:	b2db      	uxtb	r3, r3
 800542a:	0019      	movs	r1, r3
 800542c:	0010      	movs	r0, r2
 800542e:	f7ff fc55 	bl	8004cdc <WIZCHIP_WRITE>
 8005432:	1dfb      	adds	r3, r7, #7
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	3301      	adds	r3, #1
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	22a0      	movs	r2, #160	; 0xa0
 800543e:	00d2      	lsls	r2, r2, #3
 8005440:	4694      	mov	ip, r2
 8005442:	4463      	add	r3, ip
 8005444:	001a      	movs	r2, r3
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	0019      	movs	r1, r3
 800544e:	0010      	movs	r0, r2
 8005450:	f7ff fc44 	bl	8004cdc <WIZCHIP_WRITE>
  setSn_CR(sn,Sn_CR_OPEN);
 8005454:	1dfb      	adds	r3, r7, #7
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	3301      	adds	r3, #1
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	3301      	adds	r3, #1
 8005460:	33ff      	adds	r3, #255	; 0xff
 8005462:	2101      	movs	r1, #1
 8005464:	0018      	movs	r0, r3
 8005466:	f7ff fc39 	bl	8004cdc <WIZCHIP_WRITE>
  while(getSn_CR(sn));
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	1dfb      	adds	r3, r7, #7
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	3301      	adds	r3, #1
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	33ff      	adds	r3, #255	; 0xff
 800547a:	0018      	movs	r0, r3
 800547c:	f7ff fbdc 	bl	8004c38 <WIZCHIP_READ>
 8005480:	1e03      	subs	r3, r0, #0
 8005482:	d1f3      	bne.n	800546c <socket+0x19c>
  //A20150401 : For release the previous sock_io_mode
  sock_io_mode &= ~(1 <<sn);
 8005484:	1dfb      	adds	r3, r7, #7
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2201      	movs	r2, #1
 800548a:	409a      	lsls	r2, r3
 800548c:	0013      	movs	r3, r2
 800548e:	b21b      	sxth	r3, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	b21b      	sxth	r3, r3
 8005494:	4a27      	ldr	r2, [pc, #156]	; (8005534 <socket+0x264>)
 8005496:	8812      	ldrh	r2, [r2, #0]
 8005498:	b212      	sxth	r2, r2
 800549a:	4013      	ands	r3, r2
 800549c:	b21b      	sxth	r3, r3
 800549e:	b29a      	uxth	r2, r3
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <socket+0x264>)
 80054a2:	801a      	strh	r2, [r3, #0]
  //
  sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 80054a4:	1cfb      	adds	r3, r7, #3
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	401a      	ands	r2, r3
 80054ac:	1dfb      	adds	r3, r7, #7
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	409a      	lsls	r2, r3
 80054b2:	0013      	movs	r3, r2
 80054b4:	b21a      	sxth	r2, r3
 80054b6:	4b1f      	ldr	r3, [pc, #124]	; (8005534 <socket+0x264>)
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b21b      	sxth	r3, r3
 80054bc:	4313      	orrs	r3, r2
 80054be:	b21b      	sxth	r3, r3
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <socket+0x264>)
 80054c4:	801a      	strh	r2, [r3, #0]
  sock_is_sending &= ~(1<<sn);
 80054c6:	1dfb      	adds	r3, r7, #7
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	409a      	lsls	r2, r3
 80054ce:	0013      	movs	r3, r2
 80054d0:	b21b      	sxth	r3, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	b21b      	sxth	r3, r3
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <socket+0x268>)
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	b212      	sxth	r2, r2
 80054dc:	4013      	ands	r3, r2
 80054de:	b21b      	sxth	r3, r3
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <socket+0x268>)
 80054e4:	801a      	strh	r2, [r3, #0]
  sock_remained_size[sn] = 0;
 80054e6:	1dfb      	adds	r3, r7, #7
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	4b14      	ldr	r3, [pc, #80]	; (800553c <socket+0x26c>)
 80054ec:	0052      	lsls	r2, r2, #1
 80054ee:	2100      	movs	r1, #0
 80054f0:	52d1      	strh	r1, [r2, r3]
  //M20150601 : repalce 0 with PACK_COMPLETED
  //sock_pack_info[sn] = 0;
  sock_pack_info[sn] = PACK_COMPLETED;
 80054f2:	1dfb      	adds	r3, r7, #7
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	4a12      	ldr	r2, [pc, #72]	; (8005540 <socket+0x270>)
 80054f8:	2100      	movs	r1, #0
 80054fa:	54d1      	strb	r1, [r2, r3]
  //
  while(getSn_SR(sn) == SOCK_CLOSED);
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	1dfb      	adds	r3, r7, #7
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	3301      	adds	r3, #1
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	22c0      	movs	r2, #192	; 0xc0
 800550a:	0092      	lsls	r2, r2, #2
 800550c:	4694      	mov	ip, r2
 800550e:	4463      	add	r3, ip
 8005510:	0018      	movs	r0, r3
 8005512:	f7ff fb91 	bl	8004c38 <WIZCHIP_READ>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d0f1      	beq.n	80054fe <socket+0x22e>
  return (int8_t)sn;
 800551a:	1dfb      	adds	r3, r7, #7
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	b25b      	sxtb	r3, r3
}	   
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b004      	add	sp, #16
 8005526:	bdb0      	pop	{r4, r5, r7, pc}
 8005528:	2000000e 	.word	0x2000000e
 800552c:	0000fff0 	.word	0x0000fff0
 8005530:	ffffc000 	.word	0xffffc000
 8005534:	20000240 	.word	0x20000240
 8005538:	20000242 	.word	0x20000242
 800553c:	20000244 	.word	0x20000244
 8005540:	20000254 	.word	0x20000254

08005544 <close>:

int8_t close(uint8_t sn)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	0002      	movs	r2, r0
 800554c:	1dfb      	adds	r3, r7, #7
 800554e:	701a      	strb	r2, [r3, #0]
  CHECK_SOCKNUM();
 8005550:	1dfb      	adds	r3, r7, #7
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d902      	bls.n	800555e <close+0x1a>
 8005558:	2301      	movs	r3, #1
 800555a:	425b      	negs	r3, r3
 800555c:	e05f      	b.n	800561e <close+0xda>
    while(getSn_CR(sn) != 0);
    while(getSn_SR(sn) != SOCK_UDP);
    sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
  };
#endif 
  setSn_CR(sn,Sn_CR_CLOSE);
 800555e:	1dfb      	adds	r3, r7, #7
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	3301      	adds	r3, #1
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	3301      	adds	r3, #1
 800556a:	33ff      	adds	r3, #255	; 0xff
 800556c:	2110      	movs	r1, #16
 800556e:	0018      	movs	r0, r3
 8005570:	f7ff fbb4 	bl	8004cdc <WIZCHIP_WRITE>
  /* wait to process the command... */
  while( getSn_CR(sn) );
 8005574:	46c0      	nop			; (mov r8, r8)
 8005576:	1dfb      	adds	r3, r7, #7
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	3301      	adds	r3, #1
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	3301      	adds	r3, #1
 8005582:	33ff      	adds	r3, #255	; 0xff
 8005584:	0018      	movs	r0, r3
 8005586:	f7ff fb57 	bl	8004c38 <WIZCHIP_READ>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d1f3      	bne.n	8005576 <close+0x32>
  /* clear all interrupt of the socket. */
  setSn_IR(sn, 0xFF);
 800558e:	1dfb      	adds	r3, r7, #7
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	3301      	adds	r3, #1
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	2280      	movs	r2, #128	; 0x80
 800559a:	0092      	lsls	r2, r2, #2
 800559c:	4694      	mov	ip, r2
 800559e:	4463      	add	r3, ip
 80055a0:	211f      	movs	r1, #31
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7ff fb9a 	bl	8004cdc <WIZCHIP_WRITE>
  //A20150401 : Release the sock_io_mode of socket n.
  sock_io_mode &= ~(1<<sn);
 80055a8:	1dfb      	adds	r3, r7, #7
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2201      	movs	r2, #1
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	b21b      	sxth	r3, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	b21b      	sxth	r3, r3
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <close+0xe4>)
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	b212      	sxth	r2, r2
 80055be:	4013      	ands	r3, r2
 80055c0:	b21b      	sxth	r3, r3
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	4b18      	ldr	r3, [pc, #96]	; (8005628 <close+0xe4>)
 80055c6:	801a      	strh	r2, [r3, #0]
  //
  sock_is_sending &= ~(1<<sn);
 80055c8:	1dfb      	adds	r3, r7, #7
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2201      	movs	r2, #1
 80055ce:	409a      	lsls	r2, r3
 80055d0:	0013      	movs	r3, r2
 80055d2:	b21b      	sxth	r3, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	b21b      	sxth	r3, r3
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <close+0xe8>)
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	b212      	sxth	r2, r2
 80055de:	4013      	ands	r3, r2
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <close+0xe8>)
 80055e6:	801a      	strh	r2, [r3, #0]
  sock_remained_size[sn] = 0;
 80055e8:	1dfb      	adds	r3, r7, #7
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <close+0xec>)
 80055ee:	0052      	lsls	r2, r2, #1
 80055f0:	2100      	movs	r1, #0
 80055f2:	52d1      	strh	r1, [r2, r3]
  sock_pack_info[sn] = 0;
 80055f4:	1dfb      	adds	r3, r7, #7
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	4a0e      	ldr	r2, [pc, #56]	; (8005634 <close+0xf0>)
 80055fa:	2100      	movs	r1, #0
 80055fc:	54d1      	strb	r1, [r2, r3]
  while(getSn_SR(sn) != SOCK_CLOSED);
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	1dfb      	adds	r3, r7, #7
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	3301      	adds	r3, #1
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	22c0      	movs	r2, #192	; 0xc0
 800560c:	0092      	lsls	r2, r2, #2
 800560e:	4694      	mov	ip, r2
 8005610:	4463      	add	r3, ip
 8005612:	0018      	movs	r0, r3
 8005614:	f7ff fb10 	bl	8004c38 <WIZCHIP_READ>
 8005618:	1e03      	subs	r3, r0, #0
 800561a:	d1f1      	bne.n	8005600 <close+0xbc>
  return SOCK_OK;
 800561c:	2301      	movs	r3, #1
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b002      	add	sp, #8
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	20000240 	.word	0x20000240
 800562c:	20000242 	.word	0x20000242
 8005630:	20000244 	.word	0x20000244
 8005634:	20000254 	.word	0x20000254

08005638 <connect>:
  return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6039      	str	r1, [r7, #0]
 8005640:	0011      	movs	r1, r2
 8005642:	1dfb      	adds	r3, r7, #7
 8005644:	1c02      	adds	r2, r0, #0
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	1d3b      	adds	r3, r7, #4
 800564a:	1c0a      	adds	r2, r1, #0
 800564c:	801a      	strh	r2, [r3, #0]
  CHECK_SOCKNUM();
 800564e:	1dfb      	adds	r3, r7, #7
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b08      	cmp	r3, #8
 8005654:	d902      	bls.n	800565c <connect+0x24>
 8005656:	2301      	movs	r3, #1
 8005658:	425b      	negs	r3, r3
 800565a:	e0e3      	b.n	8005824 <connect+0x1ec>
  CHECK_SOCKMODE(Sn_MR_TCP);
 800565c:	1dfb      	adds	r3, r7, #7
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	3301      	adds	r3, #1
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff fae6 	bl	8004c38 <WIZCHIP_READ>
 800566c:	0003      	movs	r3, r0
 800566e:	001a      	movs	r2, r3
 8005670:	230f      	movs	r3, #15
 8005672:	4013      	ands	r3, r2
 8005674:	2b01      	cmp	r3, #1
 8005676:	d002      	beq.n	800567e <connect+0x46>
 8005678:	2305      	movs	r3, #5
 800567a:	425b      	negs	r3, r3
 800567c:	e0d2      	b.n	8005824 <connect+0x1ec>
  CHECK_SOCKINIT();
 800567e:	1dfb      	adds	r3, r7, #7
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	3301      	adds	r3, #1
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	22c0      	movs	r2, #192	; 0xc0
 800568a:	0092      	lsls	r2, r2, #2
 800568c:	4694      	mov	ip, r2
 800568e:	4463      	add	r3, ip
 8005690:	0018      	movs	r0, r3
 8005692:	f7ff fad1 	bl	8004c38 <WIZCHIP_READ>
 8005696:	0003      	movs	r3, r0
 8005698:	2b13      	cmp	r3, #19
 800569a:	d002      	beq.n	80056a2 <connect+0x6a>
 800569c:	2303      	movs	r3, #3
 800569e:	425b      	negs	r3, r3
 80056a0:	e0c0      	b.n	8005824 <connect+0x1ec>
  //M20140501 : For avoiding fatal error on memory align mismatched
  //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;

  {
    uint32_t taddr;
    taddr = ((uint32_t)addr[0] & 0x000000FF);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
    taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	3201      	adds	r2, #1
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
    taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	021b      	lsls	r3, r3, #8
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	3202      	adds	r2, #2
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
    taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	3203      	adds	r2, #3
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
    if(taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	d002      	beq.n	80056de <connect+0xa6>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <connect+0xac>
 80056de:	230c      	movs	r3, #12
 80056e0:	425b      	negs	r3, r3
 80056e2:	e09f      	b.n	8005824 <connect+0x1ec>
  }
  //

  if(port == 0) return SOCKERR_PORTZERO;
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <connect+0xba>
 80056ec:	230b      	movs	r3, #11
 80056ee:	425b      	negs	r3, r3
 80056f0:	e098      	b.n	8005824 <connect+0x1ec>
  setSn_DIPR(sn,addr);
 80056f2:	1dfb      	adds	r3, r7, #7
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	3301      	adds	r3, #1
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	22c0      	movs	r2, #192	; 0xc0
 80056fe:	0112      	lsls	r2, r2, #4
 8005700:	4694      	mov	ip, r2
 8005702:	4463      	add	r3, ip
 8005704:	0018      	movs	r0, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2204      	movs	r2, #4
 800570a:	0019      	movs	r1, r3
 800570c:	f7ff fbaa 	bl	8004e64 <WIZCHIP_WRITE_BUF>
  setSn_DPORT(sn,port);
 8005710:	1dfb      	adds	r3, r7, #7
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	3301      	adds	r3, #1
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	2280      	movs	r2, #128	; 0x80
 800571c:	0152      	lsls	r2, r2, #5
 800571e:	4694      	mov	ip, r2
 8005720:	4463      	add	r3, ip
 8005722:	001a      	movs	r2, r3
 8005724:	1d3b      	adds	r3, r7, #4
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	b29b      	uxth	r3, r3
 800572c:	b2db      	uxtb	r3, r3
 800572e:	0019      	movs	r1, r3
 8005730:	0010      	movs	r0, r2
 8005732:	f7ff fad3 	bl	8004cdc <WIZCHIP_WRITE>
 8005736:	1dfb      	adds	r3, r7, #7
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	3301      	adds	r3, #1
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	2288      	movs	r2, #136	; 0x88
 8005742:	0152      	lsls	r2, r2, #5
 8005744:	4694      	mov	ip, r2
 8005746:	4463      	add	r3, ip
 8005748:	001a      	movs	r2, r3
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	0019      	movs	r1, r3
 8005752:	0010      	movs	r0, r2
 8005754:	f7ff fac2 	bl	8004cdc <WIZCHIP_WRITE>
  setSn_CR(sn,Sn_CR_CONNECT);
 8005758:	1dfb      	adds	r3, r7, #7
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	3301      	adds	r3, #1
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	3301      	adds	r3, #1
 8005764:	33ff      	adds	r3, #255	; 0xff
 8005766:	2104      	movs	r1, #4
 8005768:	0018      	movs	r0, r3
 800576a:	f7ff fab7 	bl	8004cdc <WIZCHIP_WRITE>
  while(getSn_CR(sn));
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	1dfb      	adds	r3, r7, #7
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	3301      	adds	r3, #1
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	3301      	adds	r3, #1
 800577c:	33ff      	adds	r3, #255	; 0xff
 800577e:	0018      	movs	r0, r3
 8005780:	f7ff fa5a 	bl	8004c38 <WIZCHIP_READ>
 8005784:	1e03      	subs	r3, r0, #0
 8005786:	d1f3      	bne.n	8005770 <connect+0x138>
  if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005788:	4b28      	ldr	r3, [pc, #160]	; (800582c <connect+0x1f4>)
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	001a      	movs	r2, r3
 800578e:	1dfb      	adds	r3, r7, #7
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	411a      	asrs	r2, r3
 8005794:	0013      	movs	r3, r2
 8005796:	2201      	movs	r2, #1
 8005798:	4013      	ands	r3, r2
 800579a:	d033      	beq.n	8005804 <connect+0x1cc>
 800579c:	2300      	movs	r3, #0
 800579e:	e041      	b.n	8005824 <connect+0x1ec>
  while(getSn_SR(sn) != SOCK_ESTABLISHED)
  {
    if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80057a0:	1dfb      	adds	r3, r7, #7
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	3301      	adds	r3, #1
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	2280      	movs	r2, #128	; 0x80
 80057ac:	0092      	lsls	r2, r2, #2
 80057ae:	4694      	mov	ip, r2
 80057b0:	4463      	add	r3, ip
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7ff fa40 	bl	8004c38 <WIZCHIP_READ>
 80057b8:	0003      	movs	r3, r0
 80057ba:	001a      	movs	r2, r3
 80057bc:	2308      	movs	r3, #8
 80057be:	4013      	ands	r3, r2
 80057c0:	d00f      	beq.n	80057e2 <connect+0x1aa>
    {
      setSn_IR(sn, Sn_IR_TIMEOUT);
 80057c2:	1dfb      	adds	r3, r7, #7
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	3301      	adds	r3, #1
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	4694      	mov	ip, r2
 80057d2:	4463      	add	r3, ip
 80057d4:	2108      	movs	r1, #8
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7ff fa80 	bl	8004cdc <WIZCHIP_WRITE>
      return SOCKERR_TIMEOUT;
 80057dc:	230d      	movs	r3, #13
 80057de:	425b      	negs	r3, r3
 80057e0:	e020      	b.n	8005824 <connect+0x1ec>
    }

    if (getSn_SR(sn) == SOCK_CLOSED)
 80057e2:	1dfb      	adds	r3, r7, #7
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	3301      	adds	r3, #1
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	22c0      	movs	r2, #192	; 0xc0
 80057ee:	0092      	lsls	r2, r2, #2
 80057f0:	4694      	mov	ip, r2
 80057f2:	4463      	add	r3, ip
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7ff fa1f 	bl	8004c38 <WIZCHIP_READ>
 80057fa:	1e03      	subs	r3, r0, #0
 80057fc:	d102      	bne.n	8005804 <connect+0x1cc>
    {
      return SOCKERR_SOCKCLOSED;
 80057fe:	2304      	movs	r3, #4
 8005800:	425b      	negs	r3, r3
 8005802:	e00f      	b.n	8005824 <connect+0x1ec>
  while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	3301      	adds	r3, #1
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	22c0      	movs	r2, #192	; 0xc0
 8005810:	0092      	lsls	r2, r2, #2
 8005812:	4694      	mov	ip, r2
 8005814:	4463      	add	r3, ip
 8005816:	0018      	movs	r0, r3
 8005818:	f7ff fa0e 	bl	8004c38 <WIZCHIP_READ>
 800581c:	0003      	movs	r3, r0
 800581e:	2b17      	cmp	r3, #23
 8005820:	d1be      	bne.n	80057a0 <connect+0x168>
    }
  }

  return SOCK_OK;
 8005822:	2301      	movs	r3, #1
}
 8005824:	0018      	movs	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	b004      	add	sp, #16
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20000240 	.word	0x20000240

08005830 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	0002      	movs	r2, r0
 8005838:	1dfb      	adds	r3, r7, #7
 800583a:	701a      	strb	r2, [r3, #0]
  CHECK_SOCKNUM();
 800583c:	1dfb      	adds	r3, r7, #7
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d902      	bls.n	800584a <disconnect+0x1a>
 8005844:	2301      	movs	r3, #1
 8005846:	425b      	negs	r3, r3
 8005848:	e06c      	b.n	8005924 <disconnect+0xf4>
  CHECK_SOCKMODE(Sn_MR_TCP);
 800584a:	1dfb      	adds	r3, r7, #7
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	3301      	adds	r3, #1
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	0018      	movs	r0, r3
 8005856:	f7ff f9ef 	bl	8004c38 <WIZCHIP_READ>
 800585a:	0003      	movs	r3, r0
 800585c:	001a      	movs	r2, r3
 800585e:	230f      	movs	r3, #15
 8005860:	4013      	ands	r3, r2
 8005862:	2b01      	cmp	r3, #1
 8005864:	d002      	beq.n	800586c <disconnect+0x3c>
 8005866:	2305      	movs	r3, #5
 8005868:	425b      	negs	r3, r3
 800586a:	e05b      	b.n	8005924 <disconnect+0xf4>
  setSn_CR(sn,Sn_CR_DISCON);
 800586c:	1dfb      	adds	r3, r7, #7
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	3301      	adds	r3, #1
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	3301      	adds	r3, #1
 8005878:	33ff      	adds	r3, #255	; 0xff
 800587a:	2108      	movs	r1, #8
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff fa2d 	bl	8004cdc <WIZCHIP_WRITE>
  /* wait to process the command... */
  while(getSn_CR(sn));
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	1dfb      	adds	r3, r7, #7
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	3301      	adds	r3, #1
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	3301      	adds	r3, #1
 8005890:	33ff      	adds	r3, #255	; 0xff
 8005892:	0018      	movs	r0, r3
 8005894:	f7ff f9d0 	bl	8004c38 <WIZCHIP_READ>
 8005898:	1e03      	subs	r3, r0, #0
 800589a:	d1f3      	bne.n	8005884 <disconnect+0x54>
  sock_is_sending &= ~(1<<sn);
 800589c:	1dfb      	adds	r3, r7, #7
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	409a      	lsls	r2, r3
 80058a4:	0013      	movs	r3, r2
 80058a6:	b21b      	sxth	r3, r3
 80058a8:	43db      	mvns	r3, r3
 80058aa:	b21b      	sxth	r3, r3
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <disconnect+0xfc>)
 80058ae:	8812      	ldrh	r2, [r2, #0]
 80058b0:	b212      	sxth	r2, r2
 80058b2:	4013      	ands	r3, r2
 80058b4:	b21b      	sxth	r3, r3
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	4b1c      	ldr	r3, [pc, #112]	; (800592c <disconnect+0xfc>)
 80058ba:	801a      	strh	r2, [r3, #0]
  if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80058bc:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <disconnect+0x100>)
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	001a      	movs	r2, r3
 80058c2:	1dfb      	adds	r3, r7, #7
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	411a      	asrs	r2, r3
 80058c8:	0013      	movs	r3, r2
 80058ca:	2201      	movs	r2, #1
 80058cc:	4013      	ands	r3, r2
 80058ce:	d01a      	beq.n	8005906 <disconnect+0xd6>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e027      	b.n	8005924 <disconnect+0xf4>
  while(getSn_SR(sn) != SOCK_CLOSED)
  {
    if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80058d4:	1dfb      	adds	r3, r7, #7
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	3301      	adds	r3, #1
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	0092      	lsls	r2, r2, #2
 80058e2:	4694      	mov	ip, r2
 80058e4:	4463      	add	r3, ip
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7ff f9a6 	bl	8004c38 <WIZCHIP_READ>
 80058ec:	0003      	movs	r3, r0
 80058ee:	001a      	movs	r2, r3
 80058f0:	2308      	movs	r3, #8
 80058f2:	4013      	ands	r3, r2
 80058f4:	d007      	beq.n	8005906 <disconnect+0xd6>
    {
      close(sn);
 80058f6:	1dfb      	adds	r3, r7, #7
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7ff fe22 	bl	8005544 <close>
      return SOCKERR_TIMEOUT;
 8005900:	230d      	movs	r3, #13
 8005902:	425b      	negs	r3, r3
 8005904:	e00e      	b.n	8005924 <disconnect+0xf4>
  while(getSn_SR(sn) != SOCK_CLOSED)
 8005906:	1dfb      	adds	r3, r7, #7
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	3301      	adds	r3, #1
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	22c0      	movs	r2, #192	; 0xc0
 8005912:	0092      	lsls	r2, r2, #2
 8005914:	4694      	mov	ip, r2
 8005916:	4463      	add	r3, ip
 8005918:	0018      	movs	r0, r3
 800591a:	f7ff f98d 	bl	8004c38 <WIZCHIP_READ>
 800591e:	1e03      	subs	r3, r0, #0
 8005920:	d1d8      	bne.n	80058d4 <disconnect+0xa4>
    }
  }
  return SOCK_OK;
 8005922:	2301      	movs	r3, #1
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000242 	.word	0x20000242
 8005930:	20000240 	.word	0x20000240

08005934 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005934:	b5b0      	push	{r4, r5, r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6039      	str	r1, [r7, #0]
 800593c:	0011      	movs	r1, r2
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	1c02      	adds	r2, r0, #0
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	1c0a      	adds	r2, r1, #0
 8005948:	801a      	strh	r2, [r3, #0]
  uint8_t tmp=0;
 800594a:	230f      	movs	r3, #15
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
  uint16_t freesize=0;
 8005952:	230c      	movs	r3, #12
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]

  CHECK_SOCKNUM();
 800595a:	1dfb      	adds	r3, r7, #7
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b08      	cmp	r3, #8
 8005960:	d902      	bls.n	8005968 <send+0x34>
 8005962:	2301      	movs	r3, #1
 8005964:	425b      	negs	r3, r3
 8005966:	e113      	b.n	8005b90 <send+0x25c>
  CHECK_SOCKMODE(Sn_MR_TCP);
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	3301      	adds	r3, #1
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	0018      	movs	r0, r3
 8005974:	f7ff f960 	bl	8004c38 <WIZCHIP_READ>
 8005978:	0003      	movs	r3, r0
 800597a:	001a      	movs	r2, r3
 800597c:	230f      	movs	r3, #15
 800597e:	4013      	ands	r3, r2
 8005980:	2b01      	cmp	r3, #1
 8005982:	d002      	beq.n	800598a <send+0x56>
 8005984:	2305      	movs	r3, #5
 8005986:	425b      	negs	r3, r3
 8005988:	e102      	b.n	8005b90 <send+0x25c>
  CHECK_SOCKDATA();
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <send+0x64>
 8005992:	230e      	movs	r3, #14
 8005994:	425b      	negs	r3, r3
 8005996:	e0fb      	b.n	8005b90 <send+0x25c>
  tmp = getSn_SR(sn);
 8005998:	1dfb      	adds	r3, r7, #7
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	3301      	adds	r3, #1
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	22c0      	movs	r2, #192	; 0xc0
 80059a4:	0092      	lsls	r2, r2, #2
 80059a6:	4694      	mov	ip, r2
 80059a8:	4463      	add	r3, ip
 80059aa:	250f      	movs	r5, #15
 80059ac:	197c      	adds	r4, r7, r5
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7ff f942 	bl	8004c38 <WIZCHIP_READ>
 80059b4:	0003      	movs	r3, r0
 80059b6:	7023      	strb	r3, [r4, #0]
  if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80059b8:	197b      	adds	r3, r7, r5
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b17      	cmp	r3, #23
 80059be:	d006      	beq.n	80059ce <send+0x9a>
 80059c0:	197b      	adds	r3, r7, r5
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b1c      	cmp	r3, #28
 80059c6:	d002      	beq.n	80059ce <send+0x9a>
 80059c8:	2307      	movs	r3, #7
 80059ca:	425b      	negs	r3, r3
 80059cc:	e0e0      	b.n	8005b90 <send+0x25c>
  if( sock_is_sending & (1<<sn) )
 80059ce:	4b72      	ldr	r3, [pc, #456]	; (8005b98 <send+0x264>)
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	001a      	movs	r2, r3
 80059d4:	1dfb      	adds	r3, r7, #7
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	411a      	asrs	r2, r3
 80059da:	0013      	movs	r3, r2
 80059dc:	2201      	movs	r2, #1
 80059de:	4013      	ands	r3, r2
 80059e0:	d045      	beq.n	8005a6e <send+0x13a>
  {
    tmp = getSn_IR(sn);
 80059e2:	1dfb      	adds	r3, r7, #7
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	3301      	adds	r3, #1
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	0092      	lsls	r2, r2, #2
 80059f0:	4694      	mov	ip, r2
 80059f2:	4463      	add	r3, ip
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7ff f91f 	bl	8004c38 <WIZCHIP_READ>
 80059fa:	0003      	movs	r3, r0
 80059fc:	0019      	movs	r1, r3
 80059fe:	200f      	movs	r0, #15
 8005a00:	183b      	adds	r3, r7, r0
 8005a02:	221f      	movs	r2, #31
 8005a04:	400a      	ands	r2, r1
 8005a06:	701a      	strb	r2, [r3, #0]
    if(tmp & Sn_IR_SENDOK)
 8005a08:	183b      	adds	r3, r7, r0
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d01d      	beq.n	8005a4e <send+0x11a>
    {
      setSn_IR(sn, Sn_IR_SENDOK);
 8005a12:	1dfb      	adds	r3, r7, #7
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	3301      	adds	r3, #1
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	0092      	lsls	r2, r2, #2
 8005a20:	4694      	mov	ip, r2
 8005a22:	4463      	add	r3, ip
 8005a24:	2110      	movs	r1, #16
 8005a26:	0018      	movs	r0, r3
 8005a28:	f7ff f958 	bl	8004cdc <WIZCHIP_WRITE>
        setSn_CR(sn,Sn_CR_SEND);
        while(getSn_CR(sn));
        return SOCK_BUSY;
      }
#endif
sock_is_sending &= ~(1<<sn);
 8005a2c:	1dfb      	adds	r3, r7, #7
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	409a      	lsls	r2, r3
 8005a34:	0013      	movs	r3, r2
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	4a56      	ldr	r2, [pc, #344]	; (8005b98 <send+0x264>)
 8005a3e:	8812      	ldrh	r2, [r2, #0]
 8005a40:	b212      	sxth	r2, r2
 8005a42:	4013      	ands	r3, r2
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <send+0x264>)
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e00f      	b.n	8005a6e <send+0x13a>
    }
    else if(tmp & Sn_IR_TIMEOUT)
 8005a4e:	230f      	movs	r3, #15
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2208      	movs	r2, #8
 8005a56:	4013      	ands	r3, r2
 8005a58:	d007      	beq.n	8005a6a <send+0x136>
    {
      close(sn);
 8005a5a:	1dfb      	adds	r3, r7, #7
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f7ff fd70 	bl	8005544 <close>
      return SOCKERR_TIMEOUT;
 8005a64:	230d      	movs	r3, #13
 8005a66:	425b      	negs	r3, r3
 8005a68:	e092      	b.n	8005b90 <send+0x25c>
    }
    else return SOCK_BUSY;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e090      	b.n	8005b90 <send+0x25c>
  }
  freesize = getSn_TxMAX(sn);
 8005a6e:	1dfb      	adds	r3, r7, #7
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	3301      	adds	r3, #1
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	22f8      	movs	r2, #248	; 0xf8
 8005a7a:	0152      	lsls	r2, r2, #5
 8005a7c:	4694      	mov	ip, r2
 8005a7e:	4463      	add	r3, ip
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7ff f8d9 	bl	8004c38 <WIZCHIP_READ>
 8005a86:	0003      	movs	r3, r0
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	210c      	movs	r1, #12
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	0292      	lsls	r2, r2, #10
 8005a90:	801a      	strh	r2, [r3, #0]
  if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005a92:	1d3a      	adds	r2, r7, #4
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	8812      	ldrh	r2, [r2, #0]
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d903      	bls.n	8005aa6 <send+0x172>
 8005a9e:	1d3b      	adds	r3, r7, #4
 8005aa0:	187a      	adds	r2, r7, r1
 8005aa2:	8812      	ldrh	r2, [r2, #0]
 8005aa4:	801a      	strh	r2, [r3, #0]
  while(1)
  {
    freesize = getSn_TX_FSR(sn);
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	18fc      	adds	r4, r7, r3
 8005aaa:	1dfb      	adds	r3, r7, #7
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7ff fa46 	bl	8004f40 <getSn_TX_FSR>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	8023      	strh	r3, [r4, #0]
    tmp = getSn_SR(sn);
 8005ab8:	1dfb      	adds	r3, r7, #7
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	3301      	adds	r3, #1
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	22c0      	movs	r2, #192	; 0xc0
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	4694      	mov	ip, r2
 8005ac8:	4463      	add	r3, ip
 8005aca:	250f      	movs	r5, #15
 8005acc:	197c      	adds	r4, r7, r5
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7ff f8b2 	bl	8004c38 <WIZCHIP_READ>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	7023      	strb	r3, [r4, #0]
    if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005ad8:	197b      	adds	r3, r7, r5
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b17      	cmp	r3, #23
 8005ade:	d00b      	beq.n	8005af8 <send+0x1c4>
 8005ae0:	197b      	adds	r3, r7, r5
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b1c      	cmp	r3, #28
 8005ae6:	d007      	beq.n	8005af8 <send+0x1c4>
    {
      close(sn);
 8005ae8:	1dfb      	adds	r3, r7, #7
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7ff fd29 	bl	8005544 <close>
      return SOCKERR_SOCKSTATUS;
 8005af2:	2307      	movs	r3, #7
 8005af4:	425b      	negs	r3, r3
 8005af6:	e04b      	b.n	8005b90 <send+0x25c>
    }
    if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005af8:	4b28      	ldr	r3, [pc, #160]	; (8005b9c <send+0x268>)
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	001a      	movs	r2, r3
 8005afe:	1dfb      	adds	r3, r7, #7
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	411a      	asrs	r2, r3
 8005b04:	0013      	movs	r3, r2
 8005b06:	2201      	movs	r2, #1
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d008      	beq.n	8005b1e <send+0x1ea>
 8005b0c:	1d3a      	adds	r2, r7, #4
 8005b0e:	230c      	movs	r3, #12
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d901      	bls.n	8005b1e <send+0x1ea>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e038      	b.n	8005b90 <send+0x25c>
    if(len <= freesize) break;
 8005b1e:	1d3a      	adds	r2, r7, #4
 8005b20:	230c      	movs	r3, #12
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	8812      	ldrh	r2, [r2, #0]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d900      	bls.n	8005b2e <send+0x1fa>
    freesize = getSn_TX_FSR(sn);
 8005b2c:	e7bb      	b.n	8005aa6 <send+0x172>
    if(len <= freesize) break;
 8005b2e:	46c0      	nop			; (mov r8, r8)
  }
  wiz_send_data(sn, buf, len);
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	1dfb      	adds	r3, r7, #7
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff fad8 	bl	80050f0 <wiz_send_data>

#if _WIZCHIP_ == 5300
  setSn_TX_WRSR(sn,len);
#endif

  setSn_CR(sn,Sn_CR_SEND);
 8005b40:	1dfb      	adds	r3, r7, #7
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	3301      	adds	r3, #1
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	33ff      	adds	r3, #255	; 0xff
 8005b4e:	2120      	movs	r1, #32
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7ff f8c3 	bl	8004cdc <WIZCHIP_WRITE>
  /* wait to process the command... */
  while(getSn_CR(sn));
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	1dfb      	adds	r3, r7, #7
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	3301      	adds	r3, #1
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	3301      	adds	r3, #1
 8005b64:	33ff      	adds	r3, #255	; 0xff
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff f866 	bl	8004c38 <WIZCHIP_READ>
 8005b6c:	1e03      	subs	r3, r0, #0
 8005b6e:	d1f3      	bne.n	8005b58 <send+0x224>
  sock_is_sending |= (1 << sn);
 8005b70:	1dfb      	adds	r3, r7, #7
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2201      	movs	r2, #1
 8005b76:	409a      	lsls	r2, r3
 8005b78:	0013      	movs	r3, r2
 8005b7a:	b21a      	sxth	r2, r3
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <send+0x264>)
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b21b      	sxth	r3, r3
 8005b82:	4313      	orrs	r3, r2
 8005b84:	b21b      	sxth	r3, r3
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <send+0x264>)
 8005b8a:	801a      	strh	r2, [r3, #0]
  //M20150409 : Explicit Type Casting
  //return len;
  return (int32_t)len;
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	881b      	ldrh	r3, [r3, #0]
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b004      	add	sp, #16
 8005b96:	bdb0      	pop	{r4, r5, r7, pc}
 8005b98:	20000242 	.word	0x20000242
 8005b9c:	20000240 	.word	0x20000240

08005ba0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6039      	str	r1, [r7, #0]
 8005ba8:	0011      	movs	r1, r2
 8005baa:	1dfb      	adds	r3, r7, #7
 8005bac:	1c02      	adds	r2, r0, #0
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	1c0a      	adds	r2, r1, #0
 8005bb4:	801a      	strh	r2, [r3, #0]
  uint8_t  tmp = 0;
 8005bb6:	230f      	movs	r3, #15
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
  uint16_t recvsize = 0;
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	801a      	strh	r2, [r3, #0]
#if   _WIZCHIP_ == 5300
  uint8_t head[2];
  uint16_t mr;
#endif
  //
  CHECK_SOCKNUM();
 8005bc6:	1dfb      	adds	r3, r7, #7
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d902      	bls.n	8005bd4 <recv+0x34>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	425b      	negs	r3, r3
 8005bd2:	e0c6      	b.n	8005d62 <recv+0x1c2>
  CHECK_SOCKMODE(Sn_MR_TCP);
 8005bd4:	1dfb      	adds	r3, r7, #7
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	3301      	adds	r3, #1
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	0018      	movs	r0, r3
 8005be0:	f7ff f82a 	bl	8004c38 <WIZCHIP_READ>
 8005be4:	0003      	movs	r3, r0
 8005be6:	001a      	movs	r2, r3
 8005be8:	230f      	movs	r3, #15
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d002      	beq.n	8005bf6 <recv+0x56>
 8005bf0:	2305      	movs	r3, #5
 8005bf2:	425b      	negs	r3, r3
 8005bf4:	e0b5      	b.n	8005d62 <recv+0x1c2>
  CHECK_SOCKDATA();
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <recv+0x64>
 8005bfe:	230e      	movs	r3, #14
 8005c00:	425b      	negs	r3, r3
 8005c02:	e0ae      	b.n	8005d62 <recv+0x1c2>

  recvsize = getSn_RxMAX(sn);
 8005c04:	1dfb      	adds	r3, r7, #7
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	22f0      	movs	r2, #240	; 0xf0
 8005c10:	0152      	lsls	r2, r2, #5
 8005c12:	4694      	mov	ip, r2
 8005c14:	4463      	add	r3, ip
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7ff f80e 	bl	8004c38 <WIZCHIP_READ>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	210c      	movs	r1, #12
 8005c22:	187b      	adds	r3, r7, r1
 8005c24:	0292      	lsls	r2, r2, #10
 8005c26:	801a      	strh	r2, [r3, #0]
  if(recvsize < len) len = recvsize;
 8005c28:	187a      	adds	r2, r7, r1
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	8812      	ldrh	r2, [r2, #0]
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d203      	bcs.n	8005c3c <recv+0x9c>
 8005c34:	1d3b      	adds	r3, r7, #4
 8005c36:	187a      	adds	r2, r7, r1
 8005c38:	8812      	ldrh	r2, [r2, #0]
 8005c3a:	801a      	strh	r2, [r3, #0]
  {
#endif
    //
    while(1)
    {
      recvsize = getSn_RX_RSR(sn);
 8005c3c:	260c      	movs	r6, #12
 8005c3e:	19bc      	adds	r4, r7, r6
 8005c40:	1dfb      	adds	r3, r7, #7
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff f9e7 	bl	8005018 <getSn_RX_RSR>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	8023      	strh	r3, [r4, #0]
      tmp = getSn_SR(sn);
 8005c4e:	1dfb      	adds	r3, r7, #7
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	3301      	adds	r3, #1
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	22c0      	movs	r2, #192	; 0xc0
 8005c5a:	0092      	lsls	r2, r2, #2
 8005c5c:	4694      	mov	ip, r2
 8005c5e:	4463      	add	r3, ip
 8005c60:	250f      	movs	r5, #15
 8005c62:	197c      	adds	r4, r7, r5
 8005c64:	0018      	movs	r0, r3
 8005c66:	f7fe ffe7 	bl	8004c38 <WIZCHIP_READ>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	7023      	strb	r3, [r4, #0]
      if (tmp != SOCK_ESTABLISHED)
 8005c6e:	197b      	adds	r3, r7, r5
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b17      	cmp	r3, #23
 8005c74:	d02e      	beq.n	8005cd4 <recv+0x134>
      {
        if(tmp == SOCK_CLOSE_WAIT)
 8005c76:	197b      	adds	r3, r7, r5
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b1c      	cmp	r3, #28
 8005c7c:	d122      	bne.n	8005cc4 <recv+0x124>
        {
          if(recvsize != 0) break;
 8005c7e:	19bb      	adds	r3, r7, r6
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d13d      	bne.n	8005d02 <recv+0x162>
          else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005c86:	1dfb      	adds	r3, r7, #7
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f7ff f958 	bl	8004f40 <getSn_TX_FSR>
 8005c90:	0003      	movs	r3, r0
 8005c92:	001c      	movs	r4, r3
 8005c94:	1dfb      	adds	r3, r7, #7
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	22f8      	movs	r2, #248	; 0xf8
 8005ca0:	0152      	lsls	r2, r2, #5
 8005ca2:	4694      	mov	ip, r2
 8005ca4:	4463      	add	r3, ip
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fe ffc6 	bl	8004c38 <WIZCHIP_READ>
 8005cac:	0003      	movs	r3, r0
 8005cae:	029b      	lsls	r3, r3, #10
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	d10f      	bne.n	8005cd4 <recv+0x134>
          {
            close(sn);
 8005cb4:	1dfb      	adds	r3, r7, #7
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7ff fc43 	bl	8005544 <close>
            return SOCKERR_SOCKSTATUS;
 8005cbe:	2307      	movs	r3, #7
 8005cc0:	425b      	negs	r3, r3
 8005cc2:	e04e      	b.n	8005d62 <recv+0x1c2>
          }
        }
        else
        {
          close(sn);
 8005cc4:	1dfb      	adds	r3, r7, #7
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f7ff fc3b 	bl	8005544 <close>
          return SOCKERR_SOCKSTATUS;
 8005cce:	2307      	movs	r3, #7
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	e046      	b.n	8005d62 <recv+0x1c2>
        }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <recv+0x1cc>)
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	001a      	movs	r2, r3
 8005cda:	1dfb      	adds	r3, r7, #7
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	411a      	asrs	r2, r3
 8005ce0:	0013      	movs	r3, r2
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d006      	beq.n	8005cf6 <recv+0x156>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <recv+0x156>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e035      	b.n	8005d62 <recv+0x1c2>
      if(recvsize != 0) break;
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <recv+0x166>
      recvsize = getSn_RX_RSR(sn);
 8005d00:	e79c      	b.n	8005c3c <recv+0x9c>
          if(recvsize != 0) break;
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	e000      	b.n	8005d08 <recv+0x168>
      if(recvsize != 0) break;
 8005d06:	46c0      	nop			; (mov r8, r8)
  }
  else sock_pack_info[sn] = PACK_COMPLETED;
  if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
  //len = recvsize;
#else   
  if(recvsize < len) len = recvsize;
 8005d08:	210c      	movs	r1, #12
 8005d0a:	187a      	adds	r2, r7, r1
 8005d0c:	1d3b      	adds	r3, r7, #4
 8005d0e:	8812      	ldrh	r2, [r2, #0]
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d203      	bcs.n	8005d1e <recv+0x17e>
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	187a      	adds	r2, r7, r1
 8005d1a:	8812      	ldrh	r2, [r2, #0]
 8005d1c:	801a      	strh	r2, [r3, #0]
  wiz_recv_data(sn, buf, len);
 8005d1e:	1d3b      	adds	r3, r7, #4
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	1dfb      	adds	r3, r7, #7
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f7ff fa59 	bl	80051e0 <wiz_recv_data>
  setSn_CR(sn,Sn_CR_RECV);
 8005d2e:	1dfb      	adds	r3, r7, #7
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	3301      	adds	r3, #1
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	33ff      	adds	r3, #255	; 0xff
 8005d3c:	2140      	movs	r1, #64	; 0x40
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fe ffcc 	bl	8004cdc <WIZCHIP_WRITE>
  while(getSn_CR(sn));
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	1dfb      	adds	r3, r7, #7
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3301      	adds	r3, #1
 8005d52:	33ff      	adds	r3, #255	; 0xff
 8005d54:	0018      	movs	r0, r3
 8005d56:	f7fe ff6f 	bl	8004c38 <WIZCHIP_READ>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d1f3      	bne.n	8005d46 <recv+0x1a6>
#endif

  //M20150409 : Explicit Type Casting
  //return len;
  return (int32_t)len;
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	881b      	ldrh	r3, [r3, #0]
}
 8005d62:	0018      	movs	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b005      	add	sp, #20
 8005d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	20000240 	.word	0x20000240

08005d70 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	46c0      	nop			; (mov r8, r8)
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b002      	add	sp, #8
 8005dac:	bd80      	pop	{r7, pc}

08005dae <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	000a      	movs	r2, r1
 8005db8:	1cfb      	adds	r3, r7, #3
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	1cfa      	adds	r2, r7, #3
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	46c0      	nop			; (mov r8, r8)
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b002      	add	sp, #8
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	0002      	movs	r2, r0
 8005de0:	1dfb      	adds	r3, r7, #7
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}

08005dec <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	000a      	movs	r2, r1
 8005df6:	1cbb      	adds	r3, r7, #2
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b002      	add	sp, #8
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	000a      	movs	r2, r1
 8005e0c:	1cbb      	adds	r3, r7, #2
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b002      	add	sp, #8
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <reg_wizchip_cs_cbfunc+0x16>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <reg_wizchip_cs_cbfunc+0x3c>)
 8005e30:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <reg_wizchip_cs_cbfunc+0x40>)
 8005e32:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <reg_wizchip_cs_cbfunc+0x3c>)
 8005e36:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <reg_wizchip_cs_cbfunc+0x44>)
 8005e38:	619a      	str	r2, [r3, #24]
 8005e3a:	e006      	b.n	8005e4a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <reg_wizchip_cs_cbfunc+0x3c>)
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005e42:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <reg_wizchip_cs_cbfunc+0x3c>)
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	619a      	str	r2, [r3, #24]
   }
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b002      	add	sp, #8
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	20000010 	.word	0x20000010
 8005e58:	08005d85 	.word	0x08005d85
 8005e5c:	08005d8f 	.word	0x08005d8f

08005e60 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <reg_wizchip_spi_cbfunc+0x4c>)
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	001a      	movs	r2, r3
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4013      	ands	r3, r2
 8005e78:	d0f8      	beq.n	8005e6c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <reg_wizchip_spi_cbfunc+0x26>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <reg_wizchip_spi_cbfunc+0x4c>)
 8005e88:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <reg_wizchip_spi_cbfunc+0x50>)
 8005e8a:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <reg_wizchip_spi_cbfunc+0x4c>)
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <reg_wizchip_spi_cbfunc+0x54>)
 8005e90:	621a      	str	r2, [r3, #32]
 8005e92:	e006      	b.n	8005ea2 <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <reg_wizchip_spi_cbfunc+0x4c>)
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <reg_wizchip_spi_cbfunc+0x4c>)
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	621a      	str	r2, [r3, #32]
   }
}
 8005ea0:	46c0      	nop			; (mov r8, r8)
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b002      	add	sp, #8
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	20000010 	.word	0x20000010
 8005eb0:	08005dcd 	.word	0x08005dcd
 8005eb4:	08005dd9 	.word	0x08005dd9

08005eb8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	001a      	movs	r2, r3
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d0f8      	beq.n	8005ec4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <reg_wizchip_spiburst_cbfunc+0x26>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <reg_wizchip_spiburst_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ee0:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005ee4:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <reg_wizchip_spiburst_cbfunc+0x54>)
 8005ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8005eea:	e006      	b.n	8005efa <reg_wizchip_spiburst_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005ef2:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b002      	add	sp, #8
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	20000010 	.word	0x20000010
 8005f08:	08005ded 	.word	0x08005ded
 8005f0c:	08005e03 	.word	0x08005e03

08005f10 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	0002      	movs	r2, r0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	1dfb      	adds	r3, r7, #7
 8005f1c:	701a      	strb	r2, [r3, #0]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005f1e:	2317      	movs	r3, #23
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005f26:	210c      	movs	r1, #12
 8005f28:	187b      	adds	r3, r7, r1
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	187b      	adds	r3, r7, r1
 8005f30:	2200      	movs	r2, #0
 8005f32:	605a      	str	r2, [r3, #4]
   switch(cwtype)
 8005f34:	1dfb      	adds	r3, r7, #7
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b0f      	cmp	r3, #15
 8005f3a:	d900      	bls.n	8005f3e <ctlwizchip+0x2e>
 8005f3c:	e0c1      	b.n	80060c2 <ctlwizchip+0x1b2>
 8005f3e:	009a      	lsls	r2, r3, #2
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <ctlwizchip+0x1c4>)
 8005f42:	18d3      	adds	r3, r2, r3
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	469f      	mov	pc, r3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005f48:	f000 f904 	bl	8006154 <wizchip_sw_reset>
         break;
 8005f4c:	e0bd      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <ctlwizchip+0x58>
         {
            ptmp[0] = (uint8_t*)arg;
 8005f54:	210c      	movs	r1, #12
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	601a      	str	r2, [r3, #0]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	001a      	movs	r2, r3
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	605a      	str	r2, [r3, #4]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005f68:	210c      	movs	r1, #12
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	187b      	adds	r3, r7, r1
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	0019      	movs	r1, r3
 8005f74:	0010      	movs	r0, r2
 8005f76:	f000 f936 	bl	80061e6 <wizchip_init>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	e0a6      	b.n	80060cc <ctlwizchip+0x1bc>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	0018      	movs	r0, r3
 8005f84:	f000 f9f2 	bl	800636c <wizchip_clrinterrupt>
         break;
 8005f88:	e09f      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005f8a:	f000 fa39 	bl	8006400 <wizchip_getinterrupt>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	001a      	movs	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	801a      	strh	r2, [r3, #0]
         break;
 8005f96:	e098      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f000 fa63 	bl	8006468 <wizchip_setinterruptmask>
         break;         
 8005fa2:	e092      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005fa4:	f000 fa86 	bl	80064b4 <wizchip_getinterruptmask>
 8005fa8:	0003      	movs	r3, r0
 8005faa:	001a      	movs	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	801a      	strh	r2, [r3, #0]
         break;
 8005fb0:	e08b      	b.n	80060ca <ctlwizchip+0x1ba>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	2398      	movs	r3, #152	; 0x98
 8005fbe:	015b      	lsls	r3, r3, #5
 8005fc0:	0011      	movs	r1, r2
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fe fe8a 	bl	8004cdc <WIZCHIP_WRITE>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	23a0      	movs	r3, #160	; 0xa0
 8005fd0:	015b      	lsls	r3, r3, #5
 8005fd2:	0011      	movs	r1, r2
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7fe fe81 	bl	8004cdc <WIZCHIP_WRITE>
         break;
 8005fda:	e076      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005fdc:	2398      	movs	r3, #152	; 0x98
 8005fde:	015b      	lsls	r3, r3, #5
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7fe fe29 	bl	8004c38 <WIZCHIP_READ>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	b29c      	uxth	r4, r3
 8005fee:	23a0      	movs	r3, #160	; 0xa0
 8005ff0:	015b      	lsls	r3, r3, #5
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f7fe fe20 	bl	8004c38 <WIZCHIP_READ>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	18e3      	adds	r3, r4, r3
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	801a      	strh	r2, [r3, #0]
         break;
 8006004:	e061      	b.n	80060ca <ctlwizchip+0x1ba>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <ctlwizchip+0x1c8>)
 8006008:	789a      	ldrb	r2, [r3, #2]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	4a31      	ldr	r2, [pc, #196]	; (80060d8 <ctlwizchip+0x1c8>)
 8006014:	78d2      	ldrb	r2, [r2, #3]
 8006016:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	3302      	adds	r3, #2
 800601c:	4a2e      	ldr	r2, [pc, #184]	; (80060d8 <ctlwizchip+0x1c8>)
 800601e:	7912      	ldrb	r2, [r2, #4]
 8006020:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	3303      	adds	r3, #3
 8006026:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <ctlwizchip+0x1c8>)
 8006028:	7952      	ldrb	r2, [r2, #5]
 800602a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	3304      	adds	r3, #4
 8006030:	4a29      	ldr	r2, [pc, #164]	; (80060d8 <ctlwizchip+0x1c8>)
 8006032:	7992      	ldrb	r2, [r2, #6]
 8006034:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	3305      	adds	r3, #5
 800603a:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <ctlwizchip+0x1c8>)
 800603c:	79d2      	ldrb	r2, [r2, #7]
 800603e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	3306      	adds	r3, #6
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
         break;
 8006048:	e03f      	b.n	80060ca <ctlwizchip+0x1ba>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800604a:	f000 fa9c 	bl	8006586 <wizphy_reset>
         break;
 800604e:	e03c      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	0018      	movs	r0, r3
 8006054:	f000 facb 	bl	80065ee <wizphy_setphyconf>
         break;
 8006058:	e037      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	0018      	movs	r0, r3
 800605e:	f000 fb25 	bl	80066ac <wizphy_getphyconf>
         break;
 8006062:	e032      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 fb8f 	bl	800678c <wizphy_setphypmode>
 800606e:	0003      	movs	r3, r0
 8006070:	e02c      	b.n	80060cc <ctlwizchip+0x1bc>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8006072:	f000 fa69 	bl	8006548 <wizphy_getphypmode>
 8006076:	0003      	movs	r3, r0
 8006078:	001a      	movs	r2, r3
 800607a:	2117      	movs	r1, #23
 800607c:	187b      	adds	r3, r7, r1
 800607e:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 8006080:	187b      	adds	r3, r7, r1
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2bff      	cmp	r3, #255	; 0xff
 8006086:	d102      	bne.n	800608e <ctlwizchip+0x17e>
 8006088:	2301      	movs	r3, #1
 800608a:	425b      	negs	r3, r3
 800608c:	e01e      	b.n	80060cc <ctlwizchip+0x1bc>
         *(uint8_t*)arg = tmp;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2217      	movs	r2, #23
 8006092:	18ba      	adds	r2, r7, r2
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	701a      	strb	r2, [r3, #0]
         break;
 8006098:	e017      	b.n	80060ca <ctlwizchip+0x1ba>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800609a:	f000 fa3b 	bl	8006514 <wizphy_getphylink>
 800609e:	0003      	movs	r3, r0
 80060a0:	001a      	movs	r2, r3
 80060a2:	2117      	movs	r1, #23
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 80060a8:	187b      	adds	r3, r7, r1
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2bff      	cmp	r3, #255	; 0xff
 80060ae:	d102      	bne.n	80060b6 <ctlwizchip+0x1a6>
 80060b0:	2301      	movs	r3, #1
 80060b2:	425b      	negs	r3, r3
 80060b4:	e00a      	b.n	80060cc <ctlwizchip+0x1bc>
         *(uint8_t*)arg = tmp;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2217      	movs	r2, #23
 80060ba:	18ba      	adds	r2, r7, r2
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	701a      	strb	r2, [r3, #0]
         break;
 80060c0:	e003      	b.n	80060ca <ctlwizchip+0x1ba>
   #endif      
      default:
         return -1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	425b      	negs	r3, r3
 80060c6:	e001      	b.n	80060cc <ctlwizchip+0x1bc>
         break;
 80060c8:	46c0      	nop			; (mov r8, r8)
   }
   return 0;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b007      	add	sp, #28
 80060d2:	bd90      	pop	{r4, r7, pc}
 80060d4:	0800831c 	.word	0x0800831c
 80060d8:	20000010 	.word	0x20000010

080060dc <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	0002      	movs	r2, r0
 80060e4:	6039      	str	r1, [r7, #0]
 80060e6:	1dfb      	adds	r3, r7, #7
 80060e8:	701a      	strb	r2, [r3, #0]
   
   switch(cntype)
 80060ea:	1dfb      	adds	r3, r7, #7
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	d826      	bhi.n	8006140 <ctlnetwork+0x64>
 80060f2:	009a      	lsls	r2, r3, #2
 80060f4:	4b16      	ldr	r3, [pc, #88]	; (8006150 <ctlnetwork+0x74>)
 80060f6:	18d3      	adds	r3, r2, r3
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	469f      	mov	pc, r3
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	0018      	movs	r0, r3
 8006100:	f000 fba4 	bl	800684c <wizchip_setnetinfo>
         break;
 8006104:	e01f      	b.n	8006146 <ctlnetwork+0x6a>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	0018      	movs	r0, r3
 800610a:	f000 fbe1 	bl	80068d0 <wizchip_getnetinfo>
         break;
 800610e:	e01a      	b.n	8006146 <ctlnetwork+0x6a>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	0018      	movs	r0, r3
 8006116:	f000 fc1d 	bl	8006954 <wizchip_setnetmode>
 800611a:	0003      	movs	r3, r0
 800611c:	e014      	b.n	8006148 <ctlnetwork+0x6c>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800611e:	f000 fc45 	bl	80069ac <wizchip_getnetmode>
 8006122:	0003      	movs	r3, r0
 8006124:	001a      	movs	r2, r3
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	701a      	strb	r2, [r3, #0]
         break;
 800612a:	e00c      	b.n	8006146 <ctlnetwork+0x6a>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	0018      	movs	r0, r3
 8006130:	f000 fc45 	bl	80069be <wizchip_settimeout>
         break;
 8006134:	e007      	b.n	8006146 <ctlnetwork+0x6a>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	0018      	movs	r0, r3
 800613a:	f000 fc64 	bl	8006a06 <wizchip_gettimeout>
         break;
 800613e:	e002      	b.n	8006146 <ctlnetwork+0x6a>
      default:
         return -1;
 8006140:	2301      	movs	r3, #1
 8006142:	425b      	negs	r3, r3
 8006144:	e000      	b.n	8006148 <ctlnetwork+0x6c>
   }
   return 0;
 8006146:	2300      	movs	r3, #0
}
 8006148:	0018      	movs	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	b002      	add	sp, #8
 800614e:	bd80      	pop	{r7, pc}
 8006150:	0800835c 	.word	0x0800835c

08006154 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8006154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800615a:	1d39      	adds	r1, r7, #4
 800615c:	2390      	movs	r3, #144	; 0x90
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	2206      	movs	r2, #6
 8006162:	0018      	movs	r0, r3
 8006164:	f7fe fe10 	bl	8004d88 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006168:	2414      	movs	r4, #20
 800616a:	1939      	adds	r1, r7, r4
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	2204      	movs	r2, #4
 8006172:	0018      	movs	r0, r3
 8006174:	f7fe fe08 	bl	8004d88 <WIZCHIP_READ_BUF>
 8006178:	2510      	movs	r5, #16
 800617a:	1979      	adds	r1, r7, r5
 800617c:	23a0      	movs	r3, #160	; 0xa0
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	2204      	movs	r2, #4
 8006182:	0018      	movs	r0, r3
 8006184:	f7fe fe00 	bl	8004d88 <WIZCHIP_READ_BUF>
 8006188:	260c      	movs	r6, #12
 800618a:	19b9      	adds	r1, r7, r6
 800618c:	23f0      	movs	r3, #240	; 0xf0
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	2204      	movs	r2, #4
 8006192:	0018      	movs	r0, r3
 8006194:	f7fe fdf8 	bl	8004d88 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8006198:	2180      	movs	r1, #128	; 0x80
 800619a:	2000      	movs	r0, #0
 800619c:	f7fe fd9e 	bl	8004cdc <WIZCHIP_WRITE>
   getMR(); // for delay
 80061a0:	2000      	movs	r0, #0
 80061a2:	f7fe fd49 	bl	8004c38 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80061a6:	1d39      	adds	r1, r7, #4
 80061a8:	2390      	movs	r3, #144	; 0x90
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	2206      	movs	r2, #6
 80061ae:	0018      	movs	r0, r3
 80061b0:	f7fe fe58 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80061b4:	1939      	adds	r1, r7, r4
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	2204      	movs	r2, #4
 80061bc:	0018      	movs	r0, r3
 80061be:	f7fe fe51 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80061c2:	1979      	adds	r1, r7, r5
 80061c4:	23a0      	movs	r3, #160	; 0xa0
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	2204      	movs	r2, #4
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7fe fe4a 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80061d0:	19b9      	adds	r1, r7, r6
 80061d2:	23f0      	movs	r3, #240	; 0xf0
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	2204      	movs	r2, #4
 80061d8:	0018      	movs	r0, r3
 80061da:	f7fe fe43 	bl	8004e64 <WIZCHIP_WRITE_BUF>
}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b007      	add	sp, #28
 80061e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061e6 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80061e6:	b590      	push	{r4, r7, lr}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80061f0:	240e      	movs	r4, #14
 80061f2:	193b      	adds	r3, r7, r4
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 80061f8:	f7ff ffac 	bl	8006154 <wizchip_sw_reset>
   if(txsize)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d055      	beq.n	80062ae <wizchip_init+0xc8>
   {
      tmp = 0;
 8006202:	193b      	adds	r3, r7, r4
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006208:	230f      	movs	r3, #15
 800620a:	18fb      	adds	r3, r7, r3
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e01e      	b.n	8006250 <wizchip_init+0x6a>
		{
			tmp += txsize[i];
 8006212:	230f      	movs	r3, #15
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	b25b      	sxtb	r3, r3
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	18d3      	adds	r3, r2, r3
 800621e:	781a      	ldrb	r2, [r3, #0]
 8006220:	210e      	movs	r1, #14
 8006222:	187b      	adds	r3, r7, r1
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	18d3      	adds	r3, r2, r3
 8006228:	b2da      	uxtb	r2, r3
 800622a:	187b      	adds	r3, r7, r1
 800622c:	701a      	strb	r2, [r3, #0]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800622e:	187b      	adds	r3, r7, r1
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b25b      	sxtb	r3, r3
 8006234:	2b10      	cmp	r3, #16
 8006236:	dd02      	ble.n	800623e <wizchip_init+0x58>
 8006238:	2301      	movs	r3, #1
 800623a:	425b      	negs	r3, r3
 800623c:	e092      	b.n	8006364 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800623e:	210f      	movs	r1, #15
 8006240:	187b      	adds	r3, r7, r1
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b25b      	sxtb	r3, r3
 8006246:	b2db      	uxtb	r3, r3
 8006248:	3301      	adds	r3, #1
 800624a:	b2da      	uxtb	r2, r3
 800624c:	187b      	adds	r3, r7, r1
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	220f      	movs	r2, #15
 8006252:	18bb      	adds	r3, r7, r2
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	b25b      	sxtb	r3, r3
 8006258:	2b07      	cmp	r3, #7
 800625a:	ddda      	ble.n	8006212 <wizchip_init+0x2c>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800625c:	18bb      	adds	r3, r7, r2
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e01e      	b.n	80062a2 <wizchip_init+0xbc>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006264:	220f      	movs	r2, #15
 8006266:	18bb      	adds	r3, r7, r2
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	b25b      	sxtb	r3, r3
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	3301      	adds	r3, #1
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	21f8      	movs	r1, #248	; 0xf8
 8006274:	0149      	lsls	r1, r1, #5
 8006276:	468c      	mov	ip, r1
 8006278:	4463      	add	r3, ip
 800627a:	0018      	movs	r0, r3
 800627c:	0014      	movs	r4, r2
 800627e:	18bb      	adds	r3, r7, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	b25b      	sxtb	r3, r3
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	18d3      	adds	r3, r2, r3
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	0019      	movs	r1, r3
 800628c:	f7fe fd26 	bl	8004cdc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006290:	0021      	movs	r1, r4
 8006292:	187b      	adds	r3, r7, r1
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	b25b      	sxtb	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	3301      	adds	r3, #1
 800629c:	b2da      	uxtb	r2, r3
 800629e:	187b      	adds	r3, r7, r1
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	230f      	movs	r3, #15
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	2b07      	cmp	r3, #7
 80062ac:	ddda      	ble.n	8006264 <wizchip_init+0x7e>
		}

	#endif
   }

   if(rxsize)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d056      	beq.n	8006362 <wizchip_init+0x17c>
   {
      tmp = 0;
 80062b4:	230e      	movs	r3, #14
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	e01e      	b.n	8006304 <wizchip_init+0x11e>
		{
			tmp += rxsize[i];
 80062c6:	230f      	movs	r3, #15
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	210e      	movs	r1, #14
 80062d6:	187b      	adds	r3, r7, r1
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	18d3      	adds	r3, r2, r3
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	187b      	adds	r3, r7, r1
 80062e0:	701a      	strb	r2, [r3, #0]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	b25b      	sxtb	r3, r3
 80062e8:	2b10      	cmp	r3, #16
 80062ea:	dd02      	ble.n	80062f2 <wizchip_init+0x10c>
 80062ec:	2301      	movs	r3, #1
 80062ee:	425b      	negs	r3, r3
 80062f0:	e038      	b.n	8006364 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80062f2:	210f      	movs	r1, #15
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	3301      	adds	r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	187b      	adds	r3, r7, r1
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	220f      	movs	r2, #15
 8006306:	18bb      	adds	r3, r7, r2
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	b25b      	sxtb	r3, r3
 800630c:	2b07      	cmp	r3, #7
 800630e:	ddda      	ble.n	80062c6 <wizchip_init+0xe0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006310:	18bb      	adds	r3, r7, r2
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e01e      	b.n	8006356 <wizchip_init+0x170>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8006318:	220f      	movs	r2, #15
 800631a:	18bb      	adds	r3, r7, r2
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b25b      	sxtb	r3, r3
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	3301      	adds	r3, #1
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	21f0      	movs	r1, #240	; 0xf0
 8006328:	0149      	lsls	r1, r1, #5
 800632a:	468c      	mov	ip, r1
 800632c:	4463      	add	r3, ip
 800632e:	0018      	movs	r0, r3
 8006330:	0014      	movs	r4, r2
 8006332:	18bb      	adds	r3, r7, r2
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	b25b      	sxtb	r3, r3
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	18d3      	adds	r3, r2, r3
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	0019      	movs	r1, r3
 8006340:	f7fe fccc 	bl	8004cdc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006344:	0021      	movs	r1, r4
 8006346:	187b      	adds	r3, r7, r1
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b25b      	sxtb	r3, r3
 800634c:	b2db      	uxtb	r3, r3
 800634e:	3301      	adds	r3, #1
 8006350:	b2da      	uxtb	r2, r3
 8006352:	187b      	adds	r3, r7, r1
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	230f      	movs	r3, #15
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b25b      	sxtb	r3, r3
 800635e:	2b07      	cmp	r3, #7
 8006360:	ddda      	ble.n	8006318 <wizchip_init+0x132>
		#endif
		}
	#endif
   }
   return 0;
 8006362:	2300      	movs	r3, #0
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b005      	add	sp, #20
 800636a:	bd90      	pop	{r4, r7, pc}

0800636c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800636c:	b590      	push	{r4, r7, lr}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	0002      	movs	r2, r0
 8006374:	1dbb      	adds	r3, r7, #6
 8006376:	801a      	strh	r2, [r3, #0]
   uint8_t ir  = (uint8_t)intr;
 8006378:	210f      	movs	r1, #15
 800637a:	187b      	adds	r3, r7, r1
 800637c:	1dba      	adds	r2, r7, #6
 800637e:	8812      	ldrh	r2, [r2, #0]
 8006380:	701a      	strb	r2, [r3, #0]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8006382:	1dbb      	adds	r3, r7, #6
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	b29a      	uxth	r2, r3
 800638a:	230e      	movs	r3, #14
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	701a      	strb	r2, [r3, #0]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006390:	000c      	movs	r4, r1
 8006392:	187b      	adds	r3, r7, r1
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	220f      	movs	r2, #15
 8006398:	4393      	bics	r3, r2
 800639a:	b2da      	uxtb	r2, r3
 800639c:	23a8      	movs	r3, #168	; 0xa8
 800639e:	015b      	lsls	r3, r3, #5
 80063a0:	0011      	movs	r1, r2
 80063a2:	0018      	movs	r0, r3
 80063a4:	f7fe fc9a 	bl	8004cdc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80063a8:	193b      	adds	r3, r7, r4
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e01d      	b.n	80063ec <wizchip_clrinterrupt+0x80>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80063b0:	230e      	movs	r3, #14
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	210f      	movs	r1, #15
 80063b8:	187b      	adds	r3, r7, r1
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	411a      	asrs	r2, r3
 80063be:	0013      	movs	r3, r2
 80063c0:	2201      	movs	r2, #1
 80063c2:	4013      	ands	r3, r2
 80063c4:	d00c      	beq.n	80063e0 <wizchip_clrinterrupt+0x74>
 80063c6:	187b      	adds	r3, r7, r1
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	3301      	adds	r3, #1
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	2280      	movs	r2, #128	; 0x80
 80063d2:	0092      	lsls	r2, r2, #2
 80063d4:	4694      	mov	ip, r2
 80063d6:	4463      	add	r3, ip
 80063d8:	211f      	movs	r1, #31
 80063da:	0018      	movs	r0, r3
 80063dc:	f7fe fc7e 	bl	8004cdc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80063e0:	210f      	movs	r1, #15
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	781a      	ldrb	r2, [r3, #0]
 80063e6:	187b      	adds	r3, r7, r1
 80063e8:	3201      	adds	r2, #1
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	230f      	movs	r3, #15
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b07      	cmp	r3, #7
 80063f4:	d9dc      	bls.n	80063b0 <wizchip_clrinterrupt+0x44>
   }

#endif   
}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	46c0      	nop			; (mov r8, r8)
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b005      	add	sp, #20
 80063fe:	bd90      	pop	{r4, r7, pc}

08006400 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006406:	1dfb      	adds	r3, r7, #7
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
   uint8_t sir = 0;
 800640c:	1dbb      	adds	r3, r7, #6
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	2200      	movs	r2, #0
 8006416:	801a      	strh	r2, [r3, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8006418:	23a8      	movs	r3, #168	; 0xa8
 800641a:	015b      	lsls	r3, r3, #5
 800641c:	0018      	movs	r0, r3
 800641e:	f7fe fc0b 	bl	8004c38 <WIZCHIP_READ>
 8006422:	0003      	movs	r3, r0
 8006424:	0019      	movs	r1, r3
 8006426:	1dfb      	adds	r3, r7, #7
 8006428:	220f      	movs	r2, #15
 800642a:	4391      	bics	r1, r2
 800642c:	000a      	movs	r2, r1
 800642e:	701a      	strb	r2, [r3, #0]
   sir = getSIR();
 8006430:	1dbc      	adds	r4, r7, #6
 8006432:	23b8      	movs	r3, #184	; 0xb8
 8006434:	015b      	lsls	r3, r3, #5
 8006436:	0018      	movs	r0, r3
 8006438:	f7fe fbfe 	bl	8004c38 <WIZCHIP_READ>
 800643c:	0003      	movs	r3, r0
 800643e:	7023      	strb	r3, [r4, #0]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	1dba      	adds	r2, r7, #6
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + ir;
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	b299      	uxth	r1, r3
 8006450:	1dfb      	adds	r3, r7, #7
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	b29a      	uxth	r2, r3
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	188a      	adds	r2, r1, r2
 800645a:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	881b      	ldrh	r3, [r3, #0]
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b003      	add	sp, #12
 8006466:	bd90      	pop	{r4, r7, pc}

08006468 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	0002      	movs	r2, r0
 8006470:	1dbb      	adds	r3, r7, #6
 8006472:	801a      	strh	r2, [r3, #0]
   uint8_t imr  = (uint8_t)intr;
 8006474:	210f      	movs	r1, #15
 8006476:	187b      	adds	r3, r7, r1
 8006478:	1dba      	adds	r2, r7, #6
 800647a:	8812      	ldrh	r2, [r2, #0]
 800647c:	701a      	strb	r2, [r3, #0]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800647e:	1dbb      	adds	r3, r7, #6
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	b29a      	uxth	r2, r3
 8006486:	240e      	movs	r4, #14
 8006488:	193b      	adds	r3, r7, r4
 800648a:	701a      	strb	r2, [r3, #0]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800648c:	187b      	adds	r3, r7, r1
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	23b0      	movs	r3, #176	; 0xb0
 8006492:	015b      	lsls	r3, r3, #5
 8006494:	0011      	movs	r1, r2
 8006496:	0018      	movs	r0, r3
 8006498:	f7fe fc20 	bl	8004cdc <WIZCHIP_WRITE>
   setSIMR(simr);
 800649c:	193b      	adds	r3, r7, r4
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	23c0      	movs	r3, #192	; 0xc0
 80064a2:	015b      	lsls	r3, r3, #5
 80064a4:	0011      	movs	r1, r2
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7fe fc18 	bl	8004cdc <WIZCHIP_WRITE>
#endif   
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b005      	add	sp, #20
 80064b2:	bd90      	pop	{r4, r7, pc}

080064b4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80064b4:	b590      	push	{r4, r7, lr}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80064ba:	1dfb      	adds	r3, r7, #7
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
   uint8_t simr = 0;
 80064c0:	1dbb      	adds	r3, r7, #6
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	2200      	movs	r2, #0
 80064ca:	801a      	strh	r2, [r3, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80064cc:	1dfc      	adds	r4, r7, #7
 80064ce:	23b0      	movs	r3, #176	; 0xb0
 80064d0:	015b      	lsls	r3, r3, #5
 80064d2:	0018      	movs	r0, r3
 80064d4:	f7fe fbb0 	bl	8004c38 <WIZCHIP_READ>
 80064d8:	0003      	movs	r3, r0
 80064da:	7023      	strb	r3, [r4, #0]
   simr = getSIMR();
 80064dc:	1dbc      	adds	r4, r7, #6
 80064de:	23c0      	movs	r3, #192	; 0xc0
 80064e0:	015b      	lsls	r3, r3, #5
 80064e2:	0018      	movs	r0, r3
 80064e4:	f7fe fba8 	bl	8004c38 <WIZCHIP_READ>
 80064e8:	0003      	movs	r3, r0
 80064ea:	7023      	strb	r3, [r4, #0]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	1dba      	adds	r2, r7, #6
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + imr;
 80064f4:	1d3b      	adds	r3, r7, #4
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	b299      	uxth	r1, r3
 80064fc:	1dfb      	adds	r3, r7, #7
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b29a      	uxth	r2, r3
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	188a      	adds	r2, r1, r2
 8006506:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	881b      	ldrh	r3, [r3, #0]
}
 800650c:	0018      	movs	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	b003      	add	sp, #12
 8006512:	bd90      	pop	{r4, r7, pc}

08006514 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800651a:	1dfb      	adds	r3, r7, #7
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006520:	23b8      	movs	r3, #184	; 0xb8
 8006522:	019b      	lsls	r3, r3, #6
 8006524:	0018      	movs	r0, r3
 8006526:	f7fe fb87 	bl	8004c38 <WIZCHIP_READ>
 800652a:	0003      	movs	r3, r0
 800652c:	001a      	movs	r2, r3
 800652e:	2301      	movs	r3, #1
 8006530:	4013      	ands	r3, r2
 8006532:	d002      	beq.n	800653a <wizphy_getphylink+0x26>
      tmp = PHY_LINK_ON;
 8006534:	1dfb      	adds	r3, r7, #7
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]

#else
   tmp = -1;
#endif
   return tmp;
 800653a:	1dfb      	adds	r3, r7, #7
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b25b      	sxtb	r3, r3
}
 8006540:	0018      	movs	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	b002      	add	sp, #8
 8006546:	bd80      	pop	{r7, pc}

08006548 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800654e:	1dfb      	adds	r3, r7, #7
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006554:	23b8      	movs	r3, #184	; 0xb8
 8006556:	019b      	lsls	r3, r3, #6
 8006558:	0018      	movs	r0, r3
 800655a:	f7fe fb6d 	bl	8004c38 <WIZCHIP_READ>
 800655e:	0003      	movs	r3, r0
 8006560:	001a      	movs	r2, r3
 8006562:	2338      	movs	r3, #56	; 0x38
 8006564:	4013      	ands	r3, r2
 8006566:	2b30      	cmp	r3, #48	; 0x30
 8006568:	d103      	bne.n	8006572 <wizphy_getphypmode+0x2a>
         tmp = PHY_POWER_DOWN;
 800656a:	1dfb      	adds	r3, r7, #7
 800656c:	2201      	movs	r2, #1
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	e002      	b.n	8006578 <wizphy_getphypmode+0x30>
      else 
         tmp = PHY_POWER_NORM;
 8006572:	1dfb      	adds	r3, r7, #7
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006578:	1dfb      	adds	r3, r7, #7
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	b25b      	sxtb	r3, r3
}
 800657e:	0018      	movs	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	b002      	add	sp, #8
 8006584:	bd80      	pop	{r7, pc}

08006586 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006586:	b590      	push	{r4, r7, lr}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800658c:	1dfc      	adds	r4, r7, #7
 800658e:	23b8      	movs	r3, #184	; 0xb8
 8006590:	019b      	lsls	r3, r3, #6
 8006592:	0018      	movs	r0, r3
 8006594:	f7fe fb50 	bl	8004c38 <WIZCHIP_READ>
 8006598:	0003      	movs	r3, r0
 800659a:	7023      	strb	r3, [r4, #0]
   tmp &= PHYCFGR_RST;
 800659c:	1dfb      	adds	r3, r7, #7
 800659e:	1dfa      	adds	r2, r7, #7
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	217f      	movs	r1, #127	; 0x7f
 80065a4:	400a      	ands	r2, r1
 80065a6:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 80065a8:	1dfb      	adds	r3, r7, #7
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	23b8      	movs	r3, #184	; 0xb8
 80065ae:	019b      	lsls	r3, r3, #6
 80065b0:	0011      	movs	r1, r2
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7fe fb92 	bl	8004cdc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80065b8:	1dfc      	adds	r4, r7, #7
 80065ba:	23b8      	movs	r3, #184	; 0xb8
 80065bc:	019b      	lsls	r3, r3, #6
 80065be:	0018      	movs	r0, r3
 80065c0:	f7fe fb3a 	bl	8004c38 <WIZCHIP_READ>
 80065c4:	0003      	movs	r3, r0
 80065c6:	7023      	strb	r3, [r4, #0]
   tmp |= ~PHYCFGR_RST;
 80065c8:	1dfb      	adds	r3, r7, #7
 80065ca:	1dfa      	adds	r2, r7, #7
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	2180      	movs	r1, #128	; 0x80
 80065d0:	4249      	negs	r1, r1
 80065d2:	430a      	orrs	r2, r1
 80065d4:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 80065d6:	1dfb      	adds	r3, r7, #7
 80065d8:	781a      	ldrb	r2, [r3, #0]
 80065da:	23b8      	movs	r3, #184	; 0xb8
 80065dc:	019b      	lsls	r3, r3, #6
 80065de:	0011      	movs	r1, r2
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fe fb7b 	bl	8004cdc <WIZCHIP_WRITE>
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b003      	add	sp, #12
 80065ec:	bd90      	pop	{r4, r7, pc}

080065ee <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80065f6:	210f      	movs	r1, #15
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
   if(phyconf->by == PHY_CONFBY_SW)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d106      	bne.n	8006614 <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMD;
 8006606:	187b      	adds	r3, r7, r1
 8006608:	187a      	adds	r2, r7, r1
 800660a:	7812      	ldrb	r2, [r2, #0]
 800660c:	2140      	movs	r1, #64	; 0x40
 800660e:	430a      	orrs	r2, r1
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	e006      	b.n	8006622 <wizphy_setphyconf+0x34>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006614:	220f      	movs	r2, #15
 8006616:	18bb      	adds	r3, r7, r2
 8006618:	18ba      	adds	r2, r7, r2
 800661a:	7812      	ldrb	r2, [r2, #0]
 800661c:	2140      	movs	r1, #64	; 0x40
 800661e:	438a      	bics	r2, r1
 8006620:	701a      	strb	r2, [r3, #0]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d107      	bne.n	800663a <wizphy_setphyconf+0x4c>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800662a:	220f      	movs	r2, #15
 800662c:	18bb      	adds	r3, r7, r2
 800662e:	18ba      	adds	r2, r7, r2
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	2138      	movs	r1, #56	; 0x38
 8006634:	430a      	orrs	r2, r1
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e028      	b.n	800668c <wizphy_setphyconf+0x9e>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	78db      	ldrb	r3, [r3, #3]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d113      	bne.n	800666a <wizphy_setphyconf+0x7c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	789b      	ldrb	r3, [r3, #2]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d107      	bne.n	800665a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100F;
 800664a:	220f      	movs	r2, #15
 800664c:	18bb      	adds	r3, r7, r2
 800664e:	18ba      	adds	r2, r7, r2
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	2118      	movs	r1, #24
 8006654:	430a      	orrs	r2, r1
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	e018      	b.n	800668c <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800665a:	220f      	movs	r2, #15
 800665c:	18bb      	adds	r3, r7, r2
 800665e:	18ba      	adds	r2, r7, r2
 8006660:	7812      	ldrb	r2, [r2, #0]
 8006662:	2108      	movs	r1, #8
 8006664:	430a      	orrs	r2, r1
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	e010      	b.n	800668c <wizphy_setphyconf+0x9e>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	789b      	ldrb	r3, [r3, #2]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <wizphy_setphyconf+0x94>
            tmp |= PHYCFGR_OPMDC_100H;
 8006672:	220f      	movs	r2, #15
 8006674:	18bb      	adds	r3, r7, r2
 8006676:	18ba      	adds	r2, r7, r2
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	2110      	movs	r1, #16
 800667c:	430a      	orrs	r2, r1
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	e004      	b.n	800668c <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10H;
 8006682:	220f      	movs	r2, #15
 8006684:	18bb      	adds	r3, r7, r2
 8006686:	18ba      	adds	r2, r7, r2
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	701a      	strb	r2, [r3, #0]
      }
   }
   setPHYCFGR(tmp);
 800668c:	230f      	movs	r3, #15
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	23b8      	movs	r3, #184	; 0xb8
 8006694:	019b      	lsls	r3, r3, #6
 8006696:	0011      	movs	r1, r2
 8006698:	0018      	movs	r0, r3
 800669a:	f7fe fb1f 	bl	8004cdc <WIZCHIP_WRITE>
   wizphy_reset();
 800669e:	f7ff ff72 	bl	8006586 <wizphy_reset>
}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b004      	add	sp, #16
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80066ac:	b5b0      	push	{r4, r5, r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80066b4:	250f      	movs	r5, #15
 80066b6:	197b      	adds	r3, r7, r5
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 80066bc:	197c      	adds	r4, r7, r5
 80066be:	23b8      	movs	r3, #184	; 0xb8
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	0018      	movs	r0, r3
 80066c4:	f7fe fab8 	bl	8004c38 <WIZCHIP_READ>
 80066c8:	0003      	movs	r3, r0
 80066ca:	7023      	strb	r3, [r4, #0]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80066cc:	0029      	movs	r1, r5
 80066ce:	187b      	adds	r3, r7, r1
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	119b      	asrs	r3, r3, #6
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2201      	movs	r2, #1
 80066d8:	4013      	ands	r3, r2
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80066e0:	187b      	adds	r3, r7, r1
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2238      	movs	r2, #56	; 0x38
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d001      	beq.n	80066f0 <wizphy_getphyconf+0x44>
 80066ec:	2b38      	cmp	r3, #56	; 0x38
 80066ee:	d103      	bne.n	80066f8 <wizphy_getphyconf+0x4c>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	705a      	strb	r2, [r3, #1]
         break;
 80066f6:	e003      	b.n	8006700 <wizphy_getphyconf+0x54>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	705a      	strb	r2, [r3, #1]
         break;
 80066fe:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006700:	230f      	movs	r3, #15
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2238      	movs	r2, #56	; 0x38
 8006708:	4013      	ands	r3, r2
 800670a:	3b10      	subs	r3, #16
 800670c:	2210      	movs	r2, #16
 800670e:	429a      	cmp	r2, r3
 8006710:	4192      	sbcs	r2, r2
 8006712:	4252      	negs	r2, r2
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	2a00      	cmp	r2, #0
 8006718:	d10d      	bne.n	8006736 <wizphy_getphyconf+0x8a>
 800671a:	2201      	movs	r2, #1
 800671c:	409a      	lsls	r2, r3
 800671e:	0013      	movs	r3, r2
 8006720:	4a18      	ldr	r2, [pc, #96]	; (8006784 <wizphy_getphyconf+0xd8>)
 8006722:	4013      	ands	r3, r2
 8006724:	1e5a      	subs	r2, r3, #1
 8006726:	4193      	sbcs	r3, r2
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <wizphy_getphyconf+0x8a>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	709a      	strb	r2, [r3, #2]
         break;
 8006734:	e003      	b.n	800673e <wizphy_getphyconf+0x92>
      default:
         phyconf->speed = PHY_SPEED_10;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	709a      	strb	r2, [r3, #2]
         break;
 800673c:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800673e:	230f      	movs	r3, #15
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2238      	movs	r2, #56	; 0x38
 8006746:	4013      	ands	r3, r2
 8006748:	3b08      	subs	r3, #8
 800674a:	2218      	movs	r2, #24
 800674c:	429a      	cmp	r2, r3
 800674e:	4192      	sbcs	r2, r2
 8006750:	4252      	negs	r2, r2
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	2a00      	cmp	r2, #0
 8006756:	d10d      	bne.n	8006774 <wizphy_getphyconf+0xc8>
 8006758:	2201      	movs	r2, #1
 800675a:	409a      	lsls	r2, r3
 800675c:	0013      	movs	r3, r2
 800675e:	4a0a      	ldr	r2, [pc, #40]	; (8006788 <wizphy_getphyconf+0xdc>)
 8006760:	4013      	ands	r3, r2
 8006762:	1e5a      	subs	r2, r3, #1
 8006764:	4193      	sbcs	r3, r2
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <wizphy_getphyconf+0xc8>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	70da      	strb	r2, [r3, #3]
         break;
 8006772:	e003      	b.n	800677c <wizphy_getphyconf+0xd0>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	70da      	strb	r2, [r3, #3]
         break;
 800677a:	46c0      	nop			; (mov r8, r8)
   }
}
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b004      	add	sp, #16
 8006782:	bdb0      	pop	{r4, r5, r7, pc}
 8006784:	00010101 	.word	0x00010101
 8006788:	01010001 	.word	0x01010001

0800678c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800678c:	b5b0      	push	{r4, r5, r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	0002      	movs	r2, r0
 8006794:	1dfb      	adds	r3, r7, #7
 8006796:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 8006798:	250f      	movs	r5, #15
 800679a:	197b      	adds	r3, r7, r5
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 80067a0:	197c      	adds	r4, r7, r5
 80067a2:	23b8      	movs	r3, #184	; 0xb8
 80067a4:	019b      	lsls	r3, r3, #6
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7fe fa46 	bl	8004c38 <WIZCHIP_READ>
 80067ac:	0003      	movs	r3, r0
 80067ae:	7023      	strb	r3, [r4, #0]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80067b0:	197b      	adds	r3, r7, r5
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2240      	movs	r2, #64	; 0x40
 80067b6:	4013      	ands	r3, r2
 80067b8:	d102      	bne.n	80067c0 <wizphy_setphypmode+0x34>
 80067ba:	2301      	movs	r3, #1
 80067bc:	425b      	negs	r3, r3
 80067be:	e040      	b.n	8006842 <wizphy_setphypmode+0xb6>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80067c0:	200f      	movs	r0, #15
 80067c2:	183b      	adds	r3, r7, r0
 80067c4:	183a      	adds	r2, r7, r0
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	2138      	movs	r1, #56	; 0x38
 80067ca:	438a      	bics	r2, r1
 80067cc:	701a      	strb	r2, [r3, #0]
   if( pmode == PHY_POWER_DOWN)
 80067ce:	1dfb      	adds	r3, r7, #7
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d106      	bne.n	80067e4 <wizphy_setphypmode+0x58>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80067d6:	183b      	adds	r3, r7, r0
 80067d8:	183a      	adds	r2, r7, r0
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	2130      	movs	r1, #48	; 0x30
 80067de:	430a      	orrs	r2, r1
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e006      	b.n	80067f2 <wizphy_setphypmode+0x66>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80067e4:	220f      	movs	r2, #15
 80067e6:	18bb      	adds	r3, r7, r2
 80067e8:	18ba      	adds	r2, r7, r2
 80067ea:	7812      	ldrb	r2, [r2, #0]
 80067ec:	2138      	movs	r1, #56	; 0x38
 80067ee:	430a      	orrs	r2, r1
 80067f0:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 80067f2:	250f      	movs	r5, #15
 80067f4:	197b      	adds	r3, r7, r5
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	23b8      	movs	r3, #184	; 0xb8
 80067fa:	019b      	lsls	r3, r3, #6
 80067fc:	0011      	movs	r1, r2
 80067fe:	0018      	movs	r0, r3
 8006800:	f7fe fa6c 	bl	8004cdc <WIZCHIP_WRITE>
   wizphy_reset();
 8006804:	f7ff febf 	bl	8006586 <wizphy_reset>
   tmp = getPHYCFGR();
 8006808:	197c      	adds	r4, r7, r5
 800680a:	23b8      	movs	r3, #184	; 0xb8
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	0018      	movs	r0, r3
 8006810:	f7fe fa12 	bl	8004c38 <WIZCHIP_READ>
 8006814:	0003      	movs	r3, r0
 8006816:	7023      	strb	r3, [r4, #0]
   if( pmode == PHY_POWER_DOWN)
 8006818:	1dfb      	adds	r3, r7, #7
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d106      	bne.n	800682e <wizphy_setphypmode+0xa2>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006820:	197b      	adds	r3, r7, r5
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2230      	movs	r2, #48	; 0x30
 8006826:	4013      	ands	r3, r2
 8006828:	d009      	beq.n	800683e <wizphy_setphypmode+0xb2>
 800682a:	2300      	movs	r3, #0
 800682c:	e009      	b.n	8006842 <wizphy_setphypmode+0xb6>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800682e:	230f      	movs	r3, #15
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2238      	movs	r2, #56	; 0x38
 8006836:	4013      	ands	r3, r2
 8006838:	d001      	beq.n	800683e <wizphy_setphypmode+0xb2>
 800683a:	2300      	movs	r3, #0
 800683c:	e001      	b.n	8006842 <wizphy_setphypmode+0xb6>
   }
   return -1;
 800683e:	2301      	movs	r3, #1
 8006840:	425b      	negs	r3, r3
}
 8006842:	0018      	movs	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	b004      	add	sp, #16
 8006848:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800684c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	2390      	movs	r3, #144	; 0x90
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	2206      	movs	r2, #6
 800685c:	0018      	movs	r0, r3
 800685e:	f7fe fb01 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	330e      	adds	r3, #14
 8006866:	0019      	movs	r1, r3
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	2204      	movs	r2, #4
 800686e:	0018      	movs	r0, r3
 8006870:	f7fe faf8 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	330a      	adds	r3, #10
 8006878:	0019      	movs	r1, r3
 800687a:	23a0      	movs	r3, #160	; 0xa0
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	2204      	movs	r2, #4
 8006880:	0018      	movs	r0, r3
 8006882:	f7fe faef 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	1d99      	adds	r1, r3, #6
 800688a:	23f0      	movs	r3, #240	; 0xf0
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	2204      	movs	r2, #4
 8006890:	0018      	movs	r0, r3
 8006892:	f7fe fae7 	bl	8004e64 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7c9a      	ldrb	r2, [r3, #18]
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <wizchip_setnetinfo+0x7c>)
 800689c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7cda      	ldrb	r2, [r3, #19]
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <wizchip_setnetinfo+0x7c>)
 80068a4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7d1a      	ldrb	r2, [r3, #20]
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <wizchip_setnetinfo+0x7c>)
 80068ac:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7d5a      	ldrb	r2, [r3, #21]
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <wizchip_setnetinfo+0x7c>)
 80068b4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	7d9a      	ldrb	r2, [r3, #22]
 80068ba:	4b04      	ldr	r3, [pc, #16]	; (80068cc <wizchip_setnetinfo+0x80>)
 80068bc:	701a      	strb	r2, [r3, #0]
}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b002      	add	sp, #8
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	2000025c 	.word	0x2000025c
 80068cc:	20000260 	.word	0x20000260

080068d0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	2390      	movs	r3, #144	; 0x90
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	2206      	movs	r2, #6
 80068e0:	0018      	movs	r0, r3
 80068e2:	f7fe fa51 	bl	8004d88 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	330e      	adds	r3, #14
 80068ea:	0019      	movs	r1, r3
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	2204      	movs	r2, #4
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fa48 	bl	8004d88 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	330a      	adds	r3, #10
 80068fc:	0019      	movs	r1, r3
 80068fe:	23a0      	movs	r3, #160	; 0xa0
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	2204      	movs	r2, #4
 8006904:	0018      	movs	r0, r3
 8006906:	f7fe fa3f 	bl	8004d88 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	1d99      	adds	r1, r3, #6
 800690e:	23f0      	movs	r3, #240	; 0xf0
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	2204      	movs	r2, #4
 8006914:	0018      	movs	r0, r3
 8006916:	f7fe fa37 	bl	8004d88 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800691a:	4b0c      	ldr	r3, [pc, #48]	; (800694c <wizchip_getnetinfo+0x7c>)
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <wizchip_getnetinfo+0x7c>)
 8006924:	785a      	ldrb	r2, [r3, #1]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800692a:	4b08      	ldr	r3, [pc, #32]	; (800694c <wizchip_getnetinfo+0x7c>)
 800692c:	789a      	ldrb	r2, [r3, #2]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006932:	4b06      	ldr	r3, [pc, #24]	; (800694c <wizchip_getnetinfo+0x7c>)
 8006934:	78da      	ldrb	r2, [r3, #3]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <wizchip_getnetinfo+0x80>)
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	759a      	strb	r2, [r3, #22]
}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	46bd      	mov	sp, r7
 8006946:	b002      	add	sp, #8
 8006948:	bd80      	pop	{r7, pc}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	2000025c 	.word	0x2000025c
 8006950:	20000260 	.word	0x20000260

08006954 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006954:	b5b0      	push	{r4, r5, r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	0002      	movs	r2, r0
 800695c:	1dfb      	adds	r3, r7, #7
 800695e:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 8006960:	230f      	movs	r3, #15
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006968:	1dfb      	adds	r3, r7, #7
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	223a      	movs	r2, #58	; 0x3a
 800696e:	4393      	bics	r3, r2
 8006970:	d002      	beq.n	8006978 <wizchip_setnetmode+0x24>
 8006972:	2301      	movs	r3, #1
 8006974:	425b      	negs	r3, r3
 8006976:	e015      	b.n	80069a4 <wizchip_setnetmode+0x50>
#endif      
   tmp = getMR();
 8006978:	250f      	movs	r5, #15
 800697a:	197c      	adds	r4, r7, r5
 800697c:	2000      	movs	r0, #0
 800697e:	f7fe f95b 	bl	8004c38 <WIZCHIP_READ>
 8006982:	0003      	movs	r3, r0
 8006984:	7023      	strb	r3, [r4, #0]
   tmp |= (uint8_t)netmode;
 8006986:	0028      	movs	r0, r5
 8006988:	183b      	adds	r3, r7, r0
 800698a:	1839      	adds	r1, r7, r0
 800698c:	1dfa      	adds	r2, r7, #7
 800698e:	7809      	ldrb	r1, [r1, #0]
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	701a      	strb	r2, [r3, #0]
   setMR(tmp);
 8006996:	183b      	adds	r3, r7, r0
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	0019      	movs	r1, r3
 800699c:	2000      	movs	r0, #0
 800699e:	f7fe f99d 	bl	8004cdc <WIZCHIP_WRITE>
   return 0;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	0018      	movs	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b004      	add	sp, #16
 80069aa:	bdb0      	pop	{r4, r5, r7, pc}

080069ac <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80069b0:	2000      	movs	r0, #0
 80069b2:	f7fe f941 	bl	8004c38 <WIZCHIP_READ>
 80069b6:	0003      	movs	r3, r0
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	23d8      	movs	r3, #216	; 0xd8
 80069cc:	015b      	lsls	r3, r3, #5
 80069ce:	0011      	movs	r1, r2
 80069d0:	0018      	movs	r0, r3
 80069d2:	f7fe f983 	bl	8004cdc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	885b      	ldrh	r3, [r3, #2]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	b29b      	uxth	r3, r3
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	23c8      	movs	r3, #200	; 0xc8
 80069e2:	015b      	lsls	r3, r3, #5
 80069e4:	0011      	movs	r1, r2
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7fe f978 	bl	8004cdc <WIZCHIP_WRITE>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	885b      	ldrh	r3, [r3, #2]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	23d0      	movs	r3, #208	; 0xd0
 80069f4:	015b      	lsls	r3, r3, #5
 80069f6:	0011      	movs	r1, r2
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7fe f96f 	bl	8004cdc <WIZCHIP_WRITE>
}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b002      	add	sp, #8
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006a06:	b590      	push	{r4, r7, lr}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006a0e:	23d8      	movs	r3, #216	; 0xd8
 8006a10:	015b      	lsls	r3, r3, #5
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7fe f910 	bl	8004c38 <WIZCHIP_READ>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8006a20:	23c8      	movs	r3, #200	; 0xc8
 8006a22:	015b      	lsls	r3, r3, #5
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fe f907 	bl	8004c38 <WIZCHIP_READ>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	b29c      	uxth	r4, r3
 8006a32:	23d0      	movs	r3, #208	; 0xd0
 8006a34:	015b      	lsls	r3, r3, #5
 8006a36:	0018      	movs	r0, r3
 8006a38:	f7fe f8fe 	bl	8004c38 <WIZCHIP_READ>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	18e3      	adds	r3, r4, r3
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	805a      	strh	r2, [r3, #2]
}
 8006a48:	46c0      	nop			; (mov r8, r8)
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b003      	add	sp, #12
 8006a4e:	bd90      	pop	{r4, r7, pc}

08006a50 <__errno>:
 8006a50:	4b01      	ldr	r3, [pc, #4]	; (8006a58 <__errno+0x8>)
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	4770      	bx	lr
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	2000003c 	.word	0x2000003c

08006a5c <__libc_init_array>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	2600      	movs	r6, #0
 8006a60:	4d0c      	ldr	r5, [pc, #48]	; (8006a94 <__libc_init_array+0x38>)
 8006a62:	4c0d      	ldr	r4, [pc, #52]	; (8006a98 <__libc_init_array+0x3c>)
 8006a64:	1b64      	subs	r4, r4, r5
 8006a66:	10a4      	asrs	r4, r4, #2
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	d109      	bne.n	8006a80 <__libc_init_array+0x24>
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	f001 fa4b 	bl	8007f08 <_init>
 8006a72:	4d0a      	ldr	r5, [pc, #40]	; (8006a9c <__libc_init_array+0x40>)
 8006a74:	4c0a      	ldr	r4, [pc, #40]	; (8006aa0 <__libc_init_array+0x44>)
 8006a76:	1b64      	subs	r4, r4, r5
 8006a78:	10a4      	asrs	r4, r4, #2
 8006a7a:	42a6      	cmp	r6, r4
 8006a7c:	d105      	bne.n	8006a8a <__libc_init_array+0x2e>
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	00b3      	lsls	r3, r6, #2
 8006a82:	58eb      	ldr	r3, [r5, r3]
 8006a84:	4798      	blx	r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7ee      	b.n	8006a68 <__libc_init_array+0xc>
 8006a8a:	00b3      	lsls	r3, r6, #2
 8006a8c:	58eb      	ldr	r3, [r5, r3]
 8006a8e:	4798      	blx	r3
 8006a90:	3601      	adds	r6, #1
 8006a92:	e7f2      	b.n	8006a7a <__libc_init_array+0x1e>
 8006a94:	0800840c 	.word	0x0800840c
 8006a98:	0800840c 	.word	0x0800840c
 8006a9c:	0800840c 	.word	0x0800840c
 8006aa0:	08008410 	.word	0x08008410

08006aa4 <memcpy>:
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	b510      	push	{r4, lr}
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d100      	bne.n	8006aae <memcpy+0xa>
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	5ccc      	ldrb	r4, [r1, r3]
 8006ab0:	54c4      	strb	r4, [r0, r3]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	e7f8      	b.n	8006aa8 <memcpy+0x4>

08006ab6 <memset>:
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	1882      	adds	r2, r0, r2
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d100      	bne.n	8006ac0 <memset+0xa>
 8006abe:	4770      	bx	lr
 8006ac0:	7019      	strb	r1, [r3, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	e7f9      	b.n	8006aba <memset+0x4>
	...

08006ac8 <iprintf>:
 8006ac8:	b40f      	push	{r0, r1, r2, r3}
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <iprintf+0x30>)
 8006acc:	b513      	push	{r0, r1, r4, lr}
 8006ace:	681c      	ldr	r4, [r3, #0]
 8006ad0:	2c00      	cmp	r4, #0
 8006ad2:	d005      	beq.n	8006ae0 <iprintf+0x18>
 8006ad4:	69a3      	ldr	r3, [r4, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <iprintf+0x18>
 8006ada:	0020      	movs	r0, r4
 8006adc:	f000 faa6 	bl	800702c <__sinit>
 8006ae0:	ab05      	add	r3, sp, #20
 8006ae2:	0020      	movs	r0, r4
 8006ae4:	9a04      	ldr	r2, [sp, #16]
 8006ae6:	68a1      	ldr	r1, [r4, #8]
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	f000 fe1b 	bl	8007724 <_vfiprintf_r>
 8006aee:	bc16      	pop	{r1, r2, r4}
 8006af0:	bc08      	pop	{r3}
 8006af2:	b004      	add	sp, #16
 8006af4:	4718      	bx	r3
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	2000003c 	.word	0x2000003c

08006afc <_puts_r>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	0005      	movs	r5, r0
 8006b00:	000e      	movs	r6, r1
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d004      	beq.n	8006b10 <_puts_r+0x14>
 8006b06:	6983      	ldr	r3, [r0, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <_puts_r+0x14>
 8006b0c:	f000 fa8e 	bl	800702c <__sinit>
 8006b10:	69ab      	ldr	r3, [r5, #24]
 8006b12:	68ac      	ldr	r4, [r5, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <_puts_r+0x22>
 8006b18:	0028      	movs	r0, r5
 8006b1a:	f000 fa87 	bl	800702c <__sinit>
 8006b1e:	4b2d      	ldr	r3, [pc, #180]	; (8006bd4 <_puts_r+0xd8>)
 8006b20:	429c      	cmp	r4, r3
 8006b22:	d122      	bne.n	8006b6a <_puts_r+0x6e>
 8006b24:	686c      	ldr	r4, [r5, #4]
 8006b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b28:	07db      	lsls	r3, r3, #31
 8006b2a:	d405      	bmi.n	8006b38 <_puts_r+0x3c>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	059b      	lsls	r3, r3, #22
 8006b30:	d402      	bmi.n	8006b38 <_puts_r+0x3c>
 8006b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b34:	f000 fb1b 	bl	800716e <__retarget_lock_acquire_recursive>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	071b      	lsls	r3, r3, #28
 8006b3c:	d502      	bpl.n	8006b44 <_puts_r+0x48>
 8006b3e:	6923      	ldr	r3, [r4, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d129      	bne.n	8006b98 <_puts_r+0x9c>
 8006b44:	0021      	movs	r1, r4
 8006b46:	0028      	movs	r0, r5
 8006b48:	f000 f8ca 	bl	8006ce0 <__swsetup_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d023      	beq.n	8006b98 <_puts_r+0x9c>
 8006b50:	2501      	movs	r5, #1
 8006b52:	426d      	negs	r5, r5
 8006b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b56:	07db      	lsls	r3, r3, #31
 8006b58:	d405      	bmi.n	8006b66 <_puts_r+0x6a>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	059b      	lsls	r3, r3, #22
 8006b5e:	d402      	bmi.n	8006b66 <_puts_r+0x6a>
 8006b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b62:	f000 fb05 	bl	8007170 <__retarget_lock_release_recursive>
 8006b66:	0028      	movs	r0, r5
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <_puts_r+0xdc>)
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	d101      	bne.n	8006b74 <_puts_r+0x78>
 8006b70:	68ac      	ldr	r4, [r5, #8]
 8006b72:	e7d8      	b.n	8006b26 <_puts_r+0x2a>
 8006b74:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <_puts_r+0xe0>)
 8006b76:	429c      	cmp	r4, r3
 8006b78:	d1d5      	bne.n	8006b26 <_puts_r+0x2a>
 8006b7a:	68ec      	ldr	r4, [r5, #12]
 8006b7c:	e7d3      	b.n	8006b26 <_puts_r+0x2a>
 8006b7e:	3601      	adds	r6, #1
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da04      	bge.n	8006b90 <_puts_r+0x94>
 8006b86:	69a2      	ldr	r2, [r4, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	dc16      	bgt.n	8006bba <_puts_r+0xbe>
 8006b8c:	290a      	cmp	r1, #10
 8006b8e:	d014      	beq.n	8006bba <_puts_r+0xbe>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	7019      	strb	r1, [r3, #0]
 8006b98:	68a3      	ldr	r3, [r4, #8]
 8006b9a:	7831      	ldrb	r1, [r6, #0]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	d1ed      	bne.n	8006b7e <_puts_r+0x82>
 8006ba2:	60a3      	str	r3, [r4, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da0f      	bge.n	8006bc8 <_puts_r+0xcc>
 8006ba8:	0028      	movs	r0, r5
 8006baa:	0022      	movs	r2, r4
 8006bac:	310a      	adds	r1, #10
 8006bae:	f000 f841 	bl	8006c34 <__swbuf_r>
 8006bb2:	250a      	movs	r5, #10
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d1cd      	bne.n	8006b54 <_puts_r+0x58>
 8006bb8:	e7ca      	b.n	8006b50 <_puts_r+0x54>
 8006bba:	0022      	movs	r2, r4
 8006bbc:	0028      	movs	r0, r5
 8006bbe:	f000 f839 	bl	8006c34 <__swbuf_r>
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	d1e8      	bne.n	8006b98 <_puts_r+0x9c>
 8006bc6:	e7c3      	b.n	8006b50 <_puts_r+0x54>
 8006bc8:	250a      	movs	r5, #10
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	6022      	str	r2, [r4, #0]
 8006bd0:	701d      	strb	r5, [r3, #0]
 8006bd2:	e7bf      	b.n	8006b54 <_puts_r+0x58>
 8006bd4:	08008398 	.word	0x08008398
 8006bd8:	080083b8 	.word	0x080083b8
 8006bdc:	08008378 	.word	0x08008378

08006be0 <puts>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <puts+0x10>)
 8006be4:	0001      	movs	r1, r0
 8006be6:	6818      	ldr	r0, [r3, #0]
 8006be8:	f7ff ff88 	bl	8006afc <_puts_r>
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	2000003c 	.word	0x2000003c

08006bf4 <siprintf>:
 8006bf4:	b40e      	push	{r1, r2, r3}
 8006bf6:	b500      	push	{lr}
 8006bf8:	490b      	ldr	r1, [pc, #44]	; (8006c28 <siprintf+0x34>)
 8006bfa:	b09c      	sub	sp, #112	; 0x70
 8006bfc:	ab1d      	add	r3, sp, #116	; 0x74
 8006bfe:	9002      	str	r0, [sp, #8]
 8006c00:	9006      	str	r0, [sp, #24]
 8006c02:	9107      	str	r1, [sp, #28]
 8006c04:	9104      	str	r1, [sp, #16]
 8006c06:	4809      	ldr	r0, [pc, #36]	; (8006c2c <siprintf+0x38>)
 8006c08:	4909      	ldr	r1, [pc, #36]	; (8006c30 <siprintf+0x3c>)
 8006c0a:	cb04      	ldmia	r3!, {r2}
 8006c0c:	9105      	str	r1, [sp, #20]
 8006c0e:	6800      	ldr	r0, [r0, #0]
 8006c10:	a902      	add	r1, sp, #8
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	f000 fc5e 	bl	80074d4 <_svfiprintf_r>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9a02      	ldr	r2, [sp, #8]
 8006c1c:	7013      	strb	r3, [r2, #0]
 8006c1e:	b01c      	add	sp, #112	; 0x70
 8006c20:	bc08      	pop	{r3}
 8006c22:	b003      	add	sp, #12
 8006c24:	4718      	bx	r3
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	7fffffff 	.word	0x7fffffff
 8006c2c:	2000003c 	.word	0x2000003c
 8006c30:	ffff0208 	.word	0xffff0208

08006c34 <__swbuf_r>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	0005      	movs	r5, r0
 8006c38:	000e      	movs	r6, r1
 8006c3a:	0014      	movs	r4, r2
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d004      	beq.n	8006c4a <__swbuf_r+0x16>
 8006c40:	6983      	ldr	r3, [r0, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <__swbuf_r+0x16>
 8006c46:	f000 f9f1 	bl	800702c <__sinit>
 8006c4a:	4b22      	ldr	r3, [pc, #136]	; (8006cd4 <__swbuf_r+0xa0>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	d12e      	bne.n	8006cae <__swbuf_r+0x7a>
 8006c50:	686c      	ldr	r4, [r5, #4]
 8006c52:	69a3      	ldr	r3, [r4, #24]
 8006c54:	60a3      	str	r3, [r4, #8]
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	071b      	lsls	r3, r3, #28
 8006c5a:	d532      	bpl.n	8006cc2 <__swbuf_r+0x8e>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d02f      	beq.n	8006cc2 <__swbuf_r+0x8e>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	6922      	ldr	r2, [r4, #16]
 8006c66:	b2f7      	uxtb	r7, r6
 8006c68:	1a98      	subs	r0, r3, r2
 8006c6a:	6963      	ldr	r3, [r4, #20]
 8006c6c:	b2f6      	uxtb	r6, r6
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	dc05      	bgt.n	8006c7e <__swbuf_r+0x4a>
 8006c72:	0021      	movs	r1, r4
 8006c74:	0028      	movs	r0, r5
 8006c76:	f000 f937 	bl	8006ee8 <_fflush_r>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d127      	bne.n	8006cce <__swbuf_r+0x9a>
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	3001      	adds	r0, #1
 8006c82:	3b01      	subs	r3, #1
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	6022      	str	r2, [r4, #0]
 8006c8c:	701f      	strb	r7, [r3, #0]
 8006c8e:	6963      	ldr	r3, [r4, #20]
 8006c90:	4283      	cmp	r3, r0
 8006c92:	d004      	beq.n	8006c9e <__swbuf_r+0x6a>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	07db      	lsls	r3, r3, #31
 8006c98:	d507      	bpl.n	8006caa <__swbuf_r+0x76>
 8006c9a:	2e0a      	cmp	r6, #10
 8006c9c:	d105      	bne.n	8006caa <__swbuf_r+0x76>
 8006c9e:	0021      	movs	r1, r4
 8006ca0:	0028      	movs	r0, r5
 8006ca2:	f000 f921 	bl	8006ee8 <_fflush_r>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d111      	bne.n	8006cce <__swbuf_r+0x9a>
 8006caa:	0030      	movs	r0, r6
 8006cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <__swbuf_r+0xa4>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d101      	bne.n	8006cb8 <__swbuf_r+0x84>
 8006cb4:	68ac      	ldr	r4, [r5, #8]
 8006cb6:	e7cc      	b.n	8006c52 <__swbuf_r+0x1e>
 8006cb8:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <__swbuf_r+0xa8>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d1c9      	bne.n	8006c52 <__swbuf_r+0x1e>
 8006cbe:	68ec      	ldr	r4, [r5, #12]
 8006cc0:	e7c7      	b.n	8006c52 <__swbuf_r+0x1e>
 8006cc2:	0021      	movs	r1, r4
 8006cc4:	0028      	movs	r0, r5
 8006cc6:	f000 f80b 	bl	8006ce0 <__swsetup_r>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d0c9      	beq.n	8006c62 <__swbuf_r+0x2e>
 8006cce:	2601      	movs	r6, #1
 8006cd0:	4276      	negs	r6, r6
 8006cd2:	e7ea      	b.n	8006caa <__swbuf_r+0x76>
 8006cd4:	08008398 	.word	0x08008398
 8006cd8:	080083b8 	.word	0x080083b8
 8006cdc:	08008378 	.word	0x08008378

08006ce0 <__swsetup_r>:
 8006ce0:	4b37      	ldr	r3, [pc, #220]	; (8006dc0 <__swsetup_r+0xe0>)
 8006ce2:	b570      	push	{r4, r5, r6, lr}
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	0006      	movs	r6, r0
 8006ce8:	000c      	movs	r4, r1
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	d005      	beq.n	8006cfa <__swsetup_r+0x1a>
 8006cee:	69ab      	ldr	r3, [r5, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <__swsetup_r+0x1a>
 8006cf4:	0028      	movs	r0, r5
 8006cf6:	f000 f999 	bl	800702c <__sinit>
 8006cfa:	4b32      	ldr	r3, [pc, #200]	; (8006dc4 <__swsetup_r+0xe4>)
 8006cfc:	429c      	cmp	r4, r3
 8006cfe:	d10f      	bne.n	8006d20 <__swsetup_r+0x40>
 8006d00:	686c      	ldr	r4, [r5, #4]
 8006d02:	230c      	movs	r3, #12
 8006d04:	5ee2      	ldrsh	r2, [r4, r3]
 8006d06:	b293      	uxth	r3, r2
 8006d08:	0711      	lsls	r1, r2, #28
 8006d0a:	d42d      	bmi.n	8006d68 <__swsetup_r+0x88>
 8006d0c:	06d9      	lsls	r1, r3, #27
 8006d0e:	d411      	bmi.n	8006d34 <__swsetup_r+0x54>
 8006d10:	2309      	movs	r3, #9
 8006d12:	2001      	movs	r0, #1
 8006d14:	6033      	str	r3, [r6, #0]
 8006d16:	3337      	adds	r3, #55	; 0x37
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	4240      	negs	r0, r0
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	4b29      	ldr	r3, [pc, #164]	; (8006dc8 <__swsetup_r+0xe8>)
 8006d22:	429c      	cmp	r4, r3
 8006d24:	d101      	bne.n	8006d2a <__swsetup_r+0x4a>
 8006d26:	68ac      	ldr	r4, [r5, #8]
 8006d28:	e7eb      	b.n	8006d02 <__swsetup_r+0x22>
 8006d2a:	4b28      	ldr	r3, [pc, #160]	; (8006dcc <__swsetup_r+0xec>)
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	d1e8      	bne.n	8006d02 <__swsetup_r+0x22>
 8006d30:	68ec      	ldr	r4, [r5, #12]
 8006d32:	e7e6      	b.n	8006d02 <__swsetup_r+0x22>
 8006d34:	075b      	lsls	r3, r3, #29
 8006d36:	d513      	bpl.n	8006d60 <__swsetup_r+0x80>
 8006d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	d008      	beq.n	8006d50 <__swsetup_r+0x70>
 8006d3e:	0023      	movs	r3, r4
 8006d40:	3344      	adds	r3, #68	; 0x44
 8006d42:	4299      	cmp	r1, r3
 8006d44:	d002      	beq.n	8006d4c <__swsetup_r+0x6c>
 8006d46:	0030      	movs	r0, r6
 8006d48:	f000 fa80 	bl	800724c <_free_r>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	4393      	bics	r3, r2
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6063      	str	r3, [r4, #4]
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	2308      	movs	r3, #8
 8006d62:	89a2      	ldrh	r2, [r4, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <__swsetup_r+0xa6>
 8006d6e:	21a0      	movs	r1, #160	; 0xa0
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	0089      	lsls	r1, r1, #2
 8006d76:	0092      	lsls	r2, r2, #2
 8006d78:	400b      	ands	r3, r1
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <__swsetup_r+0xa6>
 8006d7e:	0021      	movs	r1, r4
 8006d80:	0030      	movs	r0, r6
 8006d82:	f000 fa1f 	bl	80071c4 <__smakebuf_r>
 8006d86:	220c      	movs	r2, #12
 8006d88:	5ea3      	ldrsh	r3, [r4, r2]
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	001a      	movs	r2, r3
 8006d8e:	b299      	uxth	r1, r3
 8006d90:	4002      	ands	r2, r0
 8006d92:	4203      	tst	r3, r0
 8006d94:	d00f      	beq.n	8006db6 <__swsetup_r+0xd6>
 8006d96:	2200      	movs	r2, #0
 8006d98:	60a2      	str	r2, [r4, #8]
 8006d9a:	6962      	ldr	r2, [r4, #20]
 8006d9c:	4252      	negs	r2, r2
 8006d9e:	61a2      	str	r2, [r4, #24]
 8006da0:	2000      	movs	r0, #0
 8006da2:	6922      	ldr	r2, [r4, #16]
 8006da4:	4282      	cmp	r2, r0
 8006da6:	d1ba      	bne.n	8006d1e <__swsetup_r+0x3e>
 8006da8:	060a      	lsls	r2, r1, #24
 8006daa:	d5b8      	bpl.n	8006d1e <__swsetup_r+0x3e>
 8006dac:	2240      	movs	r2, #64	; 0x40
 8006dae:	4313      	orrs	r3, r2
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	3801      	subs	r0, #1
 8006db4:	e7b3      	b.n	8006d1e <__swsetup_r+0x3e>
 8006db6:	0788      	lsls	r0, r1, #30
 8006db8:	d400      	bmi.n	8006dbc <__swsetup_r+0xdc>
 8006dba:	6962      	ldr	r2, [r4, #20]
 8006dbc:	60a2      	str	r2, [r4, #8]
 8006dbe:	e7ef      	b.n	8006da0 <__swsetup_r+0xc0>
 8006dc0:	2000003c 	.word	0x2000003c
 8006dc4:	08008398 	.word	0x08008398
 8006dc8:	080083b8 	.word	0x080083b8
 8006dcc:	08008378 	.word	0x08008378

08006dd0 <__sflush_r>:
 8006dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd2:	898b      	ldrh	r3, [r1, #12]
 8006dd4:	0005      	movs	r5, r0
 8006dd6:	000c      	movs	r4, r1
 8006dd8:	071a      	lsls	r2, r3, #28
 8006dda:	d45f      	bmi.n	8006e9c <__sflush_r+0xcc>
 8006ddc:	684a      	ldr	r2, [r1, #4]
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	dc04      	bgt.n	8006dec <__sflush_r+0x1c>
 8006de2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	dc01      	bgt.n	8006dec <__sflush_r+0x1c>
 8006de8:	2000      	movs	r0, #0
 8006dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006dee:	2f00      	cmp	r7, #0
 8006df0:	d0fa      	beq.n	8006de8 <__sflush_r+0x18>
 8006df2:	2200      	movs	r2, #0
 8006df4:	2180      	movs	r1, #128	; 0x80
 8006df6:	682e      	ldr	r6, [r5, #0]
 8006df8:	602a      	str	r2, [r5, #0]
 8006dfa:	001a      	movs	r2, r3
 8006dfc:	0149      	lsls	r1, r1, #5
 8006dfe:	400a      	ands	r2, r1
 8006e00:	420b      	tst	r3, r1
 8006e02:	d034      	beq.n	8006e6e <__sflush_r+0x9e>
 8006e04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	075b      	lsls	r3, r3, #29
 8006e0a:	d506      	bpl.n	8006e1a <__sflush_r+0x4a>
 8006e0c:	6863      	ldr	r3, [r4, #4]
 8006e0e:	1ac0      	subs	r0, r0, r3
 8006e10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <__sflush_r+0x4a>
 8006e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e18:	1ac0      	subs	r0, r0, r3
 8006e1a:	0002      	movs	r2, r0
 8006e1c:	6a21      	ldr	r1, [r4, #32]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	0028      	movs	r0, r5
 8006e22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006e24:	47b8      	blx	r7
 8006e26:	89a1      	ldrh	r1, [r4, #12]
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d106      	bne.n	8006e3a <__sflush_r+0x6a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	2b1d      	cmp	r3, #29
 8006e30:	d831      	bhi.n	8006e96 <__sflush_r+0xc6>
 8006e32:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <__sflush_r+0x114>)
 8006e34:	40da      	lsrs	r2, r3
 8006e36:	07d3      	lsls	r3, r2, #31
 8006e38:	d52d      	bpl.n	8006e96 <__sflush_r+0xc6>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6063      	str	r3, [r4, #4]
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	04cb      	lsls	r3, r1, #19
 8006e44:	d505      	bpl.n	8006e52 <__sflush_r+0x82>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d102      	bne.n	8006e50 <__sflush_r+0x80>
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d100      	bne.n	8006e52 <__sflush_r+0x82>
 8006e50:	6560      	str	r0, [r4, #84]	; 0x54
 8006e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e54:	602e      	str	r6, [r5, #0]
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d0c6      	beq.n	8006de8 <__sflush_r+0x18>
 8006e5a:	0023      	movs	r3, r4
 8006e5c:	3344      	adds	r3, #68	; 0x44
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	d002      	beq.n	8006e68 <__sflush_r+0x98>
 8006e62:	0028      	movs	r0, r5
 8006e64:	f000 f9f2 	bl	800724c <_free_r>
 8006e68:	2000      	movs	r0, #0
 8006e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8006e6c:	e7bd      	b.n	8006dea <__sflush_r+0x1a>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	0028      	movs	r0, r5
 8006e72:	6a21      	ldr	r1, [r4, #32]
 8006e74:	47b8      	blx	r7
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d1c5      	bne.n	8006e06 <__sflush_r+0x36>
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0c2      	beq.n	8006e06 <__sflush_r+0x36>
 8006e80:	2b1d      	cmp	r3, #29
 8006e82:	d001      	beq.n	8006e88 <__sflush_r+0xb8>
 8006e84:	2b16      	cmp	r3, #22
 8006e86:	d101      	bne.n	8006e8c <__sflush_r+0xbc>
 8006e88:	602e      	str	r6, [r5, #0]
 8006e8a:	e7ad      	b.n	8006de8 <__sflush_r+0x18>
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	89a2      	ldrh	r2, [r4, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	e7a9      	b.n	8006dea <__sflush_r+0x1a>
 8006e96:	2340      	movs	r3, #64	; 0x40
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	e7fa      	b.n	8006e92 <__sflush_r+0xc2>
 8006e9c:	690f      	ldr	r7, [r1, #16]
 8006e9e:	2f00      	cmp	r7, #0
 8006ea0:	d0a2      	beq.n	8006de8 <__sflush_r+0x18>
 8006ea2:	680a      	ldr	r2, [r1, #0]
 8006ea4:	600f      	str	r7, [r1, #0]
 8006ea6:	1bd2      	subs	r2, r2, r7
 8006ea8:	9201      	str	r2, [sp, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	079b      	lsls	r3, r3, #30
 8006eae:	d100      	bne.n	8006eb2 <__sflush_r+0xe2>
 8006eb0:	694a      	ldr	r2, [r1, #20]
 8006eb2:	60a2      	str	r2, [r4, #8]
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dc00      	bgt.n	8006ebc <__sflush_r+0xec>
 8006eba:	e795      	b.n	8006de8 <__sflush_r+0x18>
 8006ebc:	003a      	movs	r2, r7
 8006ebe:	0028      	movs	r0, r5
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	6a21      	ldr	r1, [r4, #32]
 8006ec4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ec6:	47b0      	blx	r6
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dc06      	bgt.n	8006eda <__sflush_r+0x10a>
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	2001      	movs	r0, #1
 8006ed0:	89a2      	ldrh	r2, [r4, #12]
 8006ed2:	4240      	negs	r0, r0
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	81a3      	strh	r3, [r4, #12]
 8006ed8:	e787      	b.n	8006dea <__sflush_r+0x1a>
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	183f      	adds	r7, r7, r0
 8006ede:	1a1b      	subs	r3, r3, r0
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	e7e7      	b.n	8006eb4 <__sflush_r+0xe4>
 8006ee4:	20400001 	.word	0x20400001

08006ee8 <_fflush_r>:
 8006ee8:	690b      	ldr	r3, [r1, #16]
 8006eea:	b570      	push	{r4, r5, r6, lr}
 8006eec:	0005      	movs	r5, r0
 8006eee:	000c      	movs	r4, r1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <_fflush_r+0x12>
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	0028      	movs	r0, r5
 8006ef8:	bd70      	pop	{r4, r5, r6, pc}
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d004      	beq.n	8006f08 <_fflush_r+0x20>
 8006efe:	6983      	ldr	r3, [r0, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <_fflush_r+0x20>
 8006f04:	f000 f892 	bl	800702c <__sinit>
 8006f08:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <_fflush_r+0x74>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d11b      	bne.n	8006f46 <_fflush_r+0x5e>
 8006f0e:	686c      	ldr	r4, [r5, #4]
 8006f10:	220c      	movs	r2, #12
 8006f12:	5ea3      	ldrsh	r3, [r4, r2]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0ed      	beq.n	8006ef4 <_fflush_r+0xc>
 8006f18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f1a:	07d2      	lsls	r2, r2, #31
 8006f1c:	d404      	bmi.n	8006f28 <_fflush_r+0x40>
 8006f1e:	059b      	lsls	r3, r3, #22
 8006f20:	d402      	bmi.n	8006f28 <_fflush_r+0x40>
 8006f22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f24:	f000 f923 	bl	800716e <__retarget_lock_acquire_recursive>
 8006f28:	0028      	movs	r0, r5
 8006f2a:	0021      	movs	r1, r4
 8006f2c:	f7ff ff50 	bl	8006dd0 <__sflush_r>
 8006f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f32:	0005      	movs	r5, r0
 8006f34:	07db      	lsls	r3, r3, #31
 8006f36:	d4de      	bmi.n	8006ef6 <_fflush_r+0xe>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	059b      	lsls	r3, r3, #22
 8006f3c:	d4db      	bmi.n	8006ef6 <_fflush_r+0xe>
 8006f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f40:	f000 f916 	bl	8007170 <__retarget_lock_release_recursive>
 8006f44:	e7d7      	b.n	8006ef6 <_fflush_r+0xe>
 8006f46:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <_fflush_r+0x78>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	d101      	bne.n	8006f50 <_fflush_r+0x68>
 8006f4c:	68ac      	ldr	r4, [r5, #8]
 8006f4e:	e7df      	b.n	8006f10 <_fflush_r+0x28>
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <_fflush_r+0x7c>)
 8006f52:	429c      	cmp	r4, r3
 8006f54:	d1dc      	bne.n	8006f10 <_fflush_r+0x28>
 8006f56:	68ec      	ldr	r4, [r5, #12]
 8006f58:	e7da      	b.n	8006f10 <_fflush_r+0x28>
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	08008398 	.word	0x08008398
 8006f60:	080083b8 	.word	0x080083b8
 8006f64:	08008378 	.word	0x08008378

08006f68 <std>:
 8006f68:	2300      	movs	r3, #0
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	0004      	movs	r4, r0
 8006f6e:	6003      	str	r3, [r0, #0]
 8006f70:	6043      	str	r3, [r0, #4]
 8006f72:	6083      	str	r3, [r0, #8]
 8006f74:	8181      	strh	r1, [r0, #12]
 8006f76:	6643      	str	r3, [r0, #100]	; 0x64
 8006f78:	0019      	movs	r1, r3
 8006f7a:	81c2      	strh	r2, [r0, #14]
 8006f7c:	6103      	str	r3, [r0, #16]
 8006f7e:	6143      	str	r3, [r0, #20]
 8006f80:	6183      	str	r3, [r0, #24]
 8006f82:	2208      	movs	r2, #8
 8006f84:	305c      	adds	r0, #92	; 0x5c
 8006f86:	f7ff fd96 	bl	8006ab6 <memset>
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <std+0x38>)
 8006f8c:	6224      	str	r4, [r4, #32]
 8006f8e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <std+0x3c>)
 8006f92:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f94:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <std+0x40>)
 8006f96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <std+0x44>)
 8006f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	08007cc1 	.word	0x08007cc1
 8006fa4:	08007ce9 	.word	0x08007ce9
 8006fa8:	08007d21 	.word	0x08007d21
 8006fac:	08007d4d 	.word	0x08007d4d

08006fb0 <_cleanup_r>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	4902      	ldr	r1, [pc, #8]	; (8006fbc <_cleanup_r+0xc>)
 8006fb4:	f000 f8ba 	bl	800712c <_fwalk_reent>
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	08006ee9 	.word	0x08006ee9

08006fc0 <__sfmoreglue>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	2568      	movs	r5, #104	; 0x68
 8006fc4:	1e4a      	subs	r2, r1, #1
 8006fc6:	4355      	muls	r5, r2
 8006fc8:	000e      	movs	r6, r1
 8006fca:	0029      	movs	r1, r5
 8006fcc:	3174      	adds	r1, #116	; 0x74
 8006fce:	f000 f9a9 	bl	8007324 <_malloc_r>
 8006fd2:	1e04      	subs	r4, r0, #0
 8006fd4:	d008      	beq.n	8006fe8 <__sfmoreglue+0x28>
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	002a      	movs	r2, r5
 8006fda:	6001      	str	r1, [r0, #0]
 8006fdc:	6046      	str	r6, [r0, #4]
 8006fde:	300c      	adds	r0, #12
 8006fe0:	60a0      	str	r0, [r4, #8]
 8006fe2:	3268      	adds	r2, #104	; 0x68
 8006fe4:	f7ff fd67 	bl	8006ab6 <memset>
 8006fe8:	0020      	movs	r0, r4
 8006fea:	bd70      	pop	{r4, r5, r6, pc}

08006fec <__sfp_lock_acquire>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	4802      	ldr	r0, [pc, #8]	; (8006ff8 <__sfp_lock_acquire+0xc>)
 8006ff0:	f000 f8bd 	bl	800716e <__retarget_lock_acquire_recursive>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	20000262 	.word	0x20000262

08006ffc <__sfp_lock_release>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	4802      	ldr	r0, [pc, #8]	; (8007008 <__sfp_lock_release+0xc>)
 8007000:	f000 f8b6 	bl	8007170 <__retarget_lock_release_recursive>
 8007004:	bd10      	pop	{r4, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	20000262 	.word	0x20000262

0800700c <__sinit_lock_acquire>:
 800700c:	b510      	push	{r4, lr}
 800700e:	4802      	ldr	r0, [pc, #8]	; (8007018 <__sinit_lock_acquire+0xc>)
 8007010:	f000 f8ad 	bl	800716e <__retarget_lock_acquire_recursive>
 8007014:	bd10      	pop	{r4, pc}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	20000263 	.word	0x20000263

0800701c <__sinit_lock_release>:
 800701c:	b510      	push	{r4, lr}
 800701e:	4802      	ldr	r0, [pc, #8]	; (8007028 <__sinit_lock_release+0xc>)
 8007020:	f000 f8a6 	bl	8007170 <__retarget_lock_release_recursive>
 8007024:	bd10      	pop	{r4, pc}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	20000263 	.word	0x20000263

0800702c <__sinit>:
 800702c:	b513      	push	{r0, r1, r4, lr}
 800702e:	0004      	movs	r4, r0
 8007030:	f7ff ffec 	bl	800700c <__sinit_lock_acquire>
 8007034:	69a3      	ldr	r3, [r4, #24]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <__sinit+0x14>
 800703a:	f7ff ffef 	bl	800701c <__sinit_lock_release>
 800703e:	bd13      	pop	{r0, r1, r4, pc}
 8007040:	64a3      	str	r3, [r4, #72]	; 0x48
 8007042:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007044:	6523      	str	r3, [r4, #80]	; 0x50
 8007046:	4b13      	ldr	r3, [pc, #76]	; (8007094 <__sinit+0x68>)
 8007048:	4a13      	ldr	r2, [pc, #76]	; (8007098 <__sinit+0x6c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	62a2      	str	r2, [r4, #40]	; 0x28
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	42a3      	cmp	r3, r4
 8007052:	d101      	bne.n	8007058 <__sinit+0x2c>
 8007054:	2301      	movs	r3, #1
 8007056:	61a3      	str	r3, [r4, #24]
 8007058:	0020      	movs	r0, r4
 800705a:	f000 f81f 	bl	800709c <__sfp>
 800705e:	6060      	str	r0, [r4, #4]
 8007060:	0020      	movs	r0, r4
 8007062:	f000 f81b 	bl	800709c <__sfp>
 8007066:	60a0      	str	r0, [r4, #8]
 8007068:	0020      	movs	r0, r4
 800706a:	f000 f817 	bl	800709c <__sfp>
 800706e:	2200      	movs	r2, #0
 8007070:	2104      	movs	r1, #4
 8007072:	60e0      	str	r0, [r4, #12]
 8007074:	6860      	ldr	r0, [r4, #4]
 8007076:	f7ff ff77 	bl	8006f68 <std>
 800707a:	2201      	movs	r2, #1
 800707c:	2109      	movs	r1, #9
 800707e:	68a0      	ldr	r0, [r4, #8]
 8007080:	f7ff ff72 	bl	8006f68 <std>
 8007084:	2202      	movs	r2, #2
 8007086:	2112      	movs	r1, #18
 8007088:	68e0      	ldr	r0, [r4, #12]
 800708a:	f7ff ff6d 	bl	8006f68 <std>
 800708e:	2301      	movs	r3, #1
 8007090:	61a3      	str	r3, [r4, #24]
 8007092:	e7d2      	b.n	800703a <__sinit+0xe>
 8007094:	08008374 	.word	0x08008374
 8007098:	08006fb1 	.word	0x08006fb1

0800709c <__sfp>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	0007      	movs	r7, r0
 80070a0:	f7ff ffa4 	bl	8006fec <__sfp_lock_acquire>
 80070a4:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <__sfp+0x88>)
 80070a6:	681e      	ldr	r6, [r3, #0]
 80070a8:	69b3      	ldr	r3, [r6, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <__sfp+0x18>
 80070ae:	0030      	movs	r0, r6
 80070b0:	f7ff ffbc 	bl	800702c <__sinit>
 80070b4:	3648      	adds	r6, #72	; 0x48
 80070b6:	68b4      	ldr	r4, [r6, #8]
 80070b8:	6873      	ldr	r3, [r6, #4]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	d504      	bpl.n	80070c8 <__sfp+0x2c>
 80070be:	6833      	ldr	r3, [r6, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d022      	beq.n	800710a <__sfp+0x6e>
 80070c4:	6836      	ldr	r6, [r6, #0]
 80070c6:	e7f6      	b.n	80070b6 <__sfp+0x1a>
 80070c8:	220c      	movs	r2, #12
 80070ca:	5ea5      	ldrsh	r5, [r4, r2]
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	d11a      	bne.n	8007106 <__sfp+0x6a>
 80070d0:	0020      	movs	r0, r4
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <__sfp+0x8c>)
 80070d4:	3058      	adds	r0, #88	; 0x58
 80070d6:	60e3      	str	r3, [r4, #12]
 80070d8:	6665      	str	r5, [r4, #100]	; 0x64
 80070da:	f000 f847 	bl	800716c <__retarget_lock_init_recursive>
 80070de:	f7ff ff8d 	bl	8006ffc <__sfp_lock_release>
 80070e2:	0020      	movs	r0, r4
 80070e4:	2208      	movs	r2, #8
 80070e6:	0029      	movs	r1, r5
 80070e8:	6025      	str	r5, [r4, #0]
 80070ea:	60a5      	str	r5, [r4, #8]
 80070ec:	6065      	str	r5, [r4, #4]
 80070ee:	6125      	str	r5, [r4, #16]
 80070f0:	6165      	str	r5, [r4, #20]
 80070f2:	61a5      	str	r5, [r4, #24]
 80070f4:	305c      	adds	r0, #92	; 0x5c
 80070f6:	f7ff fcde 	bl	8006ab6 <memset>
 80070fa:	6365      	str	r5, [r4, #52]	; 0x34
 80070fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80070fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8007100:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007102:	0020      	movs	r0, r4
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007106:	3468      	adds	r4, #104	; 0x68
 8007108:	e7d7      	b.n	80070ba <__sfp+0x1e>
 800710a:	2104      	movs	r1, #4
 800710c:	0038      	movs	r0, r7
 800710e:	f7ff ff57 	bl	8006fc0 <__sfmoreglue>
 8007112:	1e04      	subs	r4, r0, #0
 8007114:	6030      	str	r0, [r6, #0]
 8007116:	d1d5      	bne.n	80070c4 <__sfp+0x28>
 8007118:	f7ff ff70 	bl	8006ffc <__sfp_lock_release>
 800711c:	230c      	movs	r3, #12
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	e7ef      	b.n	8007102 <__sfp+0x66>
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	08008374 	.word	0x08008374
 8007128:	ffff0001 	.word	0xffff0001

0800712c <_fwalk_reent>:
 800712c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800712e:	0004      	movs	r4, r0
 8007130:	0006      	movs	r6, r0
 8007132:	2700      	movs	r7, #0
 8007134:	9101      	str	r1, [sp, #4]
 8007136:	3448      	adds	r4, #72	; 0x48
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	68a5      	ldr	r5, [r4, #8]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	3b01      	subs	r3, #1
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	d504      	bpl.n	8007150 <_fwalk_reent+0x24>
 8007146:	6824      	ldr	r4, [r4, #0]
 8007148:	2c00      	cmp	r4, #0
 800714a:	d1f5      	bne.n	8007138 <_fwalk_reent+0xc>
 800714c:	0038      	movs	r0, r7
 800714e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007150:	89ab      	ldrh	r3, [r5, #12]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d908      	bls.n	8007168 <_fwalk_reent+0x3c>
 8007156:	220e      	movs	r2, #14
 8007158:	5eab      	ldrsh	r3, [r5, r2]
 800715a:	3301      	adds	r3, #1
 800715c:	d004      	beq.n	8007168 <_fwalk_reent+0x3c>
 800715e:	0029      	movs	r1, r5
 8007160:	0030      	movs	r0, r6
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	4798      	blx	r3
 8007166:	4307      	orrs	r7, r0
 8007168:	3568      	adds	r5, #104	; 0x68
 800716a:	e7e8      	b.n	800713e <_fwalk_reent+0x12>

0800716c <__retarget_lock_init_recursive>:
 800716c:	4770      	bx	lr

0800716e <__retarget_lock_acquire_recursive>:
 800716e:	4770      	bx	lr

08007170 <__retarget_lock_release_recursive>:
 8007170:	4770      	bx	lr
	...

08007174 <__swhatbuf_r>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	000e      	movs	r6, r1
 8007178:	001d      	movs	r5, r3
 800717a:	230e      	movs	r3, #14
 800717c:	5ec9      	ldrsh	r1, [r1, r3]
 800717e:	0014      	movs	r4, r2
 8007180:	b096      	sub	sp, #88	; 0x58
 8007182:	2900      	cmp	r1, #0
 8007184:	da08      	bge.n	8007198 <__swhatbuf_r+0x24>
 8007186:	220c      	movs	r2, #12
 8007188:	5eb3      	ldrsh	r3, [r6, r2]
 800718a:	2200      	movs	r2, #0
 800718c:	602a      	str	r2, [r5, #0]
 800718e:	061b      	lsls	r3, r3, #24
 8007190:	d411      	bmi.n	80071b6 <__swhatbuf_r+0x42>
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	e00f      	b.n	80071b8 <__swhatbuf_r+0x44>
 8007198:	466a      	mov	r2, sp
 800719a:	f000 fe03 	bl	8007da4 <_fstat_r>
 800719e:	2800      	cmp	r0, #0
 80071a0:	dbf1      	blt.n	8007186 <__swhatbuf_r+0x12>
 80071a2:	23f0      	movs	r3, #240	; 0xf0
 80071a4:	9901      	ldr	r1, [sp, #4]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	4019      	ands	r1, r3
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <__swhatbuf_r+0x4c>)
 80071ac:	18c9      	adds	r1, r1, r3
 80071ae:	424b      	negs	r3, r1
 80071b0:	4159      	adcs	r1, r3
 80071b2:	6029      	str	r1, [r5, #0]
 80071b4:	e7ed      	b.n	8007192 <__swhatbuf_r+0x1e>
 80071b6:	2340      	movs	r3, #64	; 0x40
 80071b8:	2000      	movs	r0, #0
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	b016      	add	sp, #88	; 0x58
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	ffffe000 	.word	0xffffe000

080071c4 <__smakebuf_r>:
 80071c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071c6:	2602      	movs	r6, #2
 80071c8:	898b      	ldrh	r3, [r1, #12]
 80071ca:	0005      	movs	r5, r0
 80071cc:	000c      	movs	r4, r1
 80071ce:	4233      	tst	r3, r6
 80071d0:	d006      	beq.n	80071e0 <__smakebuf_r+0x1c>
 80071d2:	0023      	movs	r3, r4
 80071d4:	3347      	adds	r3, #71	; 0x47
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	6123      	str	r3, [r4, #16]
 80071da:	2301      	movs	r3, #1
 80071dc:	6163      	str	r3, [r4, #20]
 80071de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80071e0:	466a      	mov	r2, sp
 80071e2:	ab01      	add	r3, sp, #4
 80071e4:	f7ff ffc6 	bl	8007174 <__swhatbuf_r>
 80071e8:	9900      	ldr	r1, [sp, #0]
 80071ea:	0007      	movs	r7, r0
 80071ec:	0028      	movs	r0, r5
 80071ee:	f000 f899 	bl	8007324 <_malloc_r>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d108      	bne.n	8007208 <__smakebuf_r+0x44>
 80071f6:	220c      	movs	r2, #12
 80071f8:	5ea3      	ldrsh	r3, [r4, r2]
 80071fa:	059a      	lsls	r2, r3, #22
 80071fc:	d4ef      	bmi.n	80071de <__smakebuf_r+0x1a>
 80071fe:	2203      	movs	r2, #3
 8007200:	4393      	bics	r3, r2
 8007202:	431e      	orrs	r6, r3
 8007204:	81a6      	strh	r6, [r4, #12]
 8007206:	e7e4      	b.n	80071d2 <__smakebuf_r+0xe>
 8007208:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <__smakebuf_r+0x84>)
 800720a:	62ab      	str	r3, [r5, #40]	; 0x28
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	89a2      	ldrh	r2, [r4, #12]
 8007210:	6020      	str	r0, [r4, #0]
 8007212:	4313      	orrs	r3, r2
 8007214:	81a3      	strh	r3, [r4, #12]
 8007216:	9b00      	ldr	r3, [sp, #0]
 8007218:	6120      	str	r0, [r4, #16]
 800721a:	6163      	str	r3, [r4, #20]
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00d      	beq.n	800723e <__smakebuf_r+0x7a>
 8007222:	0028      	movs	r0, r5
 8007224:	230e      	movs	r3, #14
 8007226:	5ee1      	ldrsh	r1, [r4, r3]
 8007228:	f000 fdce 	bl	8007dc8 <_isatty_r>
 800722c:	2800      	cmp	r0, #0
 800722e:	d006      	beq.n	800723e <__smakebuf_r+0x7a>
 8007230:	2203      	movs	r2, #3
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	4393      	bics	r3, r2
 8007236:	001a      	movs	r2, r3
 8007238:	2301      	movs	r3, #1
 800723a:	4313      	orrs	r3, r2
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	89a0      	ldrh	r0, [r4, #12]
 8007240:	4307      	orrs	r7, r0
 8007242:	81a7      	strh	r7, [r4, #12]
 8007244:	e7cb      	b.n	80071de <__smakebuf_r+0x1a>
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	08006fb1 	.word	0x08006fb1

0800724c <_free_r>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	0005      	movs	r5, r0
 8007250:	2900      	cmp	r1, #0
 8007252:	d010      	beq.n	8007276 <_free_r+0x2a>
 8007254:	1f0c      	subs	r4, r1, #4
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	da00      	bge.n	800725e <_free_r+0x12>
 800725c:	18e4      	adds	r4, r4, r3
 800725e:	0028      	movs	r0, r5
 8007260:	f000 fdf6 	bl	8007e50 <__malloc_lock>
 8007264:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <_free_r+0x90>)
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <_free_r+0x2c>
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	6014      	str	r4, [r2, #0]
 8007270:	0028      	movs	r0, r5
 8007272:	f000 fdf5 	bl	8007e60 <__malloc_unlock>
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	42a3      	cmp	r3, r4
 800727a:	d908      	bls.n	800728e <_free_r+0x42>
 800727c:	6821      	ldr	r1, [r4, #0]
 800727e:	1860      	adds	r0, r4, r1
 8007280:	4283      	cmp	r3, r0
 8007282:	d1f3      	bne.n	800726c <_free_r+0x20>
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	1841      	adds	r1, r0, r1
 800728a:	6021      	str	r1, [r4, #0]
 800728c:	e7ee      	b.n	800726c <_free_r+0x20>
 800728e:	001a      	movs	r2, r3
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <_free_r+0x4e>
 8007296:	42a3      	cmp	r3, r4
 8007298:	d9f9      	bls.n	800728e <_free_r+0x42>
 800729a:	6811      	ldr	r1, [r2, #0]
 800729c:	1850      	adds	r0, r2, r1
 800729e:	42a0      	cmp	r0, r4
 80072a0:	d10b      	bne.n	80072ba <_free_r+0x6e>
 80072a2:	6820      	ldr	r0, [r4, #0]
 80072a4:	1809      	adds	r1, r1, r0
 80072a6:	1850      	adds	r0, r2, r1
 80072a8:	6011      	str	r1, [r2, #0]
 80072aa:	4283      	cmp	r3, r0
 80072ac:	d1e0      	bne.n	8007270 <_free_r+0x24>
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	1841      	adds	r1, r0, r1
 80072b4:	6011      	str	r1, [r2, #0]
 80072b6:	6053      	str	r3, [r2, #4]
 80072b8:	e7da      	b.n	8007270 <_free_r+0x24>
 80072ba:	42a0      	cmp	r0, r4
 80072bc:	d902      	bls.n	80072c4 <_free_r+0x78>
 80072be:	230c      	movs	r3, #12
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	e7d5      	b.n	8007270 <_free_r+0x24>
 80072c4:	6821      	ldr	r1, [r4, #0]
 80072c6:	1860      	adds	r0, r4, r1
 80072c8:	4283      	cmp	r3, r0
 80072ca:	d103      	bne.n	80072d4 <_free_r+0x88>
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	1841      	adds	r1, r0, r1
 80072d2:	6021      	str	r1, [r4, #0]
 80072d4:	6063      	str	r3, [r4, #4]
 80072d6:	6054      	str	r4, [r2, #4]
 80072d8:	e7ca      	b.n	8007270 <_free_r+0x24>
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	20000264 	.word	0x20000264

080072e0 <sbrk_aligned>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4e0f      	ldr	r6, [pc, #60]	; (8007320 <sbrk_aligned+0x40>)
 80072e4:	000d      	movs	r5, r1
 80072e6:	6831      	ldr	r1, [r6, #0]
 80072e8:	0004      	movs	r4, r0
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d102      	bne.n	80072f4 <sbrk_aligned+0x14>
 80072ee:	f000 fcd5 	bl	8007c9c <_sbrk_r>
 80072f2:	6030      	str	r0, [r6, #0]
 80072f4:	0029      	movs	r1, r5
 80072f6:	0020      	movs	r0, r4
 80072f8:	f000 fcd0 	bl	8007c9c <_sbrk_r>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d00a      	beq.n	8007316 <sbrk_aligned+0x36>
 8007300:	2303      	movs	r3, #3
 8007302:	1cc5      	adds	r5, r0, #3
 8007304:	439d      	bics	r5, r3
 8007306:	42a8      	cmp	r0, r5
 8007308:	d007      	beq.n	800731a <sbrk_aligned+0x3a>
 800730a:	1a29      	subs	r1, r5, r0
 800730c:	0020      	movs	r0, r4
 800730e:	f000 fcc5 	bl	8007c9c <_sbrk_r>
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	d101      	bne.n	800731a <sbrk_aligned+0x3a>
 8007316:	2501      	movs	r5, #1
 8007318:	426d      	negs	r5, r5
 800731a:	0028      	movs	r0, r5
 800731c:	bd70      	pop	{r4, r5, r6, pc}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	20000268 	.word	0x20000268

08007324 <_malloc_r>:
 8007324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007326:	2203      	movs	r2, #3
 8007328:	1ccb      	adds	r3, r1, #3
 800732a:	4393      	bics	r3, r2
 800732c:	3308      	adds	r3, #8
 800732e:	0006      	movs	r6, r0
 8007330:	001f      	movs	r7, r3
 8007332:	2b0c      	cmp	r3, #12
 8007334:	d232      	bcs.n	800739c <_malloc_r+0x78>
 8007336:	270c      	movs	r7, #12
 8007338:	42b9      	cmp	r1, r7
 800733a:	d831      	bhi.n	80073a0 <_malloc_r+0x7c>
 800733c:	0030      	movs	r0, r6
 800733e:	f000 fd87 	bl	8007e50 <__malloc_lock>
 8007342:	4d32      	ldr	r5, [pc, #200]	; (800740c <_malloc_r+0xe8>)
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	001c      	movs	r4, r3
 8007348:	2c00      	cmp	r4, #0
 800734a:	d12e      	bne.n	80073aa <_malloc_r+0x86>
 800734c:	0039      	movs	r1, r7
 800734e:	0030      	movs	r0, r6
 8007350:	f7ff ffc6 	bl	80072e0 <sbrk_aligned>
 8007354:	0004      	movs	r4, r0
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	d11e      	bne.n	8007398 <_malloc_r+0x74>
 800735a:	682c      	ldr	r4, [r5, #0]
 800735c:	0025      	movs	r5, r4
 800735e:	2d00      	cmp	r5, #0
 8007360:	d14a      	bne.n	80073f8 <_malloc_r+0xd4>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	0029      	movs	r1, r5
 8007366:	18e3      	adds	r3, r4, r3
 8007368:	0030      	movs	r0, r6
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	f000 fc96 	bl	8007c9c <_sbrk_r>
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	4283      	cmp	r3, r0
 8007374:	d143      	bne.n	80073fe <_malloc_r+0xda>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	3703      	adds	r7, #3
 800737a:	1aff      	subs	r7, r7, r3
 800737c:	2303      	movs	r3, #3
 800737e:	439f      	bics	r7, r3
 8007380:	3708      	adds	r7, #8
 8007382:	2f0c      	cmp	r7, #12
 8007384:	d200      	bcs.n	8007388 <_malloc_r+0x64>
 8007386:	270c      	movs	r7, #12
 8007388:	0039      	movs	r1, r7
 800738a:	0030      	movs	r0, r6
 800738c:	f7ff ffa8 	bl	80072e0 <sbrk_aligned>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d034      	beq.n	80073fe <_malloc_r+0xda>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	19df      	adds	r7, r3, r7
 8007398:	6027      	str	r7, [r4, #0]
 800739a:	e013      	b.n	80073c4 <_malloc_r+0xa0>
 800739c:	2b00      	cmp	r3, #0
 800739e:	dacb      	bge.n	8007338 <_malloc_r+0x14>
 80073a0:	230c      	movs	r3, #12
 80073a2:	2500      	movs	r5, #0
 80073a4:	6033      	str	r3, [r6, #0]
 80073a6:	0028      	movs	r0, r5
 80073a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	1bd1      	subs	r1, r2, r7
 80073ae:	d420      	bmi.n	80073f2 <_malloc_r+0xce>
 80073b0:	290b      	cmp	r1, #11
 80073b2:	d917      	bls.n	80073e4 <_malloc_r+0xc0>
 80073b4:	19e2      	adds	r2, r4, r7
 80073b6:	6027      	str	r7, [r4, #0]
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d111      	bne.n	80073e0 <_malloc_r+0xbc>
 80073bc:	602a      	str	r2, [r5, #0]
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	6011      	str	r1, [r2, #0]
 80073c2:	6053      	str	r3, [r2, #4]
 80073c4:	0030      	movs	r0, r6
 80073c6:	0025      	movs	r5, r4
 80073c8:	f000 fd4a 	bl	8007e60 <__malloc_unlock>
 80073cc:	2207      	movs	r2, #7
 80073ce:	350b      	adds	r5, #11
 80073d0:	1d23      	adds	r3, r4, #4
 80073d2:	4395      	bics	r5, r2
 80073d4:	1aea      	subs	r2, r5, r3
 80073d6:	429d      	cmp	r5, r3
 80073d8:	d0e5      	beq.n	80073a6 <_malloc_r+0x82>
 80073da:	1b5b      	subs	r3, r3, r5
 80073dc:	50a3      	str	r3, [r4, r2]
 80073de:	e7e2      	b.n	80073a6 <_malloc_r+0x82>
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	e7ec      	b.n	80073be <_malloc_r+0x9a>
 80073e4:	6862      	ldr	r2, [r4, #4]
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	d101      	bne.n	80073ee <_malloc_r+0xca>
 80073ea:	602a      	str	r2, [r5, #0]
 80073ec:	e7ea      	b.n	80073c4 <_malloc_r+0xa0>
 80073ee:	605a      	str	r2, [r3, #4]
 80073f0:	e7e8      	b.n	80073c4 <_malloc_r+0xa0>
 80073f2:	0023      	movs	r3, r4
 80073f4:	6864      	ldr	r4, [r4, #4]
 80073f6:	e7a7      	b.n	8007348 <_malloc_r+0x24>
 80073f8:	002c      	movs	r4, r5
 80073fa:	686d      	ldr	r5, [r5, #4]
 80073fc:	e7af      	b.n	800735e <_malloc_r+0x3a>
 80073fe:	230c      	movs	r3, #12
 8007400:	0030      	movs	r0, r6
 8007402:	6033      	str	r3, [r6, #0]
 8007404:	f000 fd2c 	bl	8007e60 <__malloc_unlock>
 8007408:	e7cd      	b.n	80073a6 <_malloc_r+0x82>
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	20000264 	.word	0x20000264

08007410 <__ssputs_r>:
 8007410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007412:	688e      	ldr	r6, [r1, #8]
 8007414:	b085      	sub	sp, #20
 8007416:	0007      	movs	r7, r0
 8007418:	000c      	movs	r4, r1
 800741a:	9203      	str	r2, [sp, #12]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	429e      	cmp	r6, r3
 8007420:	d83c      	bhi.n	800749c <__ssputs_r+0x8c>
 8007422:	2390      	movs	r3, #144	; 0x90
 8007424:	898a      	ldrh	r2, [r1, #12]
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	421a      	tst	r2, r3
 800742a:	d034      	beq.n	8007496 <__ssputs_r+0x86>
 800742c:	6909      	ldr	r1, [r1, #16]
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	6960      	ldr	r0, [r4, #20]
 8007432:	1a5b      	subs	r3, r3, r1
 8007434:	9302      	str	r3, [sp, #8]
 8007436:	2303      	movs	r3, #3
 8007438:	4343      	muls	r3, r0
 800743a:	0fdd      	lsrs	r5, r3, #31
 800743c:	18ed      	adds	r5, r5, r3
 800743e:	9b01      	ldr	r3, [sp, #4]
 8007440:	9802      	ldr	r0, [sp, #8]
 8007442:	3301      	adds	r3, #1
 8007444:	181b      	adds	r3, r3, r0
 8007446:	106d      	asrs	r5, r5, #1
 8007448:	42ab      	cmp	r3, r5
 800744a:	d900      	bls.n	800744e <__ssputs_r+0x3e>
 800744c:	001d      	movs	r5, r3
 800744e:	0553      	lsls	r3, r2, #21
 8007450:	d532      	bpl.n	80074b8 <__ssputs_r+0xa8>
 8007452:	0029      	movs	r1, r5
 8007454:	0038      	movs	r0, r7
 8007456:	f7ff ff65 	bl	8007324 <_malloc_r>
 800745a:	1e06      	subs	r6, r0, #0
 800745c:	d109      	bne.n	8007472 <__ssputs_r+0x62>
 800745e:	230c      	movs	r3, #12
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	2340      	movs	r3, #64	; 0x40
 8007464:	2001      	movs	r0, #1
 8007466:	89a2      	ldrh	r2, [r4, #12]
 8007468:	4240      	negs	r0, r0
 800746a:	4313      	orrs	r3, r2
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	b005      	add	sp, #20
 8007470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007472:	9a02      	ldr	r2, [sp, #8]
 8007474:	6921      	ldr	r1, [r4, #16]
 8007476:	f7ff fb15 	bl	8006aa4 <memcpy>
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	4a14      	ldr	r2, [pc, #80]	; (80074d0 <__ssputs_r+0xc0>)
 800747e:	401a      	ands	r2, r3
 8007480:	2380      	movs	r3, #128	; 0x80
 8007482:	4313      	orrs	r3, r2
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	9b02      	ldr	r3, [sp, #8]
 8007488:	6126      	str	r6, [r4, #16]
 800748a:	18f6      	adds	r6, r6, r3
 800748c:	6026      	str	r6, [r4, #0]
 800748e:	6165      	str	r5, [r4, #20]
 8007490:	9e01      	ldr	r6, [sp, #4]
 8007492:	1aed      	subs	r5, r5, r3
 8007494:	60a5      	str	r5, [r4, #8]
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	429e      	cmp	r6, r3
 800749a:	d900      	bls.n	800749e <__ssputs_r+0x8e>
 800749c:	9e01      	ldr	r6, [sp, #4]
 800749e:	0032      	movs	r2, r6
 80074a0:	9903      	ldr	r1, [sp, #12]
 80074a2:	6820      	ldr	r0, [r4, #0]
 80074a4:	f000 fcc1 	bl	8007e2a <memmove>
 80074a8:	68a3      	ldr	r3, [r4, #8]
 80074aa:	2000      	movs	r0, #0
 80074ac:	1b9b      	subs	r3, r3, r6
 80074ae:	60a3      	str	r3, [r4, #8]
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	199e      	adds	r6, r3, r6
 80074b4:	6026      	str	r6, [r4, #0]
 80074b6:	e7da      	b.n	800746e <__ssputs_r+0x5e>
 80074b8:	002a      	movs	r2, r5
 80074ba:	0038      	movs	r0, r7
 80074bc:	f000 fcd8 	bl	8007e70 <_realloc_r>
 80074c0:	1e06      	subs	r6, r0, #0
 80074c2:	d1e0      	bne.n	8007486 <__ssputs_r+0x76>
 80074c4:	0038      	movs	r0, r7
 80074c6:	6921      	ldr	r1, [r4, #16]
 80074c8:	f7ff fec0 	bl	800724c <_free_r>
 80074cc:	e7c7      	b.n	800745e <__ssputs_r+0x4e>
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	fffffb7f 	.word	0xfffffb7f

080074d4 <_svfiprintf_r>:
 80074d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074d6:	b0a1      	sub	sp, #132	; 0x84
 80074d8:	9003      	str	r0, [sp, #12]
 80074da:	001d      	movs	r5, r3
 80074dc:	898b      	ldrh	r3, [r1, #12]
 80074de:	000f      	movs	r7, r1
 80074e0:	0016      	movs	r6, r2
 80074e2:	061b      	lsls	r3, r3, #24
 80074e4:	d511      	bpl.n	800750a <_svfiprintf_r+0x36>
 80074e6:	690b      	ldr	r3, [r1, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10e      	bne.n	800750a <_svfiprintf_r+0x36>
 80074ec:	2140      	movs	r1, #64	; 0x40
 80074ee:	f7ff ff19 	bl	8007324 <_malloc_r>
 80074f2:	6038      	str	r0, [r7, #0]
 80074f4:	6138      	str	r0, [r7, #16]
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d105      	bne.n	8007506 <_svfiprintf_r+0x32>
 80074fa:	230c      	movs	r3, #12
 80074fc:	9a03      	ldr	r2, [sp, #12]
 80074fe:	3801      	subs	r0, #1
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	b021      	add	sp, #132	; 0x84
 8007504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007506:	2340      	movs	r3, #64	; 0x40
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	2300      	movs	r3, #0
 800750c:	ac08      	add	r4, sp, #32
 800750e:	6163      	str	r3, [r4, #20]
 8007510:	3320      	adds	r3, #32
 8007512:	7663      	strb	r3, [r4, #25]
 8007514:	3310      	adds	r3, #16
 8007516:	76a3      	strb	r3, [r4, #26]
 8007518:	9507      	str	r5, [sp, #28]
 800751a:	0035      	movs	r5, r6
 800751c:	782b      	ldrb	r3, [r5, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <_svfiprintf_r+0x52>
 8007522:	2b25      	cmp	r3, #37	; 0x25
 8007524:	d147      	bne.n	80075b6 <_svfiprintf_r+0xe2>
 8007526:	1bab      	subs	r3, r5, r6
 8007528:	9305      	str	r3, [sp, #20]
 800752a:	42b5      	cmp	r5, r6
 800752c:	d00c      	beq.n	8007548 <_svfiprintf_r+0x74>
 800752e:	0032      	movs	r2, r6
 8007530:	0039      	movs	r1, r7
 8007532:	9803      	ldr	r0, [sp, #12]
 8007534:	f7ff ff6c 	bl	8007410 <__ssputs_r>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d100      	bne.n	800753e <_svfiprintf_r+0x6a>
 800753c:	e0ae      	b.n	800769c <_svfiprintf_r+0x1c8>
 800753e:	6962      	ldr	r2, [r4, #20]
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	4694      	mov	ip, r2
 8007544:	4463      	add	r3, ip
 8007546:	6163      	str	r3, [r4, #20]
 8007548:	782b      	ldrb	r3, [r5, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d100      	bne.n	8007550 <_svfiprintf_r+0x7c>
 800754e:	e0a5      	b.n	800769c <_svfiprintf_r+0x1c8>
 8007550:	2201      	movs	r2, #1
 8007552:	2300      	movs	r3, #0
 8007554:	4252      	negs	r2, r2
 8007556:	6062      	str	r2, [r4, #4]
 8007558:	a904      	add	r1, sp, #16
 800755a:	3254      	adds	r2, #84	; 0x54
 800755c:	1852      	adds	r2, r2, r1
 800755e:	1c6e      	adds	r6, r5, #1
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	60e3      	str	r3, [r4, #12]
 8007564:	60a3      	str	r3, [r4, #8]
 8007566:	7013      	strb	r3, [r2, #0]
 8007568:	65a3      	str	r3, [r4, #88]	; 0x58
 800756a:	2205      	movs	r2, #5
 800756c:	7831      	ldrb	r1, [r6, #0]
 800756e:	4854      	ldr	r0, [pc, #336]	; (80076c0 <_svfiprintf_r+0x1ec>)
 8007570:	f000 fc50 	bl	8007e14 <memchr>
 8007574:	1c75      	adds	r5, r6, #1
 8007576:	2800      	cmp	r0, #0
 8007578:	d11f      	bne.n	80075ba <_svfiprintf_r+0xe6>
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	06d3      	lsls	r3, r2, #27
 800757e:	d504      	bpl.n	800758a <_svfiprintf_r+0xb6>
 8007580:	2353      	movs	r3, #83	; 0x53
 8007582:	a904      	add	r1, sp, #16
 8007584:	185b      	adds	r3, r3, r1
 8007586:	2120      	movs	r1, #32
 8007588:	7019      	strb	r1, [r3, #0]
 800758a:	0713      	lsls	r3, r2, #28
 800758c:	d504      	bpl.n	8007598 <_svfiprintf_r+0xc4>
 800758e:	2353      	movs	r3, #83	; 0x53
 8007590:	a904      	add	r1, sp, #16
 8007592:	185b      	adds	r3, r3, r1
 8007594:	212b      	movs	r1, #43	; 0x2b
 8007596:	7019      	strb	r1, [r3, #0]
 8007598:	7833      	ldrb	r3, [r6, #0]
 800759a:	2b2a      	cmp	r3, #42	; 0x2a
 800759c:	d016      	beq.n	80075cc <_svfiprintf_r+0xf8>
 800759e:	0035      	movs	r5, r6
 80075a0:	2100      	movs	r1, #0
 80075a2:	200a      	movs	r0, #10
 80075a4:	68e3      	ldr	r3, [r4, #12]
 80075a6:	782a      	ldrb	r2, [r5, #0]
 80075a8:	1c6e      	adds	r6, r5, #1
 80075aa:	3a30      	subs	r2, #48	; 0x30
 80075ac:	2a09      	cmp	r2, #9
 80075ae:	d94e      	bls.n	800764e <_svfiprintf_r+0x17a>
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d111      	bne.n	80075d8 <_svfiprintf_r+0x104>
 80075b4:	e017      	b.n	80075e6 <_svfiprintf_r+0x112>
 80075b6:	3501      	adds	r5, #1
 80075b8:	e7b0      	b.n	800751c <_svfiprintf_r+0x48>
 80075ba:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <_svfiprintf_r+0x1ec>)
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	1ac0      	subs	r0, r0, r3
 80075c0:	2301      	movs	r3, #1
 80075c2:	4083      	lsls	r3, r0
 80075c4:	4313      	orrs	r3, r2
 80075c6:	002e      	movs	r6, r5
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	e7ce      	b.n	800756a <_svfiprintf_r+0x96>
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	1d19      	adds	r1, r3, #4
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	9107      	str	r1, [sp, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	db01      	blt.n	80075dc <_svfiprintf_r+0x108>
 80075d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075da:	e004      	b.n	80075e6 <_svfiprintf_r+0x112>
 80075dc:	425b      	negs	r3, r3
 80075de:	60e3      	str	r3, [r4, #12]
 80075e0:	2302      	movs	r3, #2
 80075e2:	4313      	orrs	r3, r2
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	782b      	ldrb	r3, [r5, #0]
 80075e8:	2b2e      	cmp	r3, #46	; 0x2e
 80075ea:	d10a      	bne.n	8007602 <_svfiprintf_r+0x12e>
 80075ec:	786b      	ldrb	r3, [r5, #1]
 80075ee:	2b2a      	cmp	r3, #42	; 0x2a
 80075f0:	d135      	bne.n	800765e <_svfiprintf_r+0x18a>
 80075f2:	9b07      	ldr	r3, [sp, #28]
 80075f4:	3502      	adds	r5, #2
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	9207      	str	r2, [sp, #28]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	db2b      	blt.n	8007658 <_svfiprintf_r+0x184>
 8007600:	9309      	str	r3, [sp, #36]	; 0x24
 8007602:	4e30      	ldr	r6, [pc, #192]	; (80076c4 <_svfiprintf_r+0x1f0>)
 8007604:	2203      	movs	r2, #3
 8007606:	0030      	movs	r0, r6
 8007608:	7829      	ldrb	r1, [r5, #0]
 800760a:	f000 fc03 	bl	8007e14 <memchr>
 800760e:	2800      	cmp	r0, #0
 8007610:	d006      	beq.n	8007620 <_svfiprintf_r+0x14c>
 8007612:	2340      	movs	r3, #64	; 0x40
 8007614:	1b80      	subs	r0, r0, r6
 8007616:	4083      	lsls	r3, r0
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	3501      	adds	r5, #1
 800761c:	4313      	orrs	r3, r2
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	7829      	ldrb	r1, [r5, #0]
 8007622:	2206      	movs	r2, #6
 8007624:	4828      	ldr	r0, [pc, #160]	; (80076c8 <_svfiprintf_r+0x1f4>)
 8007626:	1c6e      	adds	r6, r5, #1
 8007628:	7621      	strb	r1, [r4, #24]
 800762a:	f000 fbf3 	bl	8007e14 <memchr>
 800762e:	2800      	cmp	r0, #0
 8007630:	d03c      	beq.n	80076ac <_svfiprintf_r+0x1d8>
 8007632:	4b26      	ldr	r3, [pc, #152]	; (80076cc <_svfiprintf_r+0x1f8>)
 8007634:	2b00      	cmp	r3, #0
 8007636:	d125      	bne.n	8007684 <_svfiprintf_r+0x1b0>
 8007638:	2207      	movs	r2, #7
 800763a:	9b07      	ldr	r3, [sp, #28]
 800763c:	3307      	adds	r3, #7
 800763e:	4393      	bics	r3, r2
 8007640:	3308      	adds	r3, #8
 8007642:	9307      	str	r3, [sp, #28]
 8007644:	6963      	ldr	r3, [r4, #20]
 8007646:	9a04      	ldr	r2, [sp, #16]
 8007648:	189b      	adds	r3, r3, r2
 800764a:	6163      	str	r3, [r4, #20]
 800764c:	e765      	b.n	800751a <_svfiprintf_r+0x46>
 800764e:	4343      	muls	r3, r0
 8007650:	0035      	movs	r5, r6
 8007652:	2101      	movs	r1, #1
 8007654:	189b      	adds	r3, r3, r2
 8007656:	e7a6      	b.n	80075a6 <_svfiprintf_r+0xd2>
 8007658:	2301      	movs	r3, #1
 800765a:	425b      	negs	r3, r3
 800765c:	e7d0      	b.n	8007600 <_svfiprintf_r+0x12c>
 800765e:	2300      	movs	r3, #0
 8007660:	200a      	movs	r0, #10
 8007662:	001a      	movs	r2, r3
 8007664:	3501      	adds	r5, #1
 8007666:	6063      	str	r3, [r4, #4]
 8007668:	7829      	ldrb	r1, [r5, #0]
 800766a:	1c6e      	adds	r6, r5, #1
 800766c:	3930      	subs	r1, #48	; 0x30
 800766e:	2909      	cmp	r1, #9
 8007670:	d903      	bls.n	800767a <_svfiprintf_r+0x1a6>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c5      	beq.n	8007602 <_svfiprintf_r+0x12e>
 8007676:	9209      	str	r2, [sp, #36]	; 0x24
 8007678:	e7c3      	b.n	8007602 <_svfiprintf_r+0x12e>
 800767a:	4342      	muls	r2, r0
 800767c:	0035      	movs	r5, r6
 800767e:	2301      	movs	r3, #1
 8007680:	1852      	adds	r2, r2, r1
 8007682:	e7f1      	b.n	8007668 <_svfiprintf_r+0x194>
 8007684:	ab07      	add	r3, sp, #28
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	003a      	movs	r2, r7
 800768a:	0021      	movs	r1, r4
 800768c:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <_svfiprintf_r+0x1fc>)
 800768e:	9803      	ldr	r0, [sp, #12]
 8007690:	e000      	b.n	8007694 <_svfiprintf_r+0x1c0>
 8007692:	bf00      	nop
 8007694:	9004      	str	r0, [sp, #16]
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	3301      	adds	r3, #1
 800769a:	d1d3      	bne.n	8007644 <_svfiprintf_r+0x170>
 800769c:	89bb      	ldrh	r3, [r7, #12]
 800769e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80076a0:	065b      	lsls	r3, r3, #25
 80076a2:	d400      	bmi.n	80076a6 <_svfiprintf_r+0x1d2>
 80076a4:	e72d      	b.n	8007502 <_svfiprintf_r+0x2e>
 80076a6:	2001      	movs	r0, #1
 80076a8:	4240      	negs	r0, r0
 80076aa:	e72a      	b.n	8007502 <_svfiprintf_r+0x2e>
 80076ac:	ab07      	add	r3, sp, #28
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	003a      	movs	r2, r7
 80076b2:	0021      	movs	r1, r4
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <_svfiprintf_r+0x1fc>)
 80076b6:	9803      	ldr	r0, [sp, #12]
 80076b8:	f000 f9de 	bl	8007a78 <_printf_i>
 80076bc:	e7ea      	b.n	8007694 <_svfiprintf_r+0x1c0>
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	080083d8 	.word	0x080083d8
 80076c4:	080083de 	.word	0x080083de
 80076c8:	080083e2 	.word	0x080083e2
 80076cc:	00000000 	.word	0x00000000
 80076d0:	08007411 	.word	0x08007411

080076d4 <__sfputc_r>:
 80076d4:	6893      	ldr	r3, [r2, #8]
 80076d6:	b510      	push	{r4, lr}
 80076d8:	3b01      	subs	r3, #1
 80076da:	6093      	str	r3, [r2, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da04      	bge.n	80076ea <__sfputc_r+0x16>
 80076e0:	6994      	ldr	r4, [r2, #24]
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	db07      	blt.n	80076f6 <__sfputc_r+0x22>
 80076e6:	290a      	cmp	r1, #10
 80076e8:	d005      	beq.n	80076f6 <__sfputc_r+0x22>
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	1c58      	adds	r0, r3, #1
 80076ee:	6010      	str	r0, [r2, #0]
 80076f0:	7019      	strb	r1, [r3, #0]
 80076f2:	0008      	movs	r0, r1
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	f7ff fa9d 	bl	8006c34 <__swbuf_r>
 80076fa:	0001      	movs	r1, r0
 80076fc:	e7f9      	b.n	80076f2 <__sfputc_r+0x1e>

080076fe <__sfputs_r>:
 80076fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007700:	0006      	movs	r6, r0
 8007702:	000f      	movs	r7, r1
 8007704:	0014      	movs	r4, r2
 8007706:	18d5      	adds	r5, r2, r3
 8007708:	42ac      	cmp	r4, r5
 800770a:	d101      	bne.n	8007710 <__sfputs_r+0x12>
 800770c:	2000      	movs	r0, #0
 800770e:	e007      	b.n	8007720 <__sfputs_r+0x22>
 8007710:	7821      	ldrb	r1, [r4, #0]
 8007712:	003a      	movs	r2, r7
 8007714:	0030      	movs	r0, r6
 8007716:	f7ff ffdd 	bl	80076d4 <__sfputc_r>
 800771a:	3401      	adds	r4, #1
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	d1f3      	bne.n	8007708 <__sfputs_r+0xa>
 8007720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007724 <_vfiprintf_r>:
 8007724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007726:	b0a1      	sub	sp, #132	; 0x84
 8007728:	0006      	movs	r6, r0
 800772a:	000c      	movs	r4, r1
 800772c:	001f      	movs	r7, r3
 800772e:	9203      	str	r2, [sp, #12]
 8007730:	2800      	cmp	r0, #0
 8007732:	d004      	beq.n	800773e <_vfiprintf_r+0x1a>
 8007734:	6983      	ldr	r3, [r0, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <_vfiprintf_r+0x1a>
 800773a:	f7ff fc77 	bl	800702c <__sinit>
 800773e:	4b8e      	ldr	r3, [pc, #568]	; (8007978 <_vfiprintf_r+0x254>)
 8007740:	429c      	cmp	r4, r3
 8007742:	d11c      	bne.n	800777e <_vfiprintf_r+0x5a>
 8007744:	6874      	ldr	r4, [r6, #4]
 8007746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007748:	07db      	lsls	r3, r3, #31
 800774a:	d405      	bmi.n	8007758 <_vfiprintf_r+0x34>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	059b      	lsls	r3, r3, #22
 8007750:	d402      	bmi.n	8007758 <_vfiprintf_r+0x34>
 8007752:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007754:	f7ff fd0b 	bl	800716e <__retarget_lock_acquire_recursive>
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	071b      	lsls	r3, r3, #28
 800775c:	d502      	bpl.n	8007764 <_vfiprintf_r+0x40>
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11d      	bne.n	80077a0 <_vfiprintf_r+0x7c>
 8007764:	0021      	movs	r1, r4
 8007766:	0030      	movs	r0, r6
 8007768:	f7ff faba 	bl	8006ce0 <__swsetup_r>
 800776c:	2800      	cmp	r0, #0
 800776e:	d017      	beq.n	80077a0 <_vfiprintf_r+0x7c>
 8007770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007772:	07db      	lsls	r3, r3, #31
 8007774:	d50d      	bpl.n	8007792 <_vfiprintf_r+0x6e>
 8007776:	2001      	movs	r0, #1
 8007778:	4240      	negs	r0, r0
 800777a:	b021      	add	sp, #132	; 0x84
 800777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777e:	4b7f      	ldr	r3, [pc, #508]	; (800797c <_vfiprintf_r+0x258>)
 8007780:	429c      	cmp	r4, r3
 8007782:	d101      	bne.n	8007788 <_vfiprintf_r+0x64>
 8007784:	68b4      	ldr	r4, [r6, #8]
 8007786:	e7de      	b.n	8007746 <_vfiprintf_r+0x22>
 8007788:	4b7d      	ldr	r3, [pc, #500]	; (8007980 <_vfiprintf_r+0x25c>)
 800778a:	429c      	cmp	r4, r3
 800778c:	d1db      	bne.n	8007746 <_vfiprintf_r+0x22>
 800778e:	68f4      	ldr	r4, [r6, #12]
 8007790:	e7d9      	b.n	8007746 <_vfiprintf_r+0x22>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	059b      	lsls	r3, r3, #22
 8007796:	d4ee      	bmi.n	8007776 <_vfiprintf_r+0x52>
 8007798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779a:	f7ff fce9 	bl	8007170 <__retarget_lock_release_recursive>
 800779e:	e7ea      	b.n	8007776 <_vfiprintf_r+0x52>
 80077a0:	2300      	movs	r3, #0
 80077a2:	ad08      	add	r5, sp, #32
 80077a4:	616b      	str	r3, [r5, #20]
 80077a6:	3320      	adds	r3, #32
 80077a8:	766b      	strb	r3, [r5, #25]
 80077aa:	3310      	adds	r3, #16
 80077ac:	76ab      	strb	r3, [r5, #26]
 80077ae:	9707      	str	r7, [sp, #28]
 80077b0:	9f03      	ldr	r7, [sp, #12]
 80077b2:	783b      	ldrb	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <_vfiprintf_r+0x98>
 80077b8:	2b25      	cmp	r3, #37	; 0x25
 80077ba:	d14e      	bne.n	800785a <_vfiprintf_r+0x136>
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	1afb      	subs	r3, r7, r3
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	429f      	cmp	r7, r3
 80077c6:	d00d      	beq.n	80077e4 <_vfiprintf_r+0xc0>
 80077c8:	9b05      	ldr	r3, [sp, #20]
 80077ca:	0021      	movs	r1, r4
 80077cc:	0030      	movs	r0, r6
 80077ce:	9a03      	ldr	r2, [sp, #12]
 80077d0:	f7ff ff95 	bl	80076fe <__sfputs_r>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d100      	bne.n	80077da <_vfiprintf_r+0xb6>
 80077d8:	e0b5      	b.n	8007946 <_vfiprintf_r+0x222>
 80077da:	696a      	ldr	r2, [r5, #20]
 80077dc:	9b05      	ldr	r3, [sp, #20]
 80077de:	4694      	mov	ip, r2
 80077e0:	4463      	add	r3, ip
 80077e2:	616b      	str	r3, [r5, #20]
 80077e4:	783b      	ldrb	r3, [r7, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d100      	bne.n	80077ec <_vfiprintf_r+0xc8>
 80077ea:	e0ac      	b.n	8007946 <_vfiprintf_r+0x222>
 80077ec:	2201      	movs	r2, #1
 80077ee:	1c7b      	adds	r3, r7, #1
 80077f0:	9303      	str	r3, [sp, #12]
 80077f2:	2300      	movs	r3, #0
 80077f4:	4252      	negs	r2, r2
 80077f6:	606a      	str	r2, [r5, #4]
 80077f8:	a904      	add	r1, sp, #16
 80077fa:	3254      	adds	r2, #84	; 0x54
 80077fc:	1852      	adds	r2, r2, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	60eb      	str	r3, [r5, #12]
 8007802:	60ab      	str	r3, [r5, #8]
 8007804:	7013      	strb	r3, [r2, #0]
 8007806:	65ab      	str	r3, [r5, #88]	; 0x58
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	2205      	movs	r2, #5
 800780c:	7819      	ldrb	r1, [r3, #0]
 800780e:	485d      	ldr	r0, [pc, #372]	; (8007984 <_vfiprintf_r+0x260>)
 8007810:	f000 fb00 	bl	8007e14 <memchr>
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	1c5f      	adds	r7, r3, #1
 8007818:	2800      	cmp	r0, #0
 800781a:	d120      	bne.n	800785e <_vfiprintf_r+0x13a>
 800781c:	682a      	ldr	r2, [r5, #0]
 800781e:	06d3      	lsls	r3, r2, #27
 8007820:	d504      	bpl.n	800782c <_vfiprintf_r+0x108>
 8007822:	2353      	movs	r3, #83	; 0x53
 8007824:	a904      	add	r1, sp, #16
 8007826:	185b      	adds	r3, r3, r1
 8007828:	2120      	movs	r1, #32
 800782a:	7019      	strb	r1, [r3, #0]
 800782c:	0713      	lsls	r3, r2, #28
 800782e:	d504      	bpl.n	800783a <_vfiprintf_r+0x116>
 8007830:	2353      	movs	r3, #83	; 0x53
 8007832:	a904      	add	r1, sp, #16
 8007834:	185b      	adds	r3, r3, r1
 8007836:	212b      	movs	r1, #43	; 0x2b
 8007838:	7019      	strb	r1, [r3, #0]
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b2a      	cmp	r3, #42	; 0x2a
 8007840:	d016      	beq.n	8007870 <_vfiprintf_r+0x14c>
 8007842:	2100      	movs	r1, #0
 8007844:	68eb      	ldr	r3, [r5, #12]
 8007846:	9f03      	ldr	r7, [sp, #12]
 8007848:	783a      	ldrb	r2, [r7, #0]
 800784a:	1c78      	adds	r0, r7, #1
 800784c:	3a30      	subs	r2, #48	; 0x30
 800784e:	4684      	mov	ip, r0
 8007850:	2a09      	cmp	r2, #9
 8007852:	d94f      	bls.n	80078f4 <_vfiprintf_r+0x1d0>
 8007854:	2900      	cmp	r1, #0
 8007856:	d111      	bne.n	800787c <_vfiprintf_r+0x158>
 8007858:	e017      	b.n	800788a <_vfiprintf_r+0x166>
 800785a:	3701      	adds	r7, #1
 800785c:	e7a9      	b.n	80077b2 <_vfiprintf_r+0x8e>
 800785e:	4b49      	ldr	r3, [pc, #292]	; (8007984 <_vfiprintf_r+0x260>)
 8007860:	682a      	ldr	r2, [r5, #0]
 8007862:	1ac0      	subs	r0, r0, r3
 8007864:	2301      	movs	r3, #1
 8007866:	4083      	lsls	r3, r0
 8007868:	4313      	orrs	r3, r2
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	9703      	str	r7, [sp, #12]
 800786e:	e7cb      	b.n	8007808 <_vfiprintf_r+0xe4>
 8007870:	9b07      	ldr	r3, [sp, #28]
 8007872:	1d19      	adds	r1, r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	9107      	str	r1, [sp, #28]
 8007878:	2b00      	cmp	r3, #0
 800787a:	db01      	blt.n	8007880 <_vfiprintf_r+0x15c>
 800787c:	930b      	str	r3, [sp, #44]	; 0x2c
 800787e:	e004      	b.n	800788a <_vfiprintf_r+0x166>
 8007880:	425b      	negs	r3, r3
 8007882:	60eb      	str	r3, [r5, #12]
 8007884:	2302      	movs	r3, #2
 8007886:	4313      	orrs	r3, r2
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	783b      	ldrb	r3, [r7, #0]
 800788c:	2b2e      	cmp	r3, #46	; 0x2e
 800788e:	d10a      	bne.n	80078a6 <_vfiprintf_r+0x182>
 8007890:	787b      	ldrb	r3, [r7, #1]
 8007892:	2b2a      	cmp	r3, #42	; 0x2a
 8007894:	d137      	bne.n	8007906 <_vfiprintf_r+0x1e2>
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	3702      	adds	r7, #2
 800789a:	1d1a      	adds	r2, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	9207      	str	r2, [sp, #28]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	db2d      	blt.n	8007900 <_vfiprintf_r+0x1dc>
 80078a4:	9309      	str	r3, [sp, #36]	; 0x24
 80078a6:	2203      	movs	r2, #3
 80078a8:	7839      	ldrb	r1, [r7, #0]
 80078aa:	4837      	ldr	r0, [pc, #220]	; (8007988 <_vfiprintf_r+0x264>)
 80078ac:	f000 fab2 	bl	8007e14 <memchr>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d007      	beq.n	80078c4 <_vfiprintf_r+0x1a0>
 80078b4:	4b34      	ldr	r3, [pc, #208]	; (8007988 <_vfiprintf_r+0x264>)
 80078b6:	682a      	ldr	r2, [r5, #0]
 80078b8:	1ac0      	subs	r0, r0, r3
 80078ba:	2340      	movs	r3, #64	; 0x40
 80078bc:	4083      	lsls	r3, r0
 80078be:	4313      	orrs	r3, r2
 80078c0:	3701      	adds	r7, #1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	7839      	ldrb	r1, [r7, #0]
 80078c6:	1c7b      	adds	r3, r7, #1
 80078c8:	2206      	movs	r2, #6
 80078ca:	4830      	ldr	r0, [pc, #192]	; (800798c <_vfiprintf_r+0x268>)
 80078cc:	9303      	str	r3, [sp, #12]
 80078ce:	7629      	strb	r1, [r5, #24]
 80078d0:	f000 faa0 	bl	8007e14 <memchr>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d045      	beq.n	8007964 <_vfiprintf_r+0x240>
 80078d8:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <_vfiprintf_r+0x26c>)
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d127      	bne.n	800792e <_vfiprintf_r+0x20a>
 80078de:	2207      	movs	r2, #7
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	3307      	adds	r3, #7
 80078e4:	4393      	bics	r3, r2
 80078e6:	3308      	adds	r3, #8
 80078e8:	9307      	str	r3, [sp, #28]
 80078ea:	696b      	ldr	r3, [r5, #20]
 80078ec:	9a04      	ldr	r2, [sp, #16]
 80078ee:	189b      	adds	r3, r3, r2
 80078f0:	616b      	str	r3, [r5, #20]
 80078f2:	e75d      	b.n	80077b0 <_vfiprintf_r+0x8c>
 80078f4:	210a      	movs	r1, #10
 80078f6:	434b      	muls	r3, r1
 80078f8:	4667      	mov	r7, ip
 80078fa:	189b      	adds	r3, r3, r2
 80078fc:	3909      	subs	r1, #9
 80078fe:	e7a3      	b.n	8007848 <_vfiprintf_r+0x124>
 8007900:	2301      	movs	r3, #1
 8007902:	425b      	negs	r3, r3
 8007904:	e7ce      	b.n	80078a4 <_vfiprintf_r+0x180>
 8007906:	2300      	movs	r3, #0
 8007908:	001a      	movs	r2, r3
 800790a:	3701      	adds	r7, #1
 800790c:	606b      	str	r3, [r5, #4]
 800790e:	7839      	ldrb	r1, [r7, #0]
 8007910:	1c78      	adds	r0, r7, #1
 8007912:	3930      	subs	r1, #48	; 0x30
 8007914:	4684      	mov	ip, r0
 8007916:	2909      	cmp	r1, #9
 8007918:	d903      	bls.n	8007922 <_vfiprintf_r+0x1fe>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0c3      	beq.n	80078a6 <_vfiprintf_r+0x182>
 800791e:	9209      	str	r2, [sp, #36]	; 0x24
 8007920:	e7c1      	b.n	80078a6 <_vfiprintf_r+0x182>
 8007922:	230a      	movs	r3, #10
 8007924:	435a      	muls	r2, r3
 8007926:	4667      	mov	r7, ip
 8007928:	1852      	adds	r2, r2, r1
 800792a:	3b09      	subs	r3, #9
 800792c:	e7ef      	b.n	800790e <_vfiprintf_r+0x1ea>
 800792e:	ab07      	add	r3, sp, #28
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	0022      	movs	r2, r4
 8007934:	0029      	movs	r1, r5
 8007936:	0030      	movs	r0, r6
 8007938:	4b16      	ldr	r3, [pc, #88]	; (8007994 <_vfiprintf_r+0x270>)
 800793a:	e000      	b.n	800793e <_vfiprintf_r+0x21a>
 800793c:	bf00      	nop
 800793e:	9004      	str	r0, [sp, #16]
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	3301      	adds	r3, #1
 8007944:	d1d1      	bne.n	80078ea <_vfiprintf_r+0x1c6>
 8007946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007948:	07db      	lsls	r3, r3, #31
 800794a:	d405      	bmi.n	8007958 <_vfiprintf_r+0x234>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	059b      	lsls	r3, r3, #22
 8007950:	d402      	bmi.n	8007958 <_vfiprintf_r+0x234>
 8007952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007954:	f7ff fc0c 	bl	8007170 <__retarget_lock_release_recursive>
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	065b      	lsls	r3, r3, #25
 800795c:	d500      	bpl.n	8007960 <_vfiprintf_r+0x23c>
 800795e:	e70a      	b.n	8007776 <_vfiprintf_r+0x52>
 8007960:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007962:	e70a      	b.n	800777a <_vfiprintf_r+0x56>
 8007964:	ab07      	add	r3, sp, #28
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	0022      	movs	r2, r4
 800796a:	0029      	movs	r1, r5
 800796c:	0030      	movs	r0, r6
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <_vfiprintf_r+0x270>)
 8007970:	f000 f882 	bl	8007a78 <_printf_i>
 8007974:	e7e3      	b.n	800793e <_vfiprintf_r+0x21a>
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	08008398 	.word	0x08008398
 800797c:	080083b8 	.word	0x080083b8
 8007980:	08008378 	.word	0x08008378
 8007984:	080083d8 	.word	0x080083d8
 8007988:	080083de 	.word	0x080083de
 800798c:	080083e2 	.word	0x080083e2
 8007990:	00000000 	.word	0x00000000
 8007994:	080076ff 	.word	0x080076ff

08007998 <_printf_common>:
 8007998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799a:	0015      	movs	r5, r2
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	688a      	ldr	r2, [r1, #8]
 80079a0:	690b      	ldr	r3, [r1, #16]
 80079a2:	000c      	movs	r4, r1
 80079a4:	9000      	str	r0, [sp, #0]
 80079a6:	4293      	cmp	r3, r2
 80079a8:	da00      	bge.n	80079ac <_printf_common+0x14>
 80079aa:	0013      	movs	r3, r2
 80079ac:	0022      	movs	r2, r4
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	3243      	adds	r2, #67	; 0x43
 80079b2:	7812      	ldrb	r2, [r2, #0]
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	d001      	beq.n	80079bc <_printf_common+0x24>
 80079b8:	3301      	adds	r3, #1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	069b      	lsls	r3, r3, #26
 80079c0:	d502      	bpl.n	80079c8 <_printf_common+0x30>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	3302      	adds	r3, #2
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	2306      	movs	r3, #6
 80079cc:	0017      	movs	r7, r2
 80079ce:	401f      	ands	r7, r3
 80079d0:	421a      	tst	r2, r3
 80079d2:	d027      	beq.n	8007a24 <_printf_common+0x8c>
 80079d4:	0023      	movs	r3, r4
 80079d6:	3343      	adds	r3, #67	; 0x43
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	1e5a      	subs	r2, r3, #1
 80079dc:	4193      	sbcs	r3, r2
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	0692      	lsls	r2, r2, #26
 80079e2:	d430      	bmi.n	8007a46 <_printf_common+0xae>
 80079e4:	0022      	movs	r2, r4
 80079e6:	9901      	ldr	r1, [sp, #4]
 80079e8:	9800      	ldr	r0, [sp, #0]
 80079ea:	9e08      	ldr	r6, [sp, #32]
 80079ec:	3243      	adds	r2, #67	; 0x43
 80079ee:	47b0      	blx	r6
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d025      	beq.n	8007a40 <_printf_common+0xa8>
 80079f4:	2306      	movs	r3, #6
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	682a      	ldr	r2, [r5, #0]
 80079fa:	68e1      	ldr	r1, [r4, #12]
 80079fc:	2500      	movs	r5, #0
 80079fe:	4003      	ands	r3, r0
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d103      	bne.n	8007a0c <_printf_common+0x74>
 8007a04:	1a8d      	subs	r5, r1, r2
 8007a06:	43eb      	mvns	r3, r5
 8007a08:	17db      	asrs	r3, r3, #31
 8007a0a:	401d      	ands	r5, r3
 8007a0c:	68a3      	ldr	r3, [r4, #8]
 8007a0e:	6922      	ldr	r2, [r4, #16]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	dd01      	ble.n	8007a18 <_printf_common+0x80>
 8007a14:	1a9b      	subs	r3, r3, r2
 8007a16:	18ed      	adds	r5, r5, r3
 8007a18:	2700      	movs	r7, #0
 8007a1a:	42bd      	cmp	r5, r7
 8007a1c:	d120      	bne.n	8007a60 <_printf_common+0xc8>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e010      	b.n	8007a44 <_printf_common+0xac>
 8007a22:	3701      	adds	r7, #1
 8007a24:	68e3      	ldr	r3, [r4, #12]
 8007a26:	682a      	ldr	r2, [r5, #0]
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	42bb      	cmp	r3, r7
 8007a2c:	ddd2      	ble.n	80079d4 <_printf_common+0x3c>
 8007a2e:	0022      	movs	r2, r4
 8007a30:	2301      	movs	r3, #1
 8007a32:	9901      	ldr	r1, [sp, #4]
 8007a34:	9800      	ldr	r0, [sp, #0]
 8007a36:	9e08      	ldr	r6, [sp, #32]
 8007a38:	3219      	adds	r2, #25
 8007a3a:	47b0      	blx	r6
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d1f0      	bne.n	8007a22 <_printf_common+0x8a>
 8007a40:	2001      	movs	r0, #1
 8007a42:	4240      	negs	r0, r0
 8007a44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a46:	2030      	movs	r0, #48	; 0x30
 8007a48:	18e1      	adds	r1, r4, r3
 8007a4a:	3143      	adds	r1, #67	; 0x43
 8007a4c:	7008      	strb	r0, [r1, #0]
 8007a4e:	0021      	movs	r1, r4
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	3145      	adds	r1, #69	; 0x45
 8007a54:	7809      	ldrb	r1, [r1, #0]
 8007a56:	18a2      	adds	r2, r4, r2
 8007a58:	3243      	adds	r2, #67	; 0x43
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	7011      	strb	r1, [r2, #0]
 8007a5e:	e7c1      	b.n	80079e4 <_printf_common+0x4c>
 8007a60:	0022      	movs	r2, r4
 8007a62:	2301      	movs	r3, #1
 8007a64:	9901      	ldr	r1, [sp, #4]
 8007a66:	9800      	ldr	r0, [sp, #0]
 8007a68:	9e08      	ldr	r6, [sp, #32]
 8007a6a:	321a      	adds	r2, #26
 8007a6c:	47b0      	blx	r6
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d0e6      	beq.n	8007a40 <_printf_common+0xa8>
 8007a72:	3701      	adds	r7, #1
 8007a74:	e7d1      	b.n	8007a1a <_printf_common+0x82>
	...

08007a78 <_printf_i>:
 8007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7a:	b08b      	sub	sp, #44	; 0x2c
 8007a7c:	9206      	str	r2, [sp, #24]
 8007a7e:	000a      	movs	r2, r1
 8007a80:	3243      	adds	r2, #67	; 0x43
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	9005      	str	r0, [sp, #20]
 8007a86:	9204      	str	r2, [sp, #16]
 8007a88:	7e0a      	ldrb	r2, [r1, #24]
 8007a8a:	000c      	movs	r4, r1
 8007a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a8e:	2a78      	cmp	r2, #120	; 0x78
 8007a90:	d807      	bhi.n	8007aa2 <_printf_i+0x2a>
 8007a92:	2a62      	cmp	r2, #98	; 0x62
 8007a94:	d809      	bhi.n	8007aaa <_printf_i+0x32>
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	d100      	bne.n	8007a9c <_printf_i+0x24>
 8007a9a:	e0c1      	b.n	8007c20 <_printf_i+0x1a8>
 8007a9c:	2a58      	cmp	r2, #88	; 0x58
 8007a9e:	d100      	bne.n	8007aa2 <_printf_i+0x2a>
 8007aa0:	e08c      	b.n	8007bbc <_printf_i+0x144>
 8007aa2:	0026      	movs	r6, r4
 8007aa4:	3642      	adds	r6, #66	; 0x42
 8007aa6:	7032      	strb	r2, [r6, #0]
 8007aa8:	e022      	b.n	8007af0 <_printf_i+0x78>
 8007aaa:	0010      	movs	r0, r2
 8007aac:	3863      	subs	r0, #99	; 0x63
 8007aae:	2815      	cmp	r0, #21
 8007ab0:	d8f7      	bhi.n	8007aa2 <_printf_i+0x2a>
 8007ab2:	f7f8 fb29 	bl	8000108 <__gnu_thumb1_case_shi>
 8007ab6:	0016      	.short	0x0016
 8007ab8:	fff6001f 	.word	0xfff6001f
 8007abc:	fff6fff6 	.word	0xfff6fff6
 8007ac0:	001ffff6 	.word	0x001ffff6
 8007ac4:	fff6fff6 	.word	0xfff6fff6
 8007ac8:	fff6fff6 	.word	0xfff6fff6
 8007acc:	003600a8 	.word	0x003600a8
 8007ad0:	fff6009a 	.word	0xfff6009a
 8007ad4:	00b9fff6 	.word	0x00b9fff6
 8007ad8:	0036fff6 	.word	0x0036fff6
 8007adc:	fff6fff6 	.word	0xfff6fff6
 8007ae0:	009e      	.short	0x009e
 8007ae2:	0026      	movs	r6, r4
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	3642      	adds	r6, #66	; 0x42
 8007ae8:	1d11      	adds	r1, r2, #4
 8007aea:	6019      	str	r1, [r3, #0]
 8007aec:	6813      	ldr	r3, [r2, #0]
 8007aee:	7033      	strb	r3, [r6, #0]
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0a7      	b.n	8007c44 <_printf_i+0x1cc>
 8007af4:	6808      	ldr	r0, [r1, #0]
 8007af6:	6819      	ldr	r1, [r3, #0]
 8007af8:	1d0a      	adds	r2, r1, #4
 8007afa:	0605      	lsls	r5, r0, #24
 8007afc:	d50b      	bpl.n	8007b16 <_printf_i+0x9e>
 8007afe:	680d      	ldr	r5, [r1, #0]
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	2d00      	cmp	r5, #0
 8007b04:	da03      	bge.n	8007b0e <_printf_i+0x96>
 8007b06:	232d      	movs	r3, #45	; 0x2d
 8007b08:	9a04      	ldr	r2, [sp, #16]
 8007b0a:	426d      	negs	r5, r5
 8007b0c:	7013      	strb	r3, [r2, #0]
 8007b0e:	4b61      	ldr	r3, [pc, #388]	; (8007c94 <_printf_i+0x21c>)
 8007b10:	270a      	movs	r7, #10
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	e01b      	b.n	8007b4e <_printf_i+0xd6>
 8007b16:	680d      	ldr	r5, [r1, #0]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	0641      	lsls	r1, r0, #25
 8007b1c:	d5f1      	bpl.n	8007b02 <_printf_i+0x8a>
 8007b1e:	b22d      	sxth	r5, r5
 8007b20:	e7ef      	b.n	8007b02 <_printf_i+0x8a>
 8007b22:	680d      	ldr	r5, [r1, #0]
 8007b24:	6819      	ldr	r1, [r3, #0]
 8007b26:	1d08      	adds	r0, r1, #4
 8007b28:	6018      	str	r0, [r3, #0]
 8007b2a:	062e      	lsls	r6, r5, #24
 8007b2c:	d501      	bpl.n	8007b32 <_printf_i+0xba>
 8007b2e:	680d      	ldr	r5, [r1, #0]
 8007b30:	e003      	b.n	8007b3a <_printf_i+0xc2>
 8007b32:	066d      	lsls	r5, r5, #25
 8007b34:	d5fb      	bpl.n	8007b2e <_printf_i+0xb6>
 8007b36:	680d      	ldr	r5, [r1, #0]
 8007b38:	b2ad      	uxth	r5, r5
 8007b3a:	4b56      	ldr	r3, [pc, #344]	; (8007c94 <_printf_i+0x21c>)
 8007b3c:	2708      	movs	r7, #8
 8007b3e:	9303      	str	r3, [sp, #12]
 8007b40:	2a6f      	cmp	r2, #111	; 0x6f
 8007b42:	d000      	beq.n	8007b46 <_printf_i+0xce>
 8007b44:	3702      	adds	r7, #2
 8007b46:	0023      	movs	r3, r4
 8007b48:	2200      	movs	r2, #0
 8007b4a:	3343      	adds	r3, #67	; 0x43
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	6863      	ldr	r3, [r4, #4]
 8007b50:	60a3      	str	r3, [r4, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	db03      	blt.n	8007b5e <_printf_i+0xe6>
 8007b56:	2204      	movs	r2, #4
 8007b58:	6821      	ldr	r1, [r4, #0]
 8007b5a:	4391      	bics	r1, r2
 8007b5c:	6021      	str	r1, [r4, #0]
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	d102      	bne.n	8007b68 <_printf_i+0xf0>
 8007b62:	9e04      	ldr	r6, [sp, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00c      	beq.n	8007b82 <_printf_i+0x10a>
 8007b68:	9e04      	ldr	r6, [sp, #16]
 8007b6a:	0028      	movs	r0, r5
 8007b6c:	0039      	movs	r1, r7
 8007b6e:	f7f8 fb5b 	bl	8000228 <__aeabi_uidivmod>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	3e01      	subs	r6, #1
 8007b76:	5c5b      	ldrb	r3, [r3, r1]
 8007b78:	7033      	strb	r3, [r6, #0]
 8007b7a:	002b      	movs	r3, r5
 8007b7c:	0005      	movs	r5, r0
 8007b7e:	429f      	cmp	r7, r3
 8007b80:	d9f3      	bls.n	8007b6a <_printf_i+0xf2>
 8007b82:	2f08      	cmp	r7, #8
 8007b84:	d109      	bne.n	8007b9a <_printf_i+0x122>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	07db      	lsls	r3, r3, #31
 8007b8a:	d506      	bpl.n	8007b9a <_printf_i+0x122>
 8007b8c:	6863      	ldr	r3, [r4, #4]
 8007b8e:	6922      	ldr	r2, [r4, #16]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	dc02      	bgt.n	8007b9a <_printf_i+0x122>
 8007b94:	2330      	movs	r3, #48	; 0x30
 8007b96:	3e01      	subs	r6, #1
 8007b98:	7033      	strb	r3, [r6, #0]
 8007b9a:	9b04      	ldr	r3, [sp, #16]
 8007b9c:	1b9b      	subs	r3, r3, r6
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	0021      	movs	r1, r4
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	9805      	ldr	r0, [sp, #20]
 8007ba8:	9b06      	ldr	r3, [sp, #24]
 8007baa:	aa09      	add	r2, sp, #36	; 0x24
 8007bac:	f7ff fef4 	bl	8007998 <_printf_common>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d14c      	bne.n	8007c4e <_printf_i+0x1d6>
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	4240      	negs	r0, r0
 8007bb8:	b00b      	add	sp, #44	; 0x2c
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bbc:	3145      	adds	r1, #69	; 0x45
 8007bbe:	700a      	strb	r2, [r1, #0]
 8007bc0:	4a34      	ldr	r2, [pc, #208]	; (8007c94 <_printf_i+0x21c>)
 8007bc2:	9203      	str	r2, [sp, #12]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	6821      	ldr	r1, [r4, #0]
 8007bc8:	ca20      	ldmia	r2!, {r5}
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	0608      	lsls	r0, r1, #24
 8007bce:	d516      	bpl.n	8007bfe <_printf_i+0x186>
 8007bd0:	07cb      	lsls	r3, r1, #31
 8007bd2:	d502      	bpl.n	8007bda <_printf_i+0x162>
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	4319      	orrs	r1, r3
 8007bd8:	6021      	str	r1, [r4, #0]
 8007bda:	2710      	movs	r7, #16
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	d1b2      	bne.n	8007b46 <_printf_i+0xce>
 8007be0:	2320      	movs	r3, #32
 8007be2:	6822      	ldr	r2, [r4, #0]
 8007be4:	439a      	bics	r2, r3
 8007be6:	6022      	str	r2, [r4, #0]
 8007be8:	e7ad      	b.n	8007b46 <_printf_i+0xce>
 8007bea:	2220      	movs	r2, #32
 8007bec:	6809      	ldr	r1, [r1, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	6022      	str	r2, [r4, #0]
 8007bf2:	0022      	movs	r2, r4
 8007bf4:	2178      	movs	r1, #120	; 0x78
 8007bf6:	3245      	adds	r2, #69	; 0x45
 8007bf8:	7011      	strb	r1, [r2, #0]
 8007bfa:	4a27      	ldr	r2, [pc, #156]	; (8007c98 <_printf_i+0x220>)
 8007bfc:	e7e1      	b.n	8007bc2 <_printf_i+0x14a>
 8007bfe:	0648      	lsls	r0, r1, #25
 8007c00:	d5e6      	bpl.n	8007bd0 <_printf_i+0x158>
 8007c02:	b2ad      	uxth	r5, r5
 8007c04:	e7e4      	b.n	8007bd0 <_printf_i+0x158>
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	680d      	ldr	r5, [r1, #0]
 8007c0a:	1d10      	adds	r0, r2, #4
 8007c0c:	6949      	ldr	r1, [r1, #20]
 8007c0e:	6018      	str	r0, [r3, #0]
 8007c10:	6813      	ldr	r3, [r2, #0]
 8007c12:	062e      	lsls	r6, r5, #24
 8007c14:	d501      	bpl.n	8007c1a <_printf_i+0x1a2>
 8007c16:	6019      	str	r1, [r3, #0]
 8007c18:	e002      	b.n	8007c20 <_printf_i+0x1a8>
 8007c1a:	066d      	lsls	r5, r5, #25
 8007c1c:	d5fb      	bpl.n	8007c16 <_printf_i+0x19e>
 8007c1e:	8019      	strh	r1, [r3, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	9e04      	ldr	r6, [sp, #16]
 8007c24:	6123      	str	r3, [r4, #16]
 8007c26:	e7bb      	b.n	8007ba0 <_printf_i+0x128>
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	1d11      	adds	r1, r2, #4
 8007c2c:	6019      	str	r1, [r3, #0]
 8007c2e:	6816      	ldr	r6, [r2, #0]
 8007c30:	2100      	movs	r1, #0
 8007c32:	0030      	movs	r0, r6
 8007c34:	6862      	ldr	r2, [r4, #4]
 8007c36:	f000 f8ed 	bl	8007e14 <memchr>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d001      	beq.n	8007c42 <_printf_i+0x1ca>
 8007c3e:	1b80      	subs	r0, r0, r6
 8007c40:	6060      	str	r0, [r4, #4]
 8007c42:	6863      	ldr	r3, [r4, #4]
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	2300      	movs	r3, #0
 8007c48:	9a04      	ldr	r2, [sp, #16]
 8007c4a:	7013      	strb	r3, [r2, #0]
 8007c4c:	e7a8      	b.n	8007ba0 <_printf_i+0x128>
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	0032      	movs	r2, r6
 8007c52:	9906      	ldr	r1, [sp, #24]
 8007c54:	9805      	ldr	r0, [sp, #20]
 8007c56:	9d07      	ldr	r5, [sp, #28]
 8007c58:	47a8      	blx	r5
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	d0aa      	beq.n	8007bb4 <_printf_i+0x13c>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	079b      	lsls	r3, r3, #30
 8007c62:	d415      	bmi.n	8007c90 <_printf_i+0x218>
 8007c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c66:	68e0      	ldr	r0, [r4, #12]
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	daa5      	bge.n	8007bb8 <_printf_i+0x140>
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	e7a3      	b.n	8007bb8 <_printf_i+0x140>
 8007c70:	0022      	movs	r2, r4
 8007c72:	2301      	movs	r3, #1
 8007c74:	9906      	ldr	r1, [sp, #24]
 8007c76:	9805      	ldr	r0, [sp, #20]
 8007c78:	9e07      	ldr	r6, [sp, #28]
 8007c7a:	3219      	adds	r2, #25
 8007c7c:	47b0      	blx	r6
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d098      	beq.n	8007bb4 <_printf_i+0x13c>
 8007c82:	3501      	adds	r5, #1
 8007c84:	68e3      	ldr	r3, [r4, #12]
 8007c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	42ab      	cmp	r3, r5
 8007c8c:	dcf0      	bgt.n	8007c70 <_printf_i+0x1f8>
 8007c8e:	e7e9      	b.n	8007c64 <_printf_i+0x1ec>
 8007c90:	2500      	movs	r5, #0
 8007c92:	e7f7      	b.n	8007c84 <_printf_i+0x20c>
 8007c94:	080083e9 	.word	0x080083e9
 8007c98:	080083fa 	.word	0x080083fa

08007c9c <_sbrk_r>:
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	b570      	push	{r4, r5, r6, lr}
 8007ca0:	4d06      	ldr	r5, [pc, #24]	; (8007cbc <_sbrk_r+0x20>)
 8007ca2:	0004      	movs	r4, r0
 8007ca4:	0008      	movs	r0, r1
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	f7f9 f93e 	bl	8000f28 <_sbrk>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d103      	bne.n	8007cb8 <_sbrk_r+0x1c>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d000      	beq.n	8007cb8 <_sbrk_r+0x1c>
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	2000026c 	.word	0x2000026c

08007cc0 <__sread>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	000c      	movs	r4, r1
 8007cc4:	250e      	movs	r5, #14
 8007cc6:	5f49      	ldrsh	r1, [r1, r5]
 8007cc8:	f000 f902 	bl	8007ed0 <_read_r>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	db03      	blt.n	8007cd8 <__sread+0x18>
 8007cd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007cd2:	181b      	adds	r3, r3, r0
 8007cd4:	6563      	str	r3, [r4, #84]	; 0x54
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	4a02      	ldr	r2, [pc, #8]	; (8007ce4 <__sread+0x24>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	81a3      	strh	r3, [r4, #12]
 8007ce0:	e7f9      	b.n	8007cd6 <__sread+0x16>
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	ffffefff 	.word	0xffffefff

08007ce8 <__swrite>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	001f      	movs	r7, r3
 8007cec:	898b      	ldrh	r3, [r1, #12]
 8007cee:	0005      	movs	r5, r0
 8007cf0:	000c      	movs	r4, r1
 8007cf2:	0016      	movs	r6, r2
 8007cf4:	05db      	lsls	r3, r3, #23
 8007cf6:	d505      	bpl.n	8007d04 <__swrite+0x1c>
 8007cf8:	230e      	movs	r3, #14
 8007cfa:	5ec9      	ldrsh	r1, [r1, r3]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2302      	movs	r3, #2
 8007d00:	f000 f874 	bl	8007dec <_lseek_r>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	4a05      	ldr	r2, [pc, #20]	; (8007d1c <__swrite+0x34>)
 8007d08:	0028      	movs	r0, r5
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	0032      	movs	r2, r6
 8007d10:	230e      	movs	r3, #14
 8007d12:	5ee1      	ldrsh	r1, [r4, r3]
 8007d14:	003b      	movs	r3, r7
 8007d16:	f000 f81f 	bl	8007d58 <_write_r>
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1c:	ffffefff 	.word	0xffffefff

08007d20 <__sseek>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	000c      	movs	r4, r1
 8007d24:	250e      	movs	r5, #14
 8007d26:	5f49      	ldrsh	r1, [r1, r5]
 8007d28:	f000 f860 	bl	8007dec <_lseek_r>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	1c42      	adds	r2, r0, #1
 8007d30:	d103      	bne.n	8007d3a <__sseek+0x1a>
 8007d32:	4a05      	ldr	r2, [pc, #20]	; (8007d48 <__sseek+0x28>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	bd70      	pop	{r4, r5, r6, pc}
 8007d3a:	2280      	movs	r2, #128	; 0x80
 8007d3c:	0152      	lsls	r2, r2, #5
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	6560      	str	r0, [r4, #84]	; 0x54
 8007d44:	e7f8      	b.n	8007d38 <__sseek+0x18>
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	ffffefff 	.word	0xffffefff

08007d4c <__sclose>:
 8007d4c:	b510      	push	{r4, lr}
 8007d4e:	230e      	movs	r3, #14
 8007d50:	5ec9      	ldrsh	r1, [r1, r3]
 8007d52:	f000 f815 	bl	8007d80 <_close_r>
 8007d56:	bd10      	pop	{r4, pc}

08007d58 <_write_r>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	0004      	movs	r4, r0
 8007d5c:	0008      	movs	r0, r1
 8007d5e:	0011      	movs	r1, r2
 8007d60:	001a      	movs	r2, r3
 8007d62:	2300      	movs	r3, #0
 8007d64:	4d05      	ldr	r5, [pc, #20]	; (8007d7c <_write_r+0x24>)
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f8 fea4 	bl	8000ab4 <_write>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d103      	bne.n	8007d78 <_write_r+0x20>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d000      	beq.n	8007d78 <_write_r+0x20>
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	2000026c 	.word	0x2000026c

08007d80 <_close_r>:
 8007d80:	2300      	movs	r3, #0
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	4d06      	ldr	r5, [pc, #24]	; (8007da0 <_close_r+0x20>)
 8007d86:	0004      	movs	r4, r0
 8007d88:	0008      	movs	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7f9 f89f 	bl	8000ece <_close>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d103      	bne.n	8007d9c <_close_r+0x1c>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d000      	beq.n	8007d9c <_close_r+0x1c>
 8007d9a:	6023      	str	r3, [r4, #0]
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	2000026c 	.word	0x2000026c

08007da4 <_fstat_r>:
 8007da4:	2300      	movs	r3, #0
 8007da6:	b570      	push	{r4, r5, r6, lr}
 8007da8:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_fstat_r+0x20>)
 8007daa:	0004      	movs	r4, r0
 8007dac:	0008      	movs	r0, r1
 8007dae:	0011      	movs	r1, r2
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	f7f9 f896 	bl	8000ee2 <_fstat>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	d103      	bne.n	8007dc2 <_fstat_r+0x1e>
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d000      	beq.n	8007dc2 <_fstat_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	2000026c 	.word	0x2000026c

08007dc8 <_isatty_r>:
 8007dc8:	2300      	movs	r3, #0
 8007dca:	b570      	push	{r4, r5, r6, lr}
 8007dcc:	4d06      	ldr	r5, [pc, #24]	; (8007de8 <_isatty_r+0x20>)
 8007dce:	0004      	movs	r4, r0
 8007dd0:	0008      	movs	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7f9 f893 	bl	8000efe <_isatty>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d103      	bne.n	8007de4 <_isatty_r+0x1c>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d000      	beq.n	8007de4 <_isatty_r+0x1c>
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	46c0      	nop			; (mov r8, r8)
 8007de8:	2000026c 	.word	0x2000026c

08007dec <_lseek_r>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	0004      	movs	r4, r0
 8007df0:	0008      	movs	r0, r1
 8007df2:	0011      	movs	r1, r2
 8007df4:	001a      	movs	r2, r3
 8007df6:	2300      	movs	r3, #0
 8007df8:	4d05      	ldr	r5, [pc, #20]	; (8007e10 <_lseek_r+0x24>)
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f7f9 f888 	bl	8000f10 <_lseek>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d103      	bne.n	8007e0c <_lseek_r+0x20>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d000      	beq.n	8007e0c <_lseek_r+0x20>
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	bd70      	pop	{r4, r5, r6, pc}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	2000026c 	.word	0x2000026c

08007e14 <memchr>:
 8007e14:	b2c9      	uxtb	r1, r1
 8007e16:	1882      	adds	r2, r0, r2
 8007e18:	4290      	cmp	r0, r2
 8007e1a:	d101      	bne.n	8007e20 <memchr+0xc>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4770      	bx	lr
 8007e20:	7803      	ldrb	r3, [r0, #0]
 8007e22:	428b      	cmp	r3, r1
 8007e24:	d0fb      	beq.n	8007e1e <memchr+0xa>
 8007e26:	3001      	adds	r0, #1
 8007e28:	e7f6      	b.n	8007e18 <memchr+0x4>

08007e2a <memmove>:
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	4288      	cmp	r0, r1
 8007e2e:	d902      	bls.n	8007e36 <memmove+0xc>
 8007e30:	188b      	adds	r3, r1, r2
 8007e32:	4298      	cmp	r0, r3
 8007e34:	d303      	bcc.n	8007e3e <memmove+0x14>
 8007e36:	2300      	movs	r3, #0
 8007e38:	e007      	b.n	8007e4a <memmove+0x20>
 8007e3a:	5c8b      	ldrb	r3, [r1, r2]
 8007e3c:	5483      	strb	r3, [r0, r2]
 8007e3e:	3a01      	subs	r2, #1
 8007e40:	d2fb      	bcs.n	8007e3a <memmove+0x10>
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	5ccc      	ldrb	r4, [r1, r3]
 8007e46:	54c4      	strb	r4, [r0, r3]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d1fa      	bne.n	8007e44 <memmove+0x1a>
 8007e4e:	e7f8      	b.n	8007e42 <memmove+0x18>

08007e50 <__malloc_lock>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	4802      	ldr	r0, [pc, #8]	; (8007e5c <__malloc_lock+0xc>)
 8007e54:	f7ff f98b 	bl	800716e <__retarget_lock_acquire_recursive>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	20000261 	.word	0x20000261

08007e60 <__malloc_unlock>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4802      	ldr	r0, [pc, #8]	; (8007e6c <__malloc_unlock+0xc>)
 8007e64:	f7ff f984 	bl	8007170 <__retarget_lock_release_recursive>
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	20000261 	.word	0x20000261

08007e70 <_realloc_r>:
 8007e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e72:	0007      	movs	r7, r0
 8007e74:	000e      	movs	r6, r1
 8007e76:	0014      	movs	r4, r2
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	d105      	bne.n	8007e88 <_realloc_r+0x18>
 8007e7c:	0011      	movs	r1, r2
 8007e7e:	f7ff fa51 	bl	8007324 <_malloc_r>
 8007e82:	0005      	movs	r5, r0
 8007e84:	0028      	movs	r0, r5
 8007e86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e88:	2a00      	cmp	r2, #0
 8007e8a:	d103      	bne.n	8007e94 <_realloc_r+0x24>
 8007e8c:	f7ff f9de 	bl	800724c <_free_r>
 8007e90:	0025      	movs	r5, r4
 8007e92:	e7f7      	b.n	8007e84 <_realloc_r+0x14>
 8007e94:	f000 f830 	bl	8007ef8 <_malloc_usable_size_r>
 8007e98:	9001      	str	r0, [sp, #4]
 8007e9a:	4284      	cmp	r4, r0
 8007e9c:	d803      	bhi.n	8007ea6 <_realloc_r+0x36>
 8007e9e:	0035      	movs	r5, r6
 8007ea0:	0843      	lsrs	r3, r0, #1
 8007ea2:	42a3      	cmp	r3, r4
 8007ea4:	d3ee      	bcc.n	8007e84 <_realloc_r+0x14>
 8007ea6:	0021      	movs	r1, r4
 8007ea8:	0038      	movs	r0, r7
 8007eaa:	f7ff fa3b 	bl	8007324 <_malloc_r>
 8007eae:	1e05      	subs	r5, r0, #0
 8007eb0:	d0e8      	beq.n	8007e84 <_realloc_r+0x14>
 8007eb2:	9b01      	ldr	r3, [sp, #4]
 8007eb4:	0022      	movs	r2, r4
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d900      	bls.n	8007ebc <_realloc_r+0x4c>
 8007eba:	001a      	movs	r2, r3
 8007ebc:	0031      	movs	r1, r6
 8007ebe:	0028      	movs	r0, r5
 8007ec0:	f7fe fdf0 	bl	8006aa4 <memcpy>
 8007ec4:	0031      	movs	r1, r6
 8007ec6:	0038      	movs	r0, r7
 8007ec8:	f7ff f9c0 	bl	800724c <_free_r>
 8007ecc:	e7da      	b.n	8007e84 <_realloc_r+0x14>
	...

08007ed0 <_read_r>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	0004      	movs	r4, r0
 8007ed4:	0008      	movs	r0, r1
 8007ed6:	0011      	movs	r1, r2
 8007ed8:	001a      	movs	r2, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	4d05      	ldr	r5, [pc, #20]	; (8007ef4 <_read_r+0x24>)
 8007ede:	602b      	str	r3, [r5, #0]
 8007ee0:	f7f8 ffd8 	bl	8000e94 <_read>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d103      	bne.n	8007ef0 <_read_r+0x20>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d000      	beq.n	8007ef0 <_read_r+0x20>
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	2000026c 	.word	0x2000026c

08007ef8 <_malloc_usable_size_r>:
 8007ef8:	1f0b      	subs	r3, r1, #4
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	1f18      	subs	r0, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da01      	bge.n	8007f06 <_malloc_usable_size_r+0xe>
 8007f02:	580b      	ldr	r3, [r1, r0]
 8007f04:	18c0      	adds	r0, r0, r3
 8007f06:	4770      	bx	lr

08007f08 <_init>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0e:	bc08      	pop	{r3}
 8007f10:	469e      	mov	lr, r3
 8007f12:	4770      	bx	lr

08007f14 <_fini>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1a:	bc08      	pop	{r3}
 8007f1c:	469e      	mov	lr, r3
 8007f1e:	4770      	bx	lr
