
cortex-m0_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009030  08009030  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08009030  08009030  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009030  08009030  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08009038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200000b8  080090f0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  080090f0  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001238c  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e3  00000000  00000000  0003246c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00035ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000129a0  00000000  00000000  000370a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001712d  00000000  00000000  00049a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d1fa  00000000  00000000  00060b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdd67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  000cddb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b8 	.word	0x200000b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008c74 	.word	0x08008c74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000bc 	.word	0x200000bc
 8000104:	08008c74 	.word	0x08008c74

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// ====================
int _write(int file, char *ptr, int len)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <_write+0x28>)
 800024c:	f003 fc3a 	bl	8003ac4 <HAL_UART_Transmit>
	return len;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	200001c8 	.word	0x200001c8

08000260 <W5500_Select>:

void W5500_Select(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <W5500_Select+0x18>)
 8000266:	2200      	movs	r2, #0
 8000268:	2102      	movs	r1, #2
 800026a:	0018      	movs	r0, r3
 800026c:	f001 fa0c 	bl	8001688 <HAL_GPIO_WritePin>
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	48000400 	.word	0x48000400

0800027c <W5500_Unselect>:

void W5500_Unselect(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <W5500_Unselect+0x18>)
 8000282:	2201      	movs	r2, #1
 8000284:	2102      	movs	r1, #2
 8000286:	0018      	movs	r0, r3
 8000288:	f001 f9fe 	bl	8001688 <HAL_GPIO_WritePin>
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	48000400 	.word	0x48000400

08000298 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	000a      	movs	r2, r1
 80002a2:	1cbb      	adds	r3, r7, #2
 80002a4:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 80002a6:	2301      	movs	r3, #1
 80002a8:	425c      	negs	r4, r3
 80002aa:	1cbb      	adds	r3, r7, #2
 80002ac:	881a      	ldrh	r2, [r3, #0]
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <W5500_ReadBuff+0x28>)
 80002b2:	0023      	movs	r3, r4
 80002b4:	f002 f986 	bl	80025c4 <HAL_SPI_Receive>
}
 80002b8:	46c0      	nop			; (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b003      	add	sp, #12
 80002be:	bd90      	pop	{r4, r7, pc}
 80002c0:	200000d4 	.word	0x200000d4

080002c4 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	000a      	movs	r2, r1
 80002ce:	1cbb      	adds	r3, r7, #2
 80002d0:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 80002d2:	2301      	movs	r3, #1
 80002d4:	425c      	negs	r4, r3
 80002d6:	1cbb      	adds	r3, r7, #2
 80002d8:	881a      	ldrh	r2, [r3, #0]
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <W5500_WriteBuff+0x28>)
 80002de:	0023      	movs	r3, r4
 80002e0:	f002 f818 	bl	8002314 <HAL_SPI_Transmit>
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b003      	add	sp, #12
 80002ea:	bd90      	pop	{r4, r7, pc}
 80002ec:	200000d4 	.word	0x200000d4

080002f0 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	2101      	movs	r1, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f7ff ffcc 	bl	8000298 <W5500_ReadBuff>
	return byte;
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
}
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	b002      	add	sp, #8
 800030a:	bd80      	pop	{r7, pc}

0800030c <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	0002      	movs	r2, r0
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	701a      	strb	r2, [r3, #0]
	W5500_WriteBuff(&byte, sizeof(byte));
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	2101      	movs	r1, #1
 800031c:	0018      	movs	r0, r3
 800031e:	f7ff ffd1 	bl	80002c4 <W5500_WriteBuff>
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    printf("Callback: IP assigned! Leased time: %d sec\r\n",
 8000330:	f007 fbf2 	bl	8007b18 <getDHCPLeasetime>
 8000334:	0002      	movs	r2, r0
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <Callback_IPAssigned+0x20>)
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f007 fc46 	bl	8007bcc <iprintf>
                getDHCPLeasetime());
    ip_assigned = true;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <Callback_IPAssigned+0x24>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	08008c8c 	.word	0x08008c8c
 8000350:	2000064c 	.word	0x2000064c

08000354 <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
    printf("Callback: IP conflict!\r\n");
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <Callback_IPConflict+0x14>)
 800035a:	0018      	movs	r0, r3
 800035c:	f007 fcc2 	bl	8007ce4 <puts>
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	08008cbc 	.word	0x08008cbc

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	46de      	mov	lr, fp
 8000370:	4657      	mov	r7, sl
 8000372:	464e      	mov	r6, r9
 8000374:	4645      	mov	r5, r8
 8000376:	b5e0      	push	{r5, r6, r7, lr}
 8000378:	b09f      	sub	sp, #124	; 0x7c
 800037a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037c:	f000 fe54 	bl	8001028 <HAL_Init>
  // ====================
  // ====================
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000380:	f000 f944 	bl	800060c <SystemClock_Config>
  // ====================
  // ====================
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000384:	f000 fac4 	bl	8000910 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000388:	f000 f9e0 	bl	800074c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800038c:	f000 fa90 	bl	80008b0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000390:	f000 f99e 	bl	80006d0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000394:	f000 fa34 	bl	8000800 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // ====================

  printf("Registering W5500 callbacks...\r\n");
 8000398:	4b83      	ldr	r3, [pc, #524]	; (80005a8 <main+0x23c>)
 800039a:	0018      	movs	r0, r3
 800039c:	f007 fca2 	bl	8007ce4 <puts>
  reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80003a0:	4a82      	ldr	r2, [pc, #520]	; (80005ac <main+0x240>)
 80003a2:	4b83      	ldr	r3, [pc, #524]	; (80005b0 <main+0x244>)
 80003a4:	0011      	movs	r1, r2
 80003a6:	0018      	movs	r0, r3
 80003a8:	f005 fc82 	bl	8005cb0 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80003ac:	4a81      	ldr	r2, [pc, #516]	; (80005b4 <main+0x248>)
 80003ae:	4b82      	ldr	r3, [pc, #520]	; (80005b8 <main+0x24c>)
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f005 fca0 	bl	8005cf8 <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80003b8:	4a80      	ldr	r2, [pc, #512]	; (80005bc <main+0x250>)
 80003ba:	4b81      	ldr	r3, [pc, #516]	; (80005c0 <main+0x254>)
 80003bc:	0011      	movs	r1, r2
 80003be:	0018      	movs	r0, r3
 80003c0:	f005 fcc6 	bl	8005d50 <reg_wizchip_spiburst_cbfunc>


  printf("Calling wizchip_init()...\r\n");
 80003c4:	4b7f      	ldr	r3, [pc, #508]	; (80005c4 <main+0x258>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f007 fc8c 	bl	8007ce4 <puts>
  uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80003cc:	211c      	movs	r1, #28
 80003ce:	2518      	movs	r5, #24
 80003d0:	194b      	adds	r3, r1, r5
 80003d2:	19db      	adds	r3, r3, r7
 80003d4:	4a7c      	ldr	r2, [pc, #496]	; (80005c8 <main+0x25c>)
 80003d6:	ca11      	ldmia	r2!, {r0, r4}
 80003d8:	c311      	stmia	r3!, {r0, r4}
  wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80003da:	194b      	adds	r3, r1, r5
 80003dc:	19da      	adds	r2, r3, r7
 80003de:	194b      	adds	r3, r1, r5
 80003e0:	19db      	adds	r3, r3, r7
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f005 fd28 	bl	8005e3a <wizchip_init>


  printf("Calling DHCP_init()...\r\n");
 80003ea:	4b78      	ldr	r3, [pc, #480]	; (80005cc <main+0x260>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f007 fc79 	bl	8007ce4 <puts>
  wiz_NetInfo net_info = {
 80003f2:	241c      	movs	r4, #28
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2317      	movs	r3, #23
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f007 fbdd 	bl	8007bbc <memset>
 8000402:	0020      	movs	r0, r4
 8000404:	183b      	adds	r3, r7, r0
 8000406:	4a72      	ldr	r2, [pc, #456]	; (80005d0 <main+0x264>)
 8000408:	6811      	ldr	r1, [r2, #0]
 800040a:	6019      	str	r1, [r3, #0]
 800040c:	8892      	ldrh	r2, [r2, #4]
 800040e:	809a      	strh	r2, [r3, #4]
 8000410:	183b      	adds	r3, r7, r0
 8000412:	2202      	movs	r2, #2
 8000414:	759a      	strb	r2, [r3, #22]
      .mac  = { 0xEA, 0x11, 0x22, 0x33, 0x44, 0xEA },
      .dhcp = NETINFO_DHCP
  };


  printf("Registering DHCP callbacks...\r\n");
 8000416:	4b6f      	ldr	r3, [pc, #444]	; (80005d4 <main+0x268>)
 8000418:	0018      	movs	r0, r3
 800041a:	f007 fc63 	bl	8007ce4 <puts>
  reg_dhcp_cbfunc(
 800041e:	4a6e      	ldr	r2, [pc, #440]	; (80005d8 <main+0x26c>)
 8000420:	496e      	ldr	r1, [pc, #440]	; (80005dc <main+0x270>)
 8000422:	4b6e      	ldr	r3, [pc, #440]	; (80005dc <main+0x270>)
 8000424:	0018      	movs	r0, r3
 8000426:	f005 fe5b 	bl	80060e0 <reg_dhcp_cbfunc>
      Callback_IPAssigned,
      Callback_IPConflict
  );


  printf("Calling DHCP_run()...\r\n");
 800042a:	4b6d      	ldr	r3, [pc, #436]	; (80005e0 <main+0x274>)
 800042c:	0018      	movs	r0, r3
 800042e:	f007 fc59 	bl	8007ce4 <puts>
  // actually should be called in a loop, e.g. by timer
  uint32_t ctr = 10000;
 8000432:	4b6c      	ldr	r3, [pc, #432]	; (80005e4 <main+0x278>)
 8000434:	63fb      	str	r3, [r7, #60]	; 0x3c
  while((!ip_assigned) && (ctr > 0)) {
 8000436:	e00c      	b.n	8000452 <main+0xe6>
    printf("dchp started\r\n");
 8000438:	4b6b      	ldr	r3, [pc, #428]	; (80005e8 <main+0x27c>)
 800043a:	0018      	movs	r0, r3
 800043c:	f007 fc52 	bl	8007ce4 <puts>
		DHCP_run();
 8000440:	f007 f86e 	bl	8007520 <DHCP_run>
		ctr--;
 8000444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000446:	3b01      	subs	r3, #1
 8000448:	63fb      	str	r3, [r7, #60]	; 0x3c
		printf("dchp finished\r\n");
 800044a:	4b68      	ldr	r3, [pc, #416]	; (80005ec <main+0x280>)
 800044c:	0018      	movs	r0, r3
 800044e:	f007 fc49 	bl	8007ce4 <puts>
  while((!ip_assigned) && (ctr > 0)) {
 8000452:	4b67      	ldr	r3, [pc, #412]	; (80005f0 <main+0x284>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2201      	movs	r2, #1
 800045a:	4053      	eors	r3, r2
 800045c:	b2db      	uxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	d002      	beq.n	8000468 <main+0xfc>
 8000462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1e7      	bne.n	8000438 <main+0xcc>
  }
  if(!ip_assigned) {
 8000468:	4b61      	ldr	r3, [pc, #388]	; (80005f0 <main+0x284>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2201      	movs	r2, #1
 8000470:	4053      	eors	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b00      	cmp	r3, #0
 8000476:	d005      	beq.n	8000484 <main+0x118>
		printf("\r\nIP was not assigned :(\r\n");
 8000478:	4b5e      	ldr	r3, [pc, #376]	; (80005f4 <main+0x288>)
 800047a:	0018      	movs	r0, r3
 800047c:	f007 fc32 	bl	8007ce4 <puts>
		return 1;
 8000480:	2301      	movs	r3, #1
 8000482:	e087      	b.n	8000594 <main+0x228>
  }


  getIPfromDHCP(net_info.ip);
 8000484:	241c      	movs	r4, #28
 8000486:	193b      	adds	r3, r7, r4
 8000488:	3306      	adds	r3, #6
 800048a:	0018      	movs	r0, r3
 800048c:	f007 facc 	bl	8007a28 <getIPfromDHCP>
  getGWfromDHCP(net_info.gw);
 8000490:	193b      	adds	r3, r7, r4
 8000492:	330e      	adds	r3, #14
 8000494:	0018      	movs	r0, r3
 8000496:	f007 fae5 	bl	8007a64 <getGWfromDHCP>
  getSNfromDHCP(net_info.sn);
 800049a:	193b      	adds	r3, r7, r4
 800049c:	330a      	adds	r3, #10
 800049e:	0018      	movs	r0, r3
 80004a0:	f007 fafe 	bl	8007aa0 <getSNfromDHCP>

  uint8_t dns[4];
  getDNSfromDHCP(dns);
 80004a4:	2018      	movs	r0, #24
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f007 fb17 	bl	8007adc <getDNSfromDHCP>
  printf(
  		"IP:  %d.%d.%d.%d\r\n"
      "GW:  %d.%d.%d.%d\r\n"
      "Net: %d.%d.%d.%d\r\n"
      "DNS: %d.%d.%d.%d\r\n",
      net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80004ae:	0022      	movs	r2, r4
 80004b0:	18bb      	adds	r3, r7, r2
 80004b2:	799b      	ldrb	r3, [r3, #6]
  printf(
 80004b4:	617b      	str	r3, [r7, #20]
      net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80004b6:	18bb      	adds	r3, r7, r2
 80004b8:	79db      	ldrb	r3, [r3, #7]
  printf(
 80004ba:	613b      	str	r3, [r7, #16]
      net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80004bc:	18bb      	adds	r3, r7, r2
 80004be:	7a1b      	ldrb	r3, [r3, #8]
  printf(
 80004c0:	60fb      	str	r3, [r7, #12]
      net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 80004c2:	18bb      	adds	r3, r7, r2
 80004c4:	7a5b      	ldrb	r3, [r3, #9]
  printf(
 80004c6:	001d      	movs	r5, r3
      net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80004c8:	18bb      	adds	r3, r7, r2
 80004ca:	7b9b      	ldrb	r3, [r3, #14]
  printf(
 80004cc:	001e      	movs	r6, r3
      net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80004ce:	18bb      	adds	r3, r7, r2
 80004d0:	7bdb      	ldrb	r3, [r3, #15]
  printf(
 80004d2:	469c      	mov	ip, r3
      net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80004d4:	18bb      	adds	r3, r7, r2
 80004d6:	7c1b      	ldrb	r3, [r3, #16]
  printf(
 80004d8:	4698      	mov	r8, r3
      net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 80004da:	18bb      	adds	r3, r7, r2
 80004dc:	7c5b      	ldrb	r3, [r3, #17]
  printf(
 80004de:	4699      	mov	r9, r3
      net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80004e0:	18bb      	adds	r3, r7, r2
 80004e2:	7a9b      	ldrb	r3, [r3, #10]
  printf(
 80004e4:	469a      	mov	sl, r3
      net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80004e6:	18bb      	adds	r3, r7, r2
 80004e8:	7adb      	ldrb	r3, [r3, #11]
  printf(
 80004ea:	469b      	mov	fp, r3
      net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80004ec:	18bb      	adds	r3, r7, r2
 80004ee:	7b1b      	ldrb	r3, [r3, #12]
  printf(
 80004f0:	60bb      	str	r3, [r7, #8]
      net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80004f2:	18bb      	adds	r3, r7, r2
 80004f4:	7b5b      	ldrb	r3, [r3, #13]
  printf(
 80004f6:	607b      	str	r3, [r7, #4]
      dns[0], dns[1], dns[2], dns[3]
 80004f8:	2018      	movs	r0, #24
 80004fa:	183b      	adds	r3, r7, r0
 80004fc:	781b      	ldrb	r3, [r3, #0]
  printf(
 80004fe:	001c      	movs	r4, r3
      dns[0], dns[1], dns[2], dns[3]
 8000500:	183b      	adds	r3, r7, r0
 8000502:	785b      	ldrb	r3, [r3, #1]
  printf(
 8000504:	0019      	movs	r1, r3
      dns[0], dns[1], dns[2], dns[3]
 8000506:	183b      	adds	r3, r7, r0
 8000508:	789b      	ldrb	r3, [r3, #2]
  printf(
 800050a:	001a      	movs	r2, r3
      dns[0], dns[1], dns[2], dns[3]
 800050c:	183b      	adds	r3, r7, r0
 800050e:	78db      	ldrb	r3, [r3, #3]
  printf(
 8000510:	4839      	ldr	r0, [pc, #228]	; (80005f8 <main+0x28c>)
 8000512:	930c      	str	r3, [sp, #48]	; 0x30
 8000514:	920b      	str	r2, [sp, #44]	; 0x2c
 8000516:	910a      	str	r1, [sp, #40]	; 0x28
 8000518:	9409      	str	r4, [sp, #36]	; 0x24
 800051a:	687c      	ldr	r4, [r7, #4]
 800051c:	9408      	str	r4, [sp, #32]
 800051e:	68bc      	ldr	r4, [r7, #8]
 8000520:	9407      	str	r4, [sp, #28]
 8000522:	465c      	mov	r4, fp
 8000524:	9406      	str	r4, [sp, #24]
 8000526:	4654      	mov	r4, sl
 8000528:	9405      	str	r4, [sp, #20]
 800052a:	464c      	mov	r4, r9
 800052c:	9404      	str	r4, [sp, #16]
 800052e:	4644      	mov	r4, r8
 8000530:	9403      	str	r4, [sp, #12]
 8000532:	4664      	mov	r4, ip
 8000534:	9402      	str	r4, [sp, #8]
 8000536:	9601      	str	r6, [sp, #4]
 8000538:	9500      	str	r5, [sp, #0]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	6979      	ldr	r1, [r7, #20]
 8000540:	f007 fb44 	bl	8007bcc <iprintf>
  );

  printf("Calling wizchip_setnetinfo()...\r\n");
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <main+0x290>)
 8000546:	0018      	movs	r0, r3
 8000548:	f007 fbcc 	bl	8007ce4 <puts>
  wizchip_setnetinfo(&net_info);
 800054c:	241c      	movs	r4, #28
 800054e:	193b      	adds	r3, r7, r4
 8000550:	0018      	movs	r0, r3
 8000552:	f005 fd35 	bl	8005fc0 <wizchip_setnetinfo>

  // set MAC address before using DHCP
  setSHAR(net_info.mac);
 8000556:	1939      	adds	r1, r7, r4
 8000558:	2390      	movs	r3, #144	; 0x90
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	2206      	movs	r2, #6
 800055e:	0018      	movs	r0, r3
 8000560:	f004 faf0 	bl	8004b44 <WIZCHIP_WRITE_BUF>
  DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <main+0x294>)
 8000566:	0019      	movs	r1, r3
 8000568:	2000      	movs	r0, #0
 800056a:	f007 f9a3 	bl	80078b4 <DHCP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // ====================
  // очистка флага (благодаря этому таймер не сработает сразу после включения)
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <main+0x298>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2202      	movs	r2, #2
 8000574:	4252      	negs	r2, r2
 8000576:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim1);
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <main+0x298>)
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fe80 	bl	8003280 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <main+0x29c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2202      	movs	r2, #2
 8000586:	4252      	negs	r2, r2
 8000588:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <main+0x29c>)
 800058c:	0018      	movs	r0, r3
 800058e:	f002 fe77 	bl	8003280 <HAL_TIM_Base_Start_IT>

  while (1)
 8000592:	e7fe      	b.n	8000592 <main+0x226>
    /* USER CODE BEGIN 3 */
  	// ====================
  }
  // ====================
  /* USER CODE END 3 */
}
 8000594:	0018      	movs	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	b011      	add	sp, #68	; 0x44
 800059a:	bcf0      	pop	{r4, r5, r6, r7}
 800059c:	46bb      	mov	fp, r7
 800059e:	46b2      	mov	sl, r6
 80005a0:	46a9      	mov	r9, r5
 80005a2:	46a0      	mov	r8, r4
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	08008cd4 	.word	0x08008cd4
 80005ac:	0800027d 	.word	0x0800027d
 80005b0:	08000261 	.word	0x08000261
 80005b4:	0800030d 	.word	0x0800030d
 80005b8:	080002f1 	.word	0x080002f1
 80005bc:	080002c5 	.word	0x080002c5
 80005c0:	08000299 	.word	0x08000299
 80005c4:	08008cf4 	.word	0x08008cf4
 80005c8:	08008e0c 	.word	0x08008e0c
 80005cc:	08008d10 	.word	0x08008d10
 80005d0:	08008e14 	.word	0x08008e14
 80005d4:	08008d28 	.word	0x08008d28
 80005d8:	08000355 	.word	0x08000355
 80005dc:	0800032d 	.word	0x0800032d
 80005e0:	08008d48 	.word	0x08008d48
 80005e4:	00002710 	.word	0x00002710
 80005e8:	08008d60 	.word	0x08008d60
 80005ec:	08008d70 	.word	0x08008d70
 80005f0:	2000064c 	.word	0x2000064c
 80005f4:	08008d80 	.word	0x08008d80
 80005f8:	08008d9c 	.word	0x08008d9c
 80005fc:	08008de8 	.word	0x08008de8
 8000600:	2000024c 	.word	0x2000024c
 8000604:	20000138 	.word	0x20000138
 8000608:	20000180 	.word	0x20000180

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b095      	sub	sp, #84	; 0x54
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	2420      	movs	r4, #32
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2330      	movs	r3, #48	; 0x30
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f007 facd 	bl	8007bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000622:	2310      	movs	r3, #16
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0018      	movs	r0, r3
 8000628:	2310      	movs	r3, #16
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f007 fac5 	bl	8007bbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000632:	003b      	movs	r3, r7
 8000634:	0018      	movs	r0, r3
 8000636:	2310      	movs	r3, #16
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f007 fabe 	bl	8007bbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	0021      	movs	r1, r4
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2202      	movs	r2, #2
 8000646:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2210      	movs	r2, #16
 8000652:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2202      	movs	r2, #2
 8000658:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	22a0      	movs	r2, #160	; 0xa0
 8000664:	0392      	lsls	r2, r2, #14
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	187b      	adds	r3, r7, r1
 8000670:	0018      	movs	r0, r3
 8000672:	f001 f85d 	bl	8001730 <HAL_RCC_OscConfig>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 fa8d 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	2110      	movs	r1, #16
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2207      	movs	r2, #7
 8000684:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2202      	movs	r2, #2
 800068a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2101      	movs	r1, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fb61 	bl	8001d64 <HAL_RCC_ClockConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006a6:	f000 fa77 	bl	8000b98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b6:	003b      	movs	r3, r7
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fca5 	bl	8002008 <HAL_RCCEx_PeriphCLKConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006c2:	f000 fa69 	bl	8000b98 <Error_Handler>
  }
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b015      	add	sp, #84	; 0x54
 80006cc:	bd90      	pop	{r4, r7, pc}
	...

080006d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_SPI2_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_SPI2_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_SPI2_Init+0x74>)
 80006dc:	2282      	movs	r2, #130	; 0x82
 80006de:	0052      	lsls	r2, r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_SPI2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_SPI2_Init+0x74>)
 80006ea:	22c0      	movs	r2, #192	; 0xc0
 80006ec:	0092      	lsls	r2, r2, #2
 80006ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_SPI2_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_SPI2_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_SPI2_Init+0x74>)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0092      	lsls	r2, r2, #2
 8000702:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_SPI2_Init+0x74>)
 8000706:	2208      	movs	r2, #8
 8000708:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_SPI2_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_SPI2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_SPI2_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_SPI2_Init+0x74>)
 800071e:	2207      	movs	r2, #7
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_SPI2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_SPI2_Init+0x74>)
 800072a:	2208      	movs	r2, #8
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MX_SPI2_Init+0x74>)
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fd37 	bl	80021a4 <HAL_SPI_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fa2d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000d4 	.word	0x200000d4
 8000748:	40003800 	.word	0x40003800

0800074c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
	// ====================

	// ====================
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	2308      	movs	r3, #8
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	0018      	movs	r0, r3
 8000758:	2310      	movs	r3, #16
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f007 fa2d 	bl	8007bbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	003b      	movs	r3, r7
 8000764:	0018      	movs	r0, r3
 8000766:	2308      	movs	r3, #8
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f007 fa26 	bl	8007bbc <memset>
  /* USER CODE BEGIN TIM1_Init 1 */
  // ====================

  // ====================
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_TIM1_Init+0xa4>)
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <MX_TIM1_Init+0xa8>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_TIM1_Init+0xa4>)
 8000778:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_TIM1_Init+0xac>)
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_TIM1_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_TIM1_Init+0xa4>)
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_TIM1_Init+0xb0>)
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_TIM1_Init+0xa4>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_TIM1_Init+0xa4>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_TIM1_Init+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_TIM1_Init+0xa4>)
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fd1f 	bl	80031e0 <HAL_TIM_Base_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 f9f7 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	2108      	movs	r1, #8
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0152      	lsls	r2, r2, #5
 80007b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007b4:	187a      	adds	r2, r7, r1
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_TIM1_Init+0xa4>)
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 fec2 	bl	8003544 <HAL_TIM_ConfigClockSource>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007c4:	f000 f9e8 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d4:	003a      	movs	r2, r7
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_TIM1_Init+0xa4>)
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f003 f8b6 	bl	800394c <HAL_TIMEx_MasterConfigSynchronization>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007e4:	f000 f9d8 	bl	8000b98 <Error_Handler>
  // ====================

  // ====================
  /* USER CODE END TIM1_Init 2 */

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b006      	add	sp, #24
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000138 	.word	0x20000138
 80007f4:	40012c00 	.word	0x40012c00
 80007f8:	0000bb7f 	.word	0x0000bb7f
 80007fc:	000003e7 	.word	0x000003e7

08000800 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	2308      	movs	r3, #8
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	0018      	movs	r0, r3
 800080c:	2310      	movs	r3, #16
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f007 f9d3 	bl	8007bbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	003b      	movs	r3, r7
 8000818:	0018      	movs	r0, r3
 800081a:	2308      	movs	r3, #8
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f007 f9cc 	bl	8007bbc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM3_Init+0xa0>)
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <MX_TIM3_Init+0xa4>)
 8000828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_TIM3_Init+0xa0>)
 800082c:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <MX_TIM3_Init+0xa8>)
 800082e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_TIM3_Init+0xa0>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_TIM3_Init+0xa0>)
 8000838:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_TIM3_Init+0xac>)
 800083a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM3_Init+0xa0>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_TIM3_Init+0xa0>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_TIM3_Init+0xa0>)
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fcc8 	bl	80031e0 <HAL_TIM_Base_Init>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000854:	f000 f9a0 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	2108      	movs	r1, #8
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	0152      	lsls	r2, r2, #5
 8000860:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000862:	187a      	adds	r2, r7, r1
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_TIM3_Init+0xa0>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f002 fe6b 	bl	8003544 <HAL_TIM_ConfigClockSource>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000872:	f000 f991 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	003b      	movs	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	003b      	movs	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000882:	003a      	movs	r2, r7
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_TIM3_Init+0xa0>)
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f003 f85f 	bl	800394c <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 f981 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b006      	add	sp, #24
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000180 	.word	0x20000180
 80008a4:	40000400 	.word	0x40000400
 80008a8:	0000bb7f 	.word	0x0000bb7f
 80008ac:	000003e7 	.word	0x000003e7

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 1 */
	// ====================

	// ====================
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_USART1_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008bc:	22e1      	movs	r2, #225	; 0xe1
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <MX_USART1_UART_Init+0x58>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 f891 	bl	8003a1c <HAL_UART_Init>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f94b 	bl	8000b98 <Error_Handler>
  // ====================

  // ====================
  /* USER CODE END USART1_Init 2 */

}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001c8 	.word	0x200001c8
 800090c:	40013800 	.word	0x40013800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	2414      	movs	r4, #20
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	2314      	movs	r3, #20
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f007 f94b 	bl	8007bbc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b5d      	ldr	r3, [pc, #372]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0309      	lsls	r1, r1, #12
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	031b      	lsls	r3, r3, #12
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000942:	4b56      	ldr	r3, [pc, #344]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000944:	695a      	ldr	r2, [r3, #20]
 8000946:	4b55      	ldr	r3, [pc, #340]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	03c9      	lsls	r1, r1, #15
 800094c:	430a      	orrs	r2, r1
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	4b52      	ldr	r3, [pc, #328]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	03db      	lsls	r3, r3, #15
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0289      	lsls	r1, r1, #10
 8000968:	430a      	orrs	r2, r1
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	029b      	lsls	r3, r3, #10
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <MX_GPIO_Init+0x18c>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	02c9      	lsls	r1, r1, #11
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x18c>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	02db      	lsls	r3, r3, #11
 8000990:	4013      	ands	r3, r2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|SPI2_RST_Pin, GPIO_PIN_RESET);
 8000996:	2381      	movs	r3, #129	; 0x81
 8000998:	0159      	lsls	r1, r3, #5
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2200      	movs	r2, #0
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fe71 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MX_GPIO_Init+0x190>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fe6b 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <MX_GPIO_Init+0x194>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	0019      	movs	r1, r3
 80009bc:	f000 fe64 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserBtn_Pin */
  GPIO_InitStruct.Pin = UserBtn_Pin;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	0192      	lsls	r2, r2, #6
 80009c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2284      	movs	r2, #132	; 0x84
 80009cc:	0392      	lsls	r2, r2, #14
 80009ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UserBtn_GPIO_Port, &GPIO_InitStruct);
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <MX_GPIO_Init+0x194>)
 80009da:	0019      	movs	r1, r3
 80009dc:	0010      	movs	r0, r2
 80009de:	f000 fce3 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin SPI2_RST_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|SPI2_RST_Pin;
 80009e2:	0021      	movs	r1, r4
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2281      	movs	r2, #129	; 0x81
 80009e8:	0152      	lsls	r2, r2, #5
 80009ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	000c      	movs	r4, r1
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	193a      	adds	r2, r7, r4
 8000a02:	2390      	movs	r3, #144	; 0x90
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fccd 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2202      	movs	r2, #2
 8000a12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2201      	movs	r2, #1
 8000a18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0x190>)
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	f000 fcbb 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2201      	movs	r2, #1
 8000a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0x194>)
 8000a54:	0019      	movs	r1, r3
 8000a56:	0010      	movs	r0, r2
 8000a58:	f000 fca6 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_INT_Pin */
  GPIO_InitStruct.Pin = SPI2_INT_Pin;
 8000a5c:	0021      	movs	r1, r4
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2288      	movs	r2, #136	; 0x88
 8000a6a:	0352      	lsls	r2, r2, #13
 8000a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI2_INT_GPIO_Port, &GPIO_InitStruct);
 8000a74:	187a      	adds	r2, r7, r1
 8000a76:	2390      	movs	r3, #144	; 0x90
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fc93 	bl	80013a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2007      	movs	r0, #7
 8000a88:	f000 fbde 	bl	8001248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a8c:	2007      	movs	r0, #7
 8000a8e:	f000 fbf0 	bl	8001272 <HAL_NVIC_EnableIRQ>

}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b00b      	add	sp, #44	; 0x2c
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	48000400 	.word	0x48000400
 8000aa4:	48000800 	.word	0x48000800

08000aa8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// ====================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	0002      	movs	r2, r0
 8000ab0:	1dbb      	adds	r3, r7, #6
 8000ab2:	801a      	strh	r2, [r3, #0]
	printf("EXTI_pin = %d\r\n", GPIO_Pin);
 8000ab4:	1dbb      	adds	r3, r7, #6
 8000ab6:	881a      	ldrh	r2, [r3, #0]
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_GPIO_EXTI_Callback+0x54>)
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f007 f885 	bl	8007bcc <iprintf>
	if (GPIO_Pin == UserBtn_Pin) {
 8000ac2:	1dbb      	adds	r3, r7, #6
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d107      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x36>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f000 fdf3 	bl	80016c2 <HAL_GPIO_TogglePin>
	} else if (GPIO_Pin == SPI2_INT_Pin) {
		printf("Got LAN module's interrupt");
	}

}
 8000adc:	e009      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0x4a>
	} else if (GPIO_Pin == SPI2_INT_Pin) {
 8000ade:	1dbb      	adds	r3, r7, #6
 8000ae0:	881a      	ldrh	r2, [r3, #0]
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d103      	bne.n	8000af2 <HAL_GPIO_EXTI_Callback+0x4a>
		printf("Got LAN module's interrupt");
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f007 f86d 	bl	8007bcc <iprintf>
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	08008e1c 	.word	0x08008e1c
 8000b00:	48000800 	.word	0x48000800
 8000b04:	08008e2c 	.word	0x08008e2c

08000b08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d128      	bne.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0x64>
		static uint32_t seconds = 0;
		++seconds;
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b22:	601a      	str	r2, [r3, #0]
		printf("%02d:%02d:%02d\r\n",
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	22e1      	movs	r2, #225	; 0xe1
 8000b2a:	0111      	lsls	r1, r2, #4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff faf5 	bl	800011c <__udivsi3>
 8000b32:	0003      	movs	r3, r0
 8000b34:	001c      	movs	r4, r3
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	213c      	movs	r1, #60	; 0x3c
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff faed 	bl	800011c <__udivsi3>
 8000b42:	0003      	movs	r3, r0
 8000b44:	001d      	movs	r5, r3
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	213c      	movs	r1, #60	; 0x3c
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fb6b 	bl	8000228 <__aeabi_uidivmod>
 8000b52:	000b      	movs	r3, r1
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b56:	002a      	movs	r2, r5
 8000b58:	0021      	movs	r1, r4
 8000b5a:	f007 f837 	bl	8007bcc <iprintf>
		       seconds / 60 / 60,
		       seconds / 60,
		       seconds % 60
		       );
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b5e:	2390      	movs	r3, #144	; 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2120      	movs	r1, #32
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fdac 	bl	80016c2 <HAL_GPIO_TogglePin>
	} else if (htim->Instance == TIM3 && !ip_assigned) {
//		DHCP_run();
	}
}
 8000b6a:	e006      	b.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x72>
	} else if (htim->Instance == TIM3 && !ip_assigned) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x72>
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bdb0      	pop	{r4, r5, r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	20000650 	.word	0x20000650
 8000b8c:	08008e48 	.word	0x08008e48
 8000b90:	40000400 	.word	0x40000400
 8000b94:	2000064c 	.word	0x2000064c

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	// ====================
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_MspInit+0x44>)
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_MspInit+0x44>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	619a      	str	r2, [r3, #24]
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_MspInit+0x44>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x44>)
 8000bc4:	69da      	ldr	r2, [r3, #28]
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_MspInit+0x44>)
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0549      	lsls	r1, r1, #21
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	61da      	str	r2, [r3, #28]
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_MspInit+0x44>)
 8000bd2:	69da      	ldr	r2, [r3, #28]
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	055b      	lsls	r3, r3, #21
 8000bd8:	4013      	ands	r3, r2
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b08b      	sub	sp, #44	; 0x2c
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	2414      	movs	r4, #20
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f006 ffdc 	bl	8007bbc <memset>
  if(hspi->Instance==SPI2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <HAL_SPI_MspInit+0xa0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d13a      	bne.n	8000c84 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_SPI_MspInit+0xa4>)
 8000c10:	69da      	ldr	r2, [r3, #28]
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <HAL_SPI_MspInit+0xa4>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	01c9      	lsls	r1, r1, #7
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	61da      	str	r2, [r3, #28]
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_SPI_MspInit+0xa4>)
 8000c1e:	69da      	ldr	r2, [r3, #28]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	01db      	lsls	r3, r3, #7
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_SPI_MspInit+0xa4>)
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_SPI_MspInit+0xa4>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	02c9      	lsls	r1, r1, #11
 8000c34:	430a      	orrs	r2, r1
 8000c36:	615a      	str	r2, [r3, #20]
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_SPI_MspInit+0xa4>)
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	02db      	lsls	r3, r3, #11
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	22e0      	movs	r2, #224	; 0xe0
 8000c4a:	0212      	lsls	r2, r2, #8
 8000c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	0021      	movs	r1, r4
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2202      	movs	r2, #2
 8000c54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_SPI_MspInit+0xa8>)
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	0010      	movs	r0, r2
 8000c70:	f000 fb9a 	bl	80013a8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	201a      	movs	r0, #26
 8000c7a:	f000 fae5 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c7e:	201a      	movs	r0, #26
 8000c80:	f000 faf7 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b00b      	add	sp, #44	; 0x2c
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	40003800 	.word	0x40003800
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48000400 	.word	0x48000400

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <HAL_TIM_Base_MspInit+0x8c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d11e      	bne.n	8000ce8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_TIM_Base_MspInit+0x90>)
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_TIM_Base_MspInit+0x90>)
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	0109      	lsls	r1, r1, #4
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_TIM_Base_MspInit+0x90>)
 8000cba:	699a      	ldr	r2, [r3, #24]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	200d      	movs	r0, #13
 8000ccc:	f000 fabc 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000cd0:	200d      	movs	r0, #13
 8000cd2:	f000 face 	bl	8001272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	200e      	movs	r0, #14
 8000cdc:	f000 fab4 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ce0:	200e      	movs	r0, #14
 8000ce2:	f000 fac6 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ce6:	e018      	b.n	8000d1a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_TIM_Base_MspInit+0x94>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d113      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x90>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_TIM_Base_MspInit+0x90>)
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	61da      	str	r2, [r3, #28]
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x90>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	2202      	movs	r2, #2
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f000 fa9a 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d14:	2010      	movs	r0, #16
 8000d16:	f000 faac 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40000400 	.word	0x40000400

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	2414      	movs	r4, #20
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f006 ff3a 	bl	8007bbc <memset>
  if(huart->Instance==USART1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_UART_MspInit+0xa4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13b      	bne.n	8000dca <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	01c9      	lsls	r1, r1, #7
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	619a      	str	r2, [r3, #24]
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	0289      	lsls	r1, r1, #10
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	22c0      	movs	r2, #192	; 0xc0
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	0021      	movs	r1, r4
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2203      	movs	r2, #3
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	2390      	movs	r3, #144	; 0x90
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 faf7 	bl	80013a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	201b      	movs	r0, #27
 8000dc0:	f000 fa42 	bl	8001248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc4:	201b      	movs	r0, #27
 8000dc6:	f000 fa54 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b00b      	add	sp, #44	; 0x2c
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40021000 	.word	0x40021000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  static uint16_t ticks = 0;
  if(++ticks == 1000) {
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <SysTick_Handler+0x30>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <SysTick_Handler+0x30>)
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <SysTick_Handler+0x30>)
 8000e0e:	881a      	ldrh	r2, [r3, #0]
 8000e10:	23fa      	movs	r3, #250	; 0xfa
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d104      	bne.n	8000e22 <SysTick_Handler+0x26>
		DHCP_time_handler();
 8000e18:	f006 fdfa 	bl	8007a10 <DHCP_time_handler>
		ticks = 0;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <SysTick_Handler+0x30>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 f949 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000654 	.word	0x20000654

08000e30 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_INT_Pin);
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f000 fc5d 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UserBtn_Pin);
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 fc58 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f002 fa5e 	bl	8003318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000138 	.word	0x20000138

08000e68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <TIM1_CC_IRQHandler+0x14>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 fa52 	bl	8003318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	20000138 	.word	0x20000138

08000e80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <TIM3_IRQHandler+0x14>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f002 fa46 	bl	8003318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	20000180 	.word	0x20000180

08000e98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <SPI2_IRQHandler+0x14>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 feae 	bl	8002c00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	200000d4 	.word	0x200000d4

08000eb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <USART1_IRQHandler+0x14>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f002 feae 	bl	8003c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	200001c8 	.word	0x200001c8

08000ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e00a      	b.n	8000ef0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eda:	e000      	b.n	8000ede <_read+0x16>
 8000edc:	bf00      	nop
 8000ede:	0001      	movs	r1, r0
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60ba      	str	r2, [r7, #8]
 8000ee6:	b2ca      	uxtb	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf0      	blt.n	8000eda <_read+0x12>
	}

return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b006      	add	sp, #24
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return -1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	425b      	negs	r3, r3
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	0192      	lsls	r2, r2, #6
 8000f26:	605a      	str	r2, [r3, #4]
	return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_isatty>:

int _isatty(int file)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
	return 1;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f006 fdec 	bl	8007b68 <__errno>
 8000f90:	0003      	movs	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	18d2      	adds	r2, r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20002000 	.word	0x20002000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000658 	.word	0x20000658
 8000fc4:	200006c8 	.word	0x200006c8

08000fc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <LoopForever+0xe>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff0:	4c0b      	ldr	r4, [pc, #44]	; (8001020 <LoopForever+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ffe:	f7ff ffe3 	bl	8000fc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001002:	f006 fdb7 	bl	8007b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001006:	f7ff f9b1 	bl	800036c <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   r0, =_estack
 800100c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001018:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 800101c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001020:	200006c8 	.word	0x200006c8

08001024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>
	...

08001028 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_Init+0x24>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_Init+0x24>)
 8001032:	2110      	movs	r1, #16
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f809 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103e:	f7ff fdb1 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_InitTick+0x5c>)
 800105a:	681c      	ldr	r4, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_InitTick+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	0019      	movs	r1, r3
 8001062:	23fa      	movs	r3, #250	; 0xfa
 8001064:	0098      	lsls	r0, r3, #2
 8001066:	f7ff f859 	bl	800011c <__udivsi3>
 800106a:	0003      	movs	r3, r0
 800106c:	0019      	movs	r1, r3
 800106e:	0020      	movs	r0, r4
 8001070:	f7ff f854 	bl	800011c <__udivsi3>
 8001074:	0003      	movs	r3, r0
 8001076:	0018      	movs	r0, r3
 8001078:	f000 f90b 	bl	8001292 <HAL_SYSTICK_Config>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00f      	b.n	80010a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d80b      	bhi.n	80010a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	2301      	movs	r3, #1
 800108e:	425b      	negs	r3, r3
 8001090:	2200      	movs	r2, #0
 8001092:	0018      	movs	r0, r3
 8001094:	f000 f8d8 	bl	8001248 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_InitTick+0x64>)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x1c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	001a      	movs	r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x20>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	18d2      	adds	r2, r2, r3
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_IncTick+0x20>)
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000008 	.word	0x20000008
 80010d8:	2000065c 	.word	0x2000065c

080010dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <HAL_GetTick+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	2000065c 	.word	0x2000065c

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	0002      	movs	r2, r0
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b7f      	cmp	r3, #127	; 0x7f
 8001102:	d809      	bhi.n	8001118 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	001a      	movs	r2, r3
 800110a:	231f      	movs	r3, #31
 800110c:	401a      	ands	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_EnableIRQ+0x30>)
 8001110:	2101      	movs	r1, #1
 8001112:	4091      	lsls	r1, r2
 8001114:	000a      	movs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
  }
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b7f      	cmp	r3, #127	; 0x7f
 8001138:	d828      	bhi.n	800118c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b25b      	sxtb	r3, r3
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	33c0      	adds	r3, #192	; 0xc0
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	589b      	ldr	r3, [r3, r2]
 800114a:	1dfa      	adds	r2, r7, #7
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	0011      	movs	r1, r2
 8001150:	2203      	movs	r2, #3
 8001152:	400a      	ands	r2, r1
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	21ff      	movs	r1, #255	; 0xff
 8001158:	4091      	lsls	r1, r2
 800115a:	000a      	movs	r2, r1
 800115c:	43d2      	mvns	r2, r2
 800115e:	401a      	ands	r2, r3
 8001160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	401a      	ands	r2, r3
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	2303      	movs	r3, #3
 8001172:	4003      	ands	r3, r0
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	481f      	ldr	r0, [pc, #124]	; (80011f8 <__NVIC_SetPriority+0xd4>)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	430a      	orrs	r2, r1
 8001184:	33c0      	adds	r3, #192	; 0xc0
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800118a:	e031      	b.n	80011f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <__NVIC_SetPriority+0xd8>)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0019      	movs	r1, r3
 8001194:	230f      	movs	r3, #15
 8001196:	400b      	ands	r3, r1
 8001198:	3b08      	subs	r3, #8
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3306      	adds	r3, #6
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	3304      	adds	r3, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1dfa      	adds	r2, r7, #7
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	0011      	movs	r1, r2
 80011ac:	2203      	movs	r2, #3
 80011ae:	400a      	ands	r2, r1
 80011b0:	00d2      	lsls	r2, r2, #3
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	43d2      	mvns	r2, r2
 80011ba:	401a      	ands	r2, r3
 80011bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	401a      	ands	r2, r3
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	4003      	ands	r3, r0
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <__NVIC_SetPriority+0xd8>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	001c      	movs	r4, r3
 80011dc:	230f      	movs	r3, #15
 80011de:	4023      	ands	r3, r4
 80011e0:	3b08      	subs	r3, #8
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	430a      	orrs	r2, r1
 80011e6:	3306      	adds	r3, #6
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	18c3      	adds	r3, r0, r3
 80011ec:	3304      	adds	r3, #4
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b003      	add	sp, #12
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	045b      	lsls	r3, r3, #17
 8001210:	429a      	cmp	r2, r3
 8001212:	d301      	bcc.n	8001218 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001214:	2301      	movs	r3, #1
 8001216:	e010      	b.n	800123a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SysTick_Config+0x44>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	3a01      	subs	r2, #1
 800121e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001220:	2301      	movs	r3, #1
 8001222:	425b      	negs	r3, r3
 8001224:	2103      	movs	r1, #3
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff ff7c 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x44>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x44>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	210f      	movs	r1, #15
 8001254:	187b      	adds	r3, r7, r1
 8001256:	1c02      	adds	r2, r0, #0
 8001258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	187b      	adds	r3, r7, r1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	0011      	movs	r1, r2
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	0002      	movs	r2, r0
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ffaf 	bl	8001200 <SysTick_Config>
 80012a2:	0003      	movs	r3, r0
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2221      	movs	r2, #33	; 0x21
 80012b8:	5c9b      	ldrb	r3, [r3, r2]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d008      	beq.n	80012d2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2204      	movs	r2, #4
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	2100      	movs	r1, #0
 80012cc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e020      	b.n	8001314 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	210e      	movs	r1, #14
 80012de:	438a      	bics	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	438a      	bics	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fa:	2101      	movs	r1, #1
 80012fc:	4091      	lsls	r1, r2
 80012fe:	000a      	movs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2221      	movs	r2, #33	; 0x21
 8001306:	2101      	movs	r1, #1
 8001308:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2220      	movs	r2, #32
 800130e:	2100      	movs	r1, #0
 8001310:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001324:	210f      	movs	r1, #15
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2221      	movs	r2, #33	; 0x21
 8001330:	5c9b      	ldrb	r3, [r3, r2]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d006      	beq.n	8001346 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e028      	b.n	8001398 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	210e      	movs	r1, #14
 8001352:	438a      	bics	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	438a      	bics	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136e:	2101      	movs	r1, #1
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2221      	movs	r2, #33	; 0x21
 800137a:	2101      	movs	r1, #1
 800137c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	0010      	movs	r0, r2
 8001396:	4798      	blx	r3
    } 
  }
  return status;
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781b      	ldrb	r3, [r3, #0]
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	e14f      	b.n	8001658 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2101      	movs	r1, #1
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4091      	lsls	r1, r2
 80013c2:	000a      	movs	r2, r1
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <HAL_GPIO_Init+0x28>
 80013ce:	e140      	b.n	8001652 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d005      	beq.n	80013e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	2201      	movs	r2, #1
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	4013      	ands	r3, r2
 8001452:	2b03      	cmp	r3, #3
 8001454:	d017      	beq.n	8001486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	4013      	ands	r3, r2
 800148e:	2b02      	cmp	r3, #2
 8001490:	d123      	bne.n	80014da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	58d3      	ldr	r3, [r2, r3]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2207      	movs	r2, #7
 80014a4:	4013      	ands	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2107      	movs	r1, #7
 80014be:	400b      	ands	r3, r1
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	6939      	ldr	r1, [r7, #16]
 80014d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	401a      	ands	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d100      	bne.n	800151c <HAL_GPIO_Init+0x174>
 800151a:	e09a      	b.n	8001652 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	4b54      	ldr	r3, [pc, #336]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001534:	4a4f      	ldr	r2, [pc, #316]	; (8001674 <HAL_GPIO_Init+0x2cc>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	589b      	ldr	r3, [r3, r2]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2203      	movs	r2, #3
 8001546:	4013      	ands	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	2390      	movs	r3, #144	; 0x90
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	429a      	cmp	r2, r3
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x1e2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a44      	ldr	r2, [pc, #272]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x1de>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a43      	ldr	r2, [pc, #268]	; (800167c <HAL_GPIO_Init+0x2d4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x1da>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a42      	ldr	r2, [pc, #264]	; (8001680 <HAL_GPIO_Init+0x2d8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x1d6>
 800157a:	2303      	movs	r3, #3
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 800157e:	2305      	movs	r3, #5
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x1e4>
 800158a:	2300      	movs	r3, #0
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	2103      	movs	r1, #3
 8001590:	400a      	ands	r2, r1
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <HAL_GPIO_Init+0x2cc>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	4013      	ands	r3, r2
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43da      	mvns	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	029b      	lsls	r3, r3, #10
 80015ec:	4013      	ands	r3, r2
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	035b      	lsls	r3, r3, #13
 8001616:	4013      	ands	r3, r2
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43da      	mvns	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	039b      	lsls	r3, r3, #14
 8001640:	4013      	ands	r3, r2
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	40da      	lsrs	r2, r3
 8001660:	1e13      	subs	r3, r2, #0
 8001662:	d000      	beq.n	8001666 <HAL_GPIO_Init+0x2be>
 8001664:	e6a8      	b.n	80013b8 <HAL_GPIO_Init+0x10>
  } 
}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b006      	add	sp, #24
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800
 8001680:	48000c00 	.word	0x48000c00
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	0008      	movs	r0, r1
 8001692:	0011      	movs	r1, r2
 8001694:	1cbb      	adds	r3, r7, #2
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	801a      	strh	r2, [r3, #0]
 800169a:	1c7b      	adds	r3, r7, #1
 800169c:	1c0a      	adds	r2, r1, #0
 800169e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a0:	1c7b      	adds	r3, r7, #1
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a8:	1cbb      	adds	r3, r7, #2
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b2:	1cbb      	adds	r3, r7, #2
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	000a      	movs	r2, r1
 80016cc:	1cbb      	adds	r3, r7, #2
 80016ce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	041a      	lsls	r2, r3, #16
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	1cb9      	adds	r1, r7, #2
 80016e6:	8809      	ldrh	r1, [r1, #0]
 80016e8:	400b      	ands	r3, r1
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b004      	add	sp, #16
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	0002      	movs	r2, r0
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	1dba      	adds	r2, r7, #6
 800170a:	8812      	ldrh	r2, [r2, #0]
 800170c:	4013      	ands	r3, r2
 800170e:	d008      	beq.n	8001722 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001712:	1dba      	adds	r2, r7, #6
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff f9c3 	bl	8000aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e301      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0x1e>
 800174c:	e08d      	b.n	800186a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800174e:	4bc3      	ldr	r3, [pc, #780]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	220c      	movs	r2, #12
 8001754:	4013      	ands	r3, r2
 8001756:	2b04      	cmp	r3, #4
 8001758:	d00e      	beq.n	8001778 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800175a:	4bc0      	ldr	r3, [pc, #768]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	220c      	movs	r2, #12
 8001760:	4013      	ands	r3, r2
 8001762:	2b08      	cmp	r3, #8
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x64>
 8001766:	4bbd      	ldr	r3, [pc, #756]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	401a      	ands	r2, r3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	429a      	cmp	r2, r3
 8001776:	d10d      	bne.n	8001794 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	4bb8      	ldr	r3, [pc, #736]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	029b      	lsls	r3, r3, #10
 8001780:	4013      	ands	r3, r2
 8001782:	d100      	bne.n	8001786 <HAL_RCC_OscConfig+0x56>
 8001784:	e070      	b.n	8001868 <HAL_RCC_OscConfig+0x138>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d000      	beq.n	8001790 <HAL_RCC_OscConfig+0x60>
 800178e:	e06b      	b.n	8001868 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e2d8      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x7c>
 800179c:	4baf      	ldr	r3, [pc, #700]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4bae      	ldr	r3, [pc, #696]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	0249      	lsls	r1, r1, #9
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e02f      	b.n	800180c <HAL_RCC_OscConfig+0xdc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <HAL_RCC_OscConfig+0x9e>
 80017b4:	4ba9      	ldr	r3, [pc, #676]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4ba8      	ldr	r3, [pc, #672]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017ba:	49a9      	ldr	r1, [pc, #676]	; (8001a60 <HAL_RCC_OscConfig+0x330>)
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4ba6      	ldr	r3, [pc, #664]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4ba5      	ldr	r3, [pc, #660]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017c6:	49a7      	ldr	r1, [pc, #668]	; (8001a64 <HAL_RCC_OscConfig+0x334>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e01e      	b.n	800180c <HAL_RCC_OscConfig+0xdc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d10e      	bne.n	80017f4 <HAL_RCC_OscConfig+0xc4>
 80017d6:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4ba0      	ldr	r3, [pc, #640]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	02c9      	lsls	r1, r1, #11
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	4b9d      	ldr	r3, [pc, #628]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b9c      	ldr	r3, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0249      	lsls	r1, r1, #9
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0xdc>
 80017f4:	4b99      	ldr	r3, [pc, #612]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b98      	ldr	r3, [pc, #608]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017fa:	4999      	ldr	r1, [pc, #612]	; (8001a60 <HAL_RCC_OscConfig+0x330>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b95      	ldr	r3, [pc, #596]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001806:	4997      	ldr	r1, [pc, #604]	; (8001a64 <HAL_RCC_OscConfig+0x334>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d014      	beq.n	800183e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc62 	bl	80010dc <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181e:	f7ff fc5d 	bl	80010dc <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	; 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e28a      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001830:	4b8a      	ldr	r3, [pc, #552]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	029b      	lsls	r3, r3, #10
 8001838:	4013      	ands	r3, r2
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0xee>
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fc4d 	bl	80010dc <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fc48 	bl	80010dc <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e275      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	4013      	ands	r3, r2
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x118>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d100      	bne.n	8001876 <HAL_RCC_OscConfig+0x146>
 8001874:	e069      	b.n	800194a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001876:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	220c      	movs	r2, #12
 800187c:	4013      	ands	r3, r2
 800187e:	d00b      	beq.n	8001898 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001880:	4b76      	ldr	r3, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	220c      	movs	r2, #12
 8001886:	4013      	ands	r3, r2
 8001888:	2b08      	cmp	r3, #8
 800188a:	d11c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x196>
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	025b      	lsls	r3, r3, #9
 8001894:	4013      	ands	r3, r2
 8001896:	d116      	bne.n	80018c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2202      	movs	r2, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x17e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e24b      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	22f8      	movs	r2, #248	; 0xf8
 80018b4:	4393      	bics	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	00da      	lsls	r2, r3, #3
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c4:	e041      	b.n	800194a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d024      	beq.n	8001918 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fbff 	bl	80010dc <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fbfa 	bl	80010dc <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e227      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2202      	movs	r2, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	d0f1      	beq.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	22f8      	movs	r2, #248	; 0xf8
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00da      	lsls	r2, r3, #3
 8001910:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e018      	b.n	800194a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fbda 	bl	80010dc <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff fbd5 	bl	80010dc <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e202      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d1f1      	bne.n	800192e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2208      	movs	r2, #8
 8001950:	4013      	ands	r3, r2
 8001952:	d036      	beq.n	80019c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d019      	beq.n	8001990 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800195e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001960:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001962:	2101      	movs	r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fbb8 	bl	80010dc <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fbb3 	bl	80010dc <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1e0      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d0f1      	beq.n	8001972 <HAL_RCC_OscConfig+0x242>
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001996:	2101      	movs	r1, #1
 8001998:	438a      	bics	r2, r1
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fb9e 	bl	80010dc <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff fb99 	bl	80010dc <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1c6      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2202      	movs	r2, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f1      	bne.n	80019a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	4013      	ands	r3, r2
 80019ca:	d100      	bne.n	80019ce <HAL_RCC_OscConfig+0x29e>
 80019cc:	e0b4      	b.n	8001b38 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	201f      	movs	r0, #31
 80019d0:	183b      	adds	r3, r7, r0
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	055b      	lsls	r3, r3, #21
 80019de:	4013      	ands	r3, r2
 80019e0:	d110      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0549      	lsls	r1, r1, #21
 80019ec:	430a      	orrs	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	055b      	lsls	r3, r3, #21
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019fe:	183b      	adds	r3, r7, r0
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d11a      	bne.n	8001a46 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0049      	lsls	r1, r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb5d 	bl	80010dc <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a28:	f7ff fb58 	bl	80010dc <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e185      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10e      	bne.n	8001a6c <HAL_RCC_OscConfig+0x33c>
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001a50:	6a1a      	ldr	r2, [r3, #32]
 8001a52:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	621a      	str	r2, [r3, #32]
 8001a5a:	e035      	b.n	8001ac8 <HAL_RCC_OscConfig+0x398>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	fffeffff 	.word	0xfffeffff
 8001a64:	fffbffff 	.word	0xfffbffff
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x35e>
 8001a74:	4bb6      	ldr	r3, [pc, #728]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	4bb5      	ldr	r3, [pc, #724]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	621a      	str	r2, [r3, #32]
 8001a80:	4bb3      	ldr	r3, [pc, #716]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4bb2      	ldr	r3, [pc, #712]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a86:	2104      	movs	r1, #4
 8001a88:	438a      	bics	r2, r1
 8001a8a:	621a      	str	r2, [r3, #32]
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x398>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x380>
 8001a96:	4bae      	ldr	r3, [pc, #696]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	4bad      	ldr	r3, [pc, #692]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	621a      	str	r2, [r3, #32]
 8001aa2:	4bab      	ldr	r3, [pc, #684]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001aa4:	6a1a      	ldr	r2, [r3, #32]
 8001aa6:	4baa      	ldr	r3, [pc, #680]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	621a      	str	r2, [r3, #32]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x398>
 8001ab0:	4ba7      	ldr	r3, [pc, #668]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	4ba6      	ldr	r3, [pc, #664]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	621a      	str	r2, [r3, #32]
 8001abc:	4ba4      	ldr	r3, [pc, #656]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001abe:	6a1a      	ldr	r2, [r3, #32]
 8001ac0:	4ba3      	ldr	r3, [pc, #652]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d014      	beq.n	8001afa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fb04 	bl	80010dc <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff faff 	bl	80010dc <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a9b      	ldr	r2, [pc, #620]	; (8001d54 <HAL_RCC_OscConfig+0x624>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e12b      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x3aa>
 8001af8:	e013      	b.n	8001b22 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff faef 	bl	80010dc <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b02:	e009      	b.n	8001b18 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff faea 	bl	80010dc <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	4a91      	ldr	r2, [pc, #580]	; (8001d54 <HAL_RCC_OscConfig+0x624>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e116      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b18:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b22:	231f      	movs	r3, #31
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b32:	4989      	ldr	r1, [pc, #548]	; (8001d58 <HAL_RCC_OscConfig+0x628>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d12a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4e:	4b80      	ldr	r3, [pc, #512]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b50:	2104      	movs	r1, #4
 8001b52:	430a      	orrs	r2, r1
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b56:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5a:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fabb 	bl	80010dc <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b6c:	f7ff fab6 	bl	80010dc <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0e3      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b7e:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0f1      	beq.n	8001b6c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b88:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	22f8      	movs	r2, #248	; 0xf8
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9e:	e034      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	3305      	adds	r3, #5
 8001ba6:	d111      	bne.n	8001bcc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ba8:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bac:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bae:	2104      	movs	r1, #4
 8001bb0:	438a      	bics	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	22f8      	movs	r2, #248	; 0xf8
 8001bba:	4393      	bics	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	00da      	lsls	r2, r3, #3
 8001bc4:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bca:	e01e      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bcc:	4b60      	ldr	r3, [pc, #384]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd0:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bd8:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bdc:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	438a      	bics	r2, r1
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa7a 	bl	80010dc <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bee:	f7ff fa75 	bl	80010dc <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0a2      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	2202      	movs	r2, #2
 8001c06:	4013      	ands	r3, r2
 8001c08:	d1f1      	bne.n	8001bee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d100      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4e4>
 8001c12:	e097      	b.n	8001d44 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	220c      	movs	r2, #12
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4f2>
 8001c20:	e06b      	b.n	8001cfa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d14c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c30:	494a      	ldr	r1, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x62c>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fa51 	bl	80010dc <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff fa4c 	bl	80010dc <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e079      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	049b      	lsls	r3, r3, #18
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	220f      	movs	r2, #15
 8001c64:	4393      	bics	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a3a      	ldr	r2, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x630>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	431a      	orrs	r2, r3
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0449      	lsls	r1, r1, #17
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fa1f 	bl	80010dc <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff fa1a 	bl	80010dc <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e047      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	049b      	lsls	r3, r3, #18
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x574>
 8001cc2:	e03f      	b.n	8001d44 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cca:	4924      	ldr	r1, [pc, #144]	; (8001d5c <HAL_RCC_OscConfig+0x62c>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fa04 	bl	80010dc <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff f9ff 	bl	80010dc <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e02c      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	049b      	lsls	r3, r3, #18
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x5aa>
 8001cf8:	e024      	b.n	8001d44 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e01f      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d10e      	bne.n	8001d40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	220f      	movs	r2, #15
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	23f0      	movs	r3, #240	; 0xf0
 8001d34:	039b      	lsls	r3, r3, #14
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b008      	add	sp, #32
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	00001388 	.word	0x00001388
 8001d58:	efffffff 	.word	0xefffffff
 8001d5c:	feffffff 	.word	0xfeffffff
 8001d60:	ffc2ffff 	.word	0xffc2ffff

08001d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b3      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d911      	bls.n	8001daa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e09a      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d015      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d006      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dbe:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	21e0      	movs	r1, #224	; 0xe0
 8001dc6:	00c9      	lsls	r1, r1, #3
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	22f0      	movs	r2, #240	; 0xf0
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d040      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d114      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06e      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b38      	ldr	r3, [pc, #224]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	049b      	lsls	r3, r3, #18
 8001e12:	4013      	ands	r3, r2
 8001e14:	d108      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e062      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e05b      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	4393      	bics	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e3c:	f7ff f94e 	bl	80010dc <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7ff f949 	bl	80010dc <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_RCC_ClockConfig+0x18c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e042      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	220c      	movs	r2, #12
 8001e60:	401a      	ands	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1ec      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d211      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e020      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_RCC_ClockConfig+0x190>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ebc:	f000 f820 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001ec0:	0001      	movs	r1, r0
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	220f      	movs	r2, #15
 8001eca:	4013      	ands	r3, r2
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x194>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	40da      	lsrs	r2, r3
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x198>)
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f7ff f8b9 	bl	8001050 <HAL_InitTick>
  
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	00001388 	.word	0x00001388
 8001ef4:	fffff8ff 	.word	0xfffff8ff
 8001ef8:	08008e90 	.word	0x08008e90
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b08f      	sub	sp, #60	; 0x3c
 8001f04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f06:	2314      	movs	r3, #20
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	4a2b      	ldr	r2, [pc, #172]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f28:	2300      	movs	r3, #0
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	220c      	movs	r2, #12
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d002      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x4a>
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d003      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x50>
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f4e:	e02d      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	220f      	movs	r2, #15
 8001f56:	4013      	ands	r3, r2
 8001f58:	2214      	movs	r2, #20
 8001f5a:	18ba      	adds	r2, r7, r2
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	220f      	movs	r2, #15
 8001f66:	4013      	ands	r3, r2
 8001f68:	1d3a      	adds	r2, r7, #4
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f7a:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f7c:	f7fe f8ce 	bl	800011c <__udivsi3>
 8001f80:	0003      	movs	r3, r0
 8001f82:	001a      	movs	r2, r3
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	4353      	muls	r3, r2
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8e:	000a      	movs	r2, r1
 8001f90:	0152      	lsls	r2, r2, #5
 8001f92:	1a52      	subs	r2, r2, r1
 8001f94:	0193      	lsls	r3, r2, #6
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	185b      	adds	r3, r3, r1
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa4:	e002      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001faa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b00f      	add	sp, #60	; 0x3c
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	08008e5c 	.word	0x08008e5c
 8001fbc:	08008e6c 	.word	0x08008e6c
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	007a1200 	.word	0x007a1200

08001fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000000 	.word	0x20000000

08001fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fe0:	f7ff fff2 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe4:	0001      	movs	r1, r0
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	2207      	movs	r2, #7
 8001fee:	4013      	ands	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	40d9      	lsrs	r1, r3
 8001ff6:	000b      	movs	r3, r1
}    
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40021000 	.word	0x40021000
 8002004:	08008ea0 	.word	0x08008ea0

08002008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	4013      	ands	r3, r2
 8002022:	d100      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002024:	e08e      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2017      	movs	r0, #23
 8002028:	183b      	adds	r3, r7, r0
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	055b      	lsls	r3, r3, #21
 8002036:	4013      	ands	r3, r2
 8002038:	d110      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0549      	lsls	r1, r1, #21
 8002044:	430a      	orrs	r2, r1
 8002046:	61da      	str	r2, [r3, #28]
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	055b      	lsls	r3, r3, #21
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	183b      	adds	r3, r7, r0
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4013      	ands	r3, r2
 8002066:	d11a      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002068:	4b49      	ldr	r3, [pc, #292]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b48      	ldr	r3, [pc, #288]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	0049      	lsls	r1, r1, #1
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7ff f831 	bl	80010dc <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	e008      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7ff f82c 	bl	80010dc <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e077      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4013      	ands	r3, r2
 800209c:	d0f0      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020a0:	6a1a      	ldr	r2, [r3, #32]
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d034      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	23c0      	movs	r3, #192	; 0xc0
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d02c      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a33      	ldr	r2, [pc, #204]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ca:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0249      	lsls	r1, r1, #9
 80020d4:	430a      	orrs	r2, r1
 80020d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020d8:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020de:	492e      	ldr	r1, [pc, #184]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fff3 	bl	80010dc <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe ffee 	bl	80010dc <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	4a25      	ldr	r2, [pc, #148]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e038      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	2202      	movs	r2, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d0f0      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800212a:	430a      	orrs	r2, r1
 800212c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800212e:	2317      	movs	r3, #23
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800213e:	4918      	ldr	r1, [pc, #96]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002140:	400a      	ands	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	2203      	movs	r2, #3
 8002154:	4393      	bics	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800215e:	430a      	orrs	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2220      	movs	r2, #32
 8002168:	4013      	ands	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	2210      	movs	r2, #16
 8002172:	4393      	bics	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800217c:	430a      	orrs	r2, r1
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b006      	add	sp, #24
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	fffffcff 	.word	0xfffffcff
 8002198:	fffeffff 	.word	0xfffeffff
 800219c:	00001388 	.word	0x00001388
 80021a0:	efffffff 	.word	0xefffffff

080021a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0a8      	b.n	8002308 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	2382      	movs	r3, #130	; 0x82
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d009      	beq.n	80021de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
 80021d0:	e005      	b.n	80021de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	225d      	movs	r2, #93	; 0x5d
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	225c      	movs	r2, #92	; 0x5c
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7fe fcf6 	bl	8000bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	225d      	movs	r2, #93	; 0x5d
 8002204:	2102      	movs	r1, #2
 8002206:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2140      	movs	r1, #64	; 0x40
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	23e0      	movs	r3, #224	; 0xe0
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	429a      	cmp	r2, r3
 8002222:	d902      	bls.n	800222a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e002      	b.n	8002230 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	015b      	lsls	r3, r3, #5
 800222e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	23f0      	movs	r3, #240	; 0xf0
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	429a      	cmp	r2, r3
 800223a:	d008      	beq.n	800224e <HAL_SPI_Init+0xaa>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	23e0      	movs	r3, #224	; 0xe0
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	429a      	cmp	r2, r3
 8002246:	d002      	beq.n	800224e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	2382      	movs	r3, #130	; 0x82
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	2384      	movs	r3, #132	; 0x84
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	400b      	ands	r3, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2102      	movs	r1, #2
 800226a:	400b      	ands	r3, r1
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2101      	movs	r1, #1
 8002274:	400b      	ands	r3, r1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6999      	ldr	r1, [r3, #24]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	400b      	ands	r3, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2138      	movs	r1, #56	; 0x38
 800228a:	400b      	ands	r3, r1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	400b      	ands	r3, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	0011      	movs	r1, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	2204      	movs	r2, #4
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2110      	movs	r1, #16
 80022bc:	400b      	ands	r3, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	2108      	movs	r1, #8
 80022c6:	400b      	ands	r3, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	23f0      	movs	r3, #240	; 0xf0
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	400b      	ands	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	0011      	movs	r1, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	401a      	ands	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4907      	ldr	r1, [pc, #28]	; (8002310 <HAL_SPI_Init+0x16c>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	225d      	movs	r2, #93	; 0x5d
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b004      	add	sp, #16
 800230e:	bd80      	pop	{r7, pc}
 8002310:	fffff7ff 	.word	0xfffff7ff

08002314 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	1dbb      	adds	r3, r7, #6
 8002322:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002324:	231f      	movs	r3, #31
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	225c      	movs	r2, #92	; 0x5c
 8002330:	5c9b      	ldrb	r3, [r3, r2]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_SPI_Transmit+0x26>
 8002336:	2302      	movs	r3, #2
 8002338:	e140      	b.n	80025bc <HAL_SPI_Transmit+0x2a8>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	225c      	movs	r2, #92	; 0x5c
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002342:	f7fe fecb 	bl	80010dc <HAL_GetTick>
 8002346:	0003      	movs	r3, r0
 8002348:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800234a:	2316      	movs	r3, #22
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	1dba      	adds	r2, r7, #6
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	225d      	movs	r2, #93	; 0x5d
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d004      	beq.n	800236a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002360:	231f      	movs	r3, #31
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
    goto error;
 8002368:	e11d      	b.n	80025a6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_SPI_Transmit+0x64>
 8002370:	1dbb      	adds	r3, r7, #6
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002380:	e111      	b.n	80025a6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	225d      	movs	r2, #93	; 0x5d
 8002386:	2103      	movs	r1, #3
 8002388:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1dba      	adds	r2, r7, #6
 800239a:	8812      	ldrh	r2, [r2, #0]
 800239c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1dba      	adds	r2, r7, #6
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2244      	movs	r2, #68	; 0x44
 80023b0:	2100      	movs	r1, #0
 80023b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2246      	movs	r2, #70	; 0x46
 80023b8:	2100      	movs	r1, #0
 80023ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d110      	bne.n	80023f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	01c9      	lsls	r1, r1, #7
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	4013      	ands	r3, r2
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d007      	beq.n	8002414 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2140      	movs	r1, #64	; 0x40
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	23e0      	movs	r3, #224	; 0xe0
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	429a      	cmp	r2, r3
 800241e:	d94e      	bls.n	80024be <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_SPI_Transmit+0x11e>
 8002428:	2316      	movs	r3, #22
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d13f      	bne.n	80024b2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002456:	e02c      	b.n	80024b2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d112      	bne.n	800248c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	1c9a      	adds	r2, r3, #2
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800248a:	e012      	b.n	80024b2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800248c:	f7fe fe26 	bl	80010dc <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d802      	bhi.n	80024a2 <HAL_SPI_Transmit+0x18e>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_SPI_Transmit+0x194>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2203      	movs	r2, #3
 80024ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80024b0:	e079      	b.n	80025a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1cd      	bne.n	8002458 <HAL_SPI_Transmit+0x144>
 80024bc:	e04f      	b.n	800255e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_SPI_Transmit+0x1bc>
 80024c6:	2316      	movs	r3, #22
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d141      	bne.n	8002554 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	7812      	ldrb	r2, [r2, #0]
 80024dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80024f6:	e02d      	b.n	8002554 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d113      	bne.n	800252e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800252c:	e012      	b.n	8002554 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252e:	f7fe fdd5 	bl	80010dc <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d802      	bhi.n	8002544 <HAL_SPI_Transmit+0x230>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	d102      	bne.n	800254a <HAL_SPI_Transmit+0x236>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800254a:	231f      	movs	r3, #31
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2203      	movs	r2, #3
 8002550:	701a      	strb	r2, [r3, #0]
          goto error;
 8002552:	e028      	b.n	80025a6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1cc      	bne.n	80024f8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fdf5 	bl	8003154 <SPI_EndRxTxTransaction>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d002      	beq.n	8002574 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e000      	b.n	80025a6 <HAL_SPI_Transmit+0x292>
  }

error:
 80025a4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	225d      	movs	r2, #93	; 0x5d
 80025aa:	2101      	movs	r1, #1
 80025ac:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	225c      	movs	r2, #92	; 0x5c
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025b6:	231f      	movs	r3, #31
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	781b      	ldrb	r3, [r3, #0]
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	b008      	add	sp, #32
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	1dbb      	adds	r3, r7, #6
 80025d2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d4:	2317      	movs	r3, #23
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2382      	movs	r3, #130	; 0x82
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d113      	bne.n	8002610 <HAL_SPI_Receive+0x4c>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10f      	bne.n	8002610 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	225d      	movs	r2, #93	; 0x5d
 80025f4:	2104      	movs	r1, #4
 80025f6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025f8:	1dbb      	adds	r3, r7, #6
 80025fa:	881c      	ldrh	r4, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	0023      	movs	r3, r4
 8002608:	f000 f928 	bl	800285c <HAL_SPI_TransmitReceive>
 800260c:	0003      	movs	r3, r0
 800260e:	e11c      	b.n	800284a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	225c      	movs	r2, #92	; 0x5c
 8002614:	5c9b      	ldrb	r3, [r3, r2]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_SPI_Receive+0x5a>
 800261a:	2302      	movs	r3, #2
 800261c:	e115      	b.n	800284a <HAL_SPI_Receive+0x286>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	225c      	movs	r2, #92	; 0x5c
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002626:	f7fe fd59 	bl	80010dc <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	225d      	movs	r2, #93	; 0x5d
 8002632:	5c9b      	ldrb	r3, [r3, r2]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d004      	beq.n	8002644 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800263a:	2317      	movs	r3, #23
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2202      	movs	r2, #2
 8002640:	701a      	strb	r2, [r3, #0]
    goto error;
 8002642:	e0f7      	b.n	8002834 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_SPI_Receive+0x8e>
 800264a:	1dbb      	adds	r3, r7, #6
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002652:	2317      	movs	r3, #23
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    goto error;
 800265a:	e0eb      	b.n	8002834 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	225d      	movs	r2, #93	; 0x5d
 8002660:	2104      	movs	r1, #4
 8002662:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1dba      	adds	r2, r7, #6
 8002674:	2144      	movs	r1, #68	; 0x44
 8002676:	8812      	ldrh	r2, [r2, #0]
 8002678:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1dba      	adds	r2, r7, #6
 800267e:	2146      	movs	r1, #70	; 0x46
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	23e0      	movs	r3, #224	; 0xe0
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d908      	bls.n	80026c0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4966      	ldr	r1, [pc, #408]	; (8002854 <HAL_SPI_Receive+0x290>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e008      	b.n	80026d2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0149      	lsls	r1, r1, #5
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10f      	bne.n	80026fe <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	438a      	bics	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4957      	ldr	r1, [pc, #348]	; (8002858 <HAL_SPI_Receive+0x294>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	4013      	ands	r3, r2
 8002708:	2b40      	cmp	r3, #64	; 0x40
 800270a:	d007      	beq.n	800271c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2140      	movs	r1, #64	; 0x40
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	23e0      	movs	r3, #224	; 0xe0
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	429a      	cmp	r2, r3
 8002726:	d900      	bls.n	800272a <HAL_SPI_Receive+0x166>
 8002728:	e069      	b.n	80027fe <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800272a:	e031      	b.n	8002790 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	2b01      	cmp	r3, #1
 8002738:	d117      	bne.n	800276a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	001a      	movs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2246      	movs	r2, #70	; 0x46
 800275a:	5a9b      	ldrh	r3, [r3, r2]
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b299      	uxth	r1, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2246      	movs	r2, #70	; 0x46
 8002766:	5299      	strh	r1, [r3, r2]
 8002768:	e012      	b.n	8002790 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276a:	f7fe fcb7 	bl	80010dc <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d802      	bhi.n	8002780 <HAL_SPI_Receive+0x1bc>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Receive+0x1c2>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002786:	2317      	movs	r3, #23
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2203      	movs	r2, #3
 800278c:	701a      	strb	r2, [r3, #0]
          goto error;
 800278e:	e051      	b.n	8002834 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2246      	movs	r2, #70	; 0x46
 8002794:	5a9b      	ldrh	r3, [r3, r2]
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1c7      	bne.n	800272c <HAL_SPI_Receive+0x168>
 800279c:	e035      	b.n	800280a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d115      	bne.n	80027d8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	b292      	uxth	r2, r2
 80027b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	1c9a      	adds	r2, r3, #2
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2246      	movs	r2, #70	; 0x46
 80027c8:	5a9b      	ldrh	r3, [r3, r2]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b299      	uxth	r1, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2246      	movs	r2, #70	; 0x46
 80027d4:	5299      	strh	r1, [r3, r2]
 80027d6:	e012      	b.n	80027fe <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027d8:	f7fe fc80 	bl	80010dc <HAL_GetTick>
 80027dc:	0002      	movs	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d802      	bhi.n	80027ee <HAL_SPI_Receive+0x22a>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	d102      	bne.n	80027f4 <HAL_SPI_Receive+0x230>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80027f4:	2317      	movs	r3, #23
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2203      	movs	r2, #3
 80027fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80027fc:	e01a      	b.n	8002834 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2246      	movs	r2, #70	; 0x46
 8002802:	5a9b      	ldrh	r3, [r3, r2]
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1c9      	bne.n	800279e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fc41 	bl	8003098 <SPI_EndRxTransaction>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d002      	beq.n	8002820 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002828:	2317      	movs	r3, #23
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e000      	b.n	8002834 <HAL_SPI_Receive+0x270>
  }

error :
 8002832:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	225d      	movs	r2, #93	; 0x5d
 8002838:	2101      	movs	r1, #1
 800283a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	225c      	movs	r2, #92	; 0x5c
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002844:	2317      	movs	r3, #23
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	781b      	ldrb	r3, [r3, #0]
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b007      	add	sp, #28
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	ffffefff 	.word	0xffffefff
 8002858:	ffffbfff 	.word	0xffffbfff

0800285c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	001a      	movs	r2, r3
 800286a:	1cbb      	adds	r3, r7, #2
 800286c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800286e:	2301      	movs	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002872:	2323      	movs	r3, #35	; 0x23
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	225c      	movs	r2, #92	; 0x5c
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x2c>
 8002884:	2302      	movs	r3, #2
 8002886:	e1b5      	b.n	8002bf4 <HAL_SPI_TransmitReceive+0x398>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	225c      	movs	r2, #92	; 0x5c
 800288c:	2101      	movs	r1, #1
 800288e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002890:	f7fe fc24 	bl	80010dc <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002898:	201b      	movs	r0, #27
 800289a:	183b      	adds	r3, r7, r0
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	215d      	movs	r1, #93	; 0x5d
 80028a0:	5c52      	ldrb	r2, [r2, r1]
 80028a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028aa:	2312      	movs	r3, #18
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	1cba      	adds	r2, r7, #2
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028b4:	183b      	adds	r3, r7, r0
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d011      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x84>
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	2382      	movs	r3, #130	; 0x82
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d107      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x7a>
 80028ce:	183b      	adds	r3, r7, r0
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d004      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80028d6:	2323      	movs	r3, #35	; 0x23
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	2202      	movs	r2, #2
 80028dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80028de:	e17e      	b.n	8002bde <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x98>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x98>
 80028ec:	1cbb      	adds	r3, r7, #2
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80028f4:	2323      	movs	r3, #35	; 0x23
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80028fc:	e16f      	b.n	8002bde <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	225d      	movs	r2, #93	; 0x5d
 8002902:	5c9b      	ldrb	r3, [r3, r2]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	225d      	movs	r2, #93	; 0x5d
 800290e:	2105      	movs	r1, #5
 8002910:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1cba      	adds	r2, r7, #2
 8002922:	2146      	movs	r1, #70	; 0x46
 8002924:	8812      	ldrh	r2, [r2, #0]
 8002926:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1cba      	adds	r2, r7, #2
 800292c:	2144      	movs	r1, #68	; 0x44
 800292e:	8812      	ldrh	r2, [r2, #0]
 8002930:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1cba      	adds	r2, r7, #2
 800293c:	8812      	ldrh	r2, [r2, #0]
 800293e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1cba      	adds	r2, r7, #2
 8002944:	8812      	ldrh	r2, [r2, #0]
 8002946:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	23e0      	movs	r3, #224	; 0xe0
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	429a      	cmp	r2, r3
 800295e:	d908      	bls.n	8002972 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	49a4      	ldr	r1, [pc, #656]	; (8002bfc <HAL_SPI_TransmitReceive+0x3a0>)
 800296c:	400a      	ands	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	e008      	b.n	8002984 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	0149      	lsls	r1, r1, #5
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	4013      	ands	r3, r2
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d007      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2140      	movs	r1, #64	; 0x40
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	23e0      	movs	r3, #224	; 0xe0
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d800      	bhi.n	80029b0 <HAL_SPI_TransmitReceive+0x154>
 80029ae:	e07f      	b.n	8002ab0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_SPI_TransmitReceive+0x168>
 80029b8:	2312      	movs	r3, #18
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d000      	beq.n	80029c4 <HAL_SPI_TransmitReceive+0x168>
 80029c2:	e069      	b.n	8002a98 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e8:	e056      	b.n	8002a98 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2202      	movs	r2, #2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d11b      	bne.n	8002a30 <HAL_SPI_TransmitReceive+0x1d4>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <HAL_SPI_TransmitReceive+0x1d4>
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d113      	bne.n	8002a30 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d11c      	bne.n	8002a78 <HAL_SPI_TransmitReceive+0x21c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2246      	movs	r2, #70	; 0x46
 8002a42:	5a9b      	ldrh	r3, [r3, r2]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	b292      	uxth	r2, r2
 8002a56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2246      	movs	r2, #70	; 0x46
 8002a66:	5a9b      	ldrh	r3, [r3, r2]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b299      	uxth	r1, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2246      	movs	r2, #70	; 0x46
 8002a72:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a74:	2301      	movs	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a78:	f7fe fb30 	bl	80010dc <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d807      	bhi.n	8002a98 <HAL_SPI_TransmitReceive+0x23c>
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	d004      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002a8e:	2323      	movs	r3, #35	; 0x23
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2203      	movs	r2, #3
 8002a94:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a96:	e0a2      	b.n	8002bde <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1a3      	bne.n	80029ea <HAL_SPI_TransmitReceive+0x18e>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2246      	movs	r2, #70	; 0x46
 8002aa6:	5a9b      	ldrh	r3, [r3, r2]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d19d      	bne.n	80029ea <HAL_SPI_TransmitReceive+0x18e>
 8002aae:	e085      	b.n	8002bbc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_SPI_TransmitReceive+0x268>
 8002ab8:	2312      	movs	r3, #18
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d000      	beq.n	8002ac4 <HAL_SPI_TransmitReceive+0x268>
 8002ac2:	e070      	b.n	8002ba6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	330c      	adds	r3, #12
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aea:	e05c      	b.n	8002ba6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d11c      	bne.n	8002b34 <HAL_SPI_TransmitReceive+0x2d8>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d017      	beq.n	8002b34 <HAL_SPI_TransmitReceive+0x2d8>
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d114      	bne.n	8002b34 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	7812      	ldrb	r2, [r2, #0]
 8002b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d11e      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x324>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2246      	movs	r2, #70	; 0x46
 8002b46:	5a9b      	ldrh	r3, [r3, r2]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d018      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	001a      	movs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2246      	movs	r2, #70	; 0x46
 8002b6e:	5a9b      	ldrh	r3, [r3, r2]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b299      	uxth	r1, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2246      	movs	r2, #70	; 0x46
 8002b7a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b80:	f7fe faac 	bl	80010dc <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d802      	bhi.n	8002b96 <HAL_SPI_TransmitReceive+0x33a>
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	3301      	adds	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_SPI_TransmitReceive+0x340>
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002b9c:	2323      	movs	r3, #35	; 0x23
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ba4:	e01b      	b.n	8002bde <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d19d      	bne.n	8002aec <HAL_SPI_TransmitReceive+0x290>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2246      	movs	r2, #70	; 0x46
 8002bb4:	5a9b      	ldrh	r3, [r3, r2]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d197      	bne.n	8002aec <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fac6 	bl	8003154 <SPI_EndRxTxTransaction>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002bcc:	2323      	movs	r3, #35	; 0x23
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	661a      	str	r2, [r3, #96]	; 0x60
 8002bda:	e000      	b.n	8002bde <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002bdc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	225d      	movs	r2, #93	; 0x5d
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	225c      	movs	r2, #92	; 0x5c
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bee:	2323      	movs	r3, #35	; 0x23
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	781b      	ldrb	r3, [r3, #0]
}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b00a      	add	sp, #40	; 0x28
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	ffffefff 	.word	0xffffefff

08002c00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	001a      	movs	r2, r3
 8002c1e:	2301      	movs	r3, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d10f      	bne.n	8002c44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c2a:	d00b      	beq.n	8002c44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	001a      	movs	r2, r3
 8002c32:	2301      	movs	r3, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d005      	beq.n	8002c44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	0010      	movs	r0, r2
 8002c40:	4798      	blx	r3
    return;
 8002c42:	e0d5      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	001a      	movs	r2, r3
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <HAL_SPI_IRQHandler+0x68>
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	09db      	lsrs	r3, r3, #7
 8002c54:	001a      	movs	r2, r3
 8002c56:	2301      	movs	r3, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d005      	beq.n	8002c68 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	0010      	movs	r0, r2
 8002c64:	4798      	blx	r3
    return;
 8002c66:	e0c3      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	2301      	movs	r3, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	d10c      	bne.n	8002c8e <HAL_SPI_IRQHandler+0x8e>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d106      	bne.n	8002c8e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	001a      	movs	r2, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <HAL_SPI_IRQHandler+0x8e>
 8002c8c:	e0b0      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1f0>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	001a      	movs	r2, r3
 8002c94:	2301      	movs	r3, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	d100      	bne.n	8002c9c <HAL_SPI_IRQHandler+0x9c>
 8002c9a:	e0a9      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d023      	beq.n	8002cf0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	225d      	movs	r2, #93	; 0x5d
 8002cac:	5c9b      	ldrb	r3, [r3, r2]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d011      	beq.n	8002cd8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	2204      	movs	r2, #4
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
        return;
 8002cee:	e07f      	b.n	8002df0 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d014      	beq.n	8002d26 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d00:	2201      	movs	r2, #1
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2140      	movs	r1, #64	; 0x40
 8002d20:	438a      	bics	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d00c      	beq.n	8002d4c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	2208      	movs	r2, #8
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d04c      	beq.n	8002dee <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	21e0      	movs	r1, #224	; 0xe0
 8002d60:	438a      	bics	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	225d      	movs	r2, #93	; 0x5d
 8002d68:	2101      	movs	r1, #1
 8002d6a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	d103      	bne.n	8002d7c <HAL_SPI_IRQHandler+0x17c>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d032      	beq.n	8002de2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2103      	movs	r1, #3
 8002d88:	438a      	bics	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_SPI_IRQHandler+0x1f8>)
 8002d9a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fe fabb 	bl	800131c <HAL_DMA_Abort_IT>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <HAL_SPI_IRQHandler+0x1f8>)
 8002dc4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fe faa6 	bl	800131c <HAL_DMA_Abort_IT>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	2240      	movs	r2, #64	; 0x40
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002de0:	e004      	b.n	8002dec <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f809 	bl	8002dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002dea:	e000      	b.n	8002dee <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002dec:	46c0      	nop			; (mov r8, r8)
    return;
 8002dee:	46c0      	nop			; (mov r8, r8)
  }
}
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b008      	add	sp, #32
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	08002e0d 	.word	0x08002e0d

08002dfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2246      	movs	r2, #70	; 0x46
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7ff ffe6 	bl	8002dfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	1dfb      	adds	r3, r7, #7
 8002e46:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e48:	f7fe f948 	bl	80010dc <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	18d3      	adds	r3, r2, r3
 8002e56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e58:	f7fe f940 	bl	80010dc <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e60:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	015b      	lsls	r3, r3, #5
 8002e66:	0d1b      	lsrs	r3, r3, #20
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	4353      	muls	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e6e:	e058      	b.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	d055      	beq.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e76:	f7fe f931 	bl	80010dc <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d902      	bls.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d142      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	21e0      	movs	r1, #224	; 0xe0
 8002e98:	438a      	bics	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	2382      	movs	r3, #130	; 0x82
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d113      	bne.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d005      	beq.n	8002ec0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d107      	bne.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2140      	movs	r1, #64	; 0x40
 8002ecc:	438a      	bics	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	019b      	lsls	r3, r3, #6
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d110      	bne.n	8002efe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	491a      	ldr	r1, [pc, #104]	; (8002f50 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0189      	lsls	r1, r1, #6
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	225d      	movs	r2, #93	; 0x5d
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	225c      	movs	r2, #92	; 0x5c
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e017      	b.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	425a      	negs	r2, r3
 8002f32:	4153      	adcs	r3, r2
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	001a      	movs	r2, r3
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d197      	bne.n	8002e70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b008      	add	sp, #32
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	ffffdfff 	.word	0xffffdfff

08002f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f62:	2317      	movs	r3, #23
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f6a:	f7fe f8b7 	bl	80010dc <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	18d3      	adds	r3, r2, r3
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f7a:	f7fe f8af 	bl	80010dc <HAL_GetTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	0013      	movs	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	00da      	lsls	r2, r3, #3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	0d1b      	lsrs	r3, r3, #20
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	4353      	muls	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fa0:	e068      	b.n	8003074 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	23c0      	movs	r3, #192	; 0xc0
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d10a      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	2117      	movs	r1, #23
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	d055      	beq.n	8003074 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fc8:	f7fe f888 	bl	80010dc <HAL_GetTick>
 8002fcc:	0002      	movs	r2, r0
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d902      	bls.n	8002fde <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d142      	bne.n	8003064 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	21e0      	movs	r1, #224	; 0xe0
 8002fea:	438a      	bics	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	2382      	movs	r3, #130	; 0x82
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d113      	bne.n	8003022 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	429a      	cmp	r2, r3
 8003004:	d005      	beq.n	8003012 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	429a      	cmp	r2, r3
 8003010:	d107      	bne.n	8003022 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	019b      	lsls	r3, r3, #6
 800302a:	429a      	cmp	r2, r3
 800302c:	d110      	bne.n	8003050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4916      	ldr	r1, [pc, #88]	; (8003094 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800303a:	400a      	ands	r2, r1
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	0189      	lsls	r1, r1, #6
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	225d      	movs	r2, #93	; 0x5d
 8003054:	2101      	movs	r1, #1
 8003056:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	225c      	movs	r2, #92	; 0x5c
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e010      	b.n	8003086 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3b01      	subs	r3, #1
 8003072:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	429a      	cmp	r2, r3
 8003082:	d18e      	bne.n	8002fa2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b00a      	add	sp, #40	; 0x28
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000000 	.word	0x20000000
 8003094:	ffffdfff 	.word	0xffffdfff

08003098 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	2382      	movs	r3, #130	; 0x82
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d113      	bne.n	80030d8 <SPI_EndRxTransaction+0x40>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d005      	beq.n	80030c8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d107      	bne.n	80030d8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2140      	movs	r1, #64	; 0x40
 80030d4:	438a      	bics	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	0013      	movs	r3, r2
 80030e2:	2200      	movs	r2, #0
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	f7ff fea7 	bl	8002e38 <SPI_WaitFlagStateUntilTimeout>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d007      	beq.n	80030fe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	2220      	movs	r2, #32
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e026      	b.n	800314c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	2382      	movs	r3, #130	; 0x82
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	429a      	cmp	r2, r3
 8003108:	d11f      	bne.n	800314a <SPI_EndRxTransaction+0xb2>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	429a      	cmp	r2, r3
 8003114:	d005      	beq.n	8003122 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	429a      	cmp	r2, r3
 8003120:	d113      	bne.n	800314a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	23c0      	movs	r3, #192	; 0xc0
 8003126:	00d9      	lsls	r1, r3, #3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	0013      	movs	r3, r2
 8003130:	2200      	movs	r2, #0
 8003132:	f7ff ff0f 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d007      	beq.n	800314a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313e:	2220      	movs	r2, #32
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e000      	b.n	800314c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bd80      	pop	{r7, pc}

08003154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	23c0      	movs	r3, #192	; 0xc0
 8003164:	0159      	lsls	r1, r3, #5
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	0013      	movs	r3, r2
 800316e:	2200      	movs	r2, #0
 8003170:	f7ff fef0 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d007      	beq.n	8003188 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	2220      	movs	r2, #32
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e027      	b.n	80031d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	0013      	movs	r3, r2
 8003192:	2200      	movs	r2, #0
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	f7ff fe4f 	bl	8002e38 <SPI_WaitFlagStateUntilTimeout>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d007      	beq.n	80031ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	2220      	movs	r2, #32
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e014      	b.n	80031d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	00d9      	lsls	r1, r3, #3
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	0013      	movs	r3, r2
 80031bc:	2200      	movs	r2, #0
 80031be:	f7ff fec9 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d007      	beq.n	80031d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ca:	2220      	movs	r2, #32
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e000      	b.n	80031d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e042      	b.n	8003278 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	223d      	movs	r2, #61	; 0x3d
 80031f6:	5c9b      	ldrb	r3, [r3, r2]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d107      	bne.n	800320e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223c      	movs	r2, #60	; 0x3c
 8003202:	2100      	movs	r1, #0
 8003204:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	0018      	movs	r0, r3
 800320a:	f7fd fd45 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	223d      	movs	r2, #61	; 0x3d
 8003212:	2102      	movs	r1, #2
 8003214:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	0019      	movs	r1, r3
 8003220:	0010      	movs	r0, r2
 8003222:	f000 fa83 	bl	800372c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2246      	movs	r2, #70	; 0x46
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	223e      	movs	r2, #62	; 0x3e
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	223f      	movs	r2, #63	; 0x3f
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2241      	movs	r2, #65	; 0x41
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2242      	movs	r2, #66	; 0x42
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2243      	movs	r2, #67	; 0x43
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2244      	movs	r2, #68	; 0x44
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2245      	movs	r2, #69	; 0x45
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	223d      	movs	r2, #61	; 0x3d
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	223d      	movs	r2, #61	; 0x3d
 800328c:	5c9b      	ldrb	r3, [r3, r2]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d001      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e035      	b.n	8003304 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	223d      	movs	r2, #61	; 0x3d
 800329c:	2102      	movs	r1, #2
 800329e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2101      	movs	r1, #1
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <HAL_TIM_Base_Start_IT+0x8c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_TIM_Base_Start_IT+0x4e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a14      	ldr	r2, [pc, #80]	; (8003310 <HAL_TIM_Base_Start_IT+0x90>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_TIM_Base_Start_IT+0x4e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <HAL_TIM_Base_Start_IT+0x94>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d111      	bne.n	80032f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2207      	movs	r2, #7
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b06      	cmp	r3, #6
 80032de:	d010      	beq.n	8003302 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	e007      	b.n	8003302 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b004      	add	sp, #16
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40000400 	.word	0x40000400
 8003314:	40014000 	.word	0x40014000

08003318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	2b02      	cmp	r3, #2
 800332c:	d124      	bne.n	8003378 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2202      	movs	r2, #2
 8003336:	4013      	ands	r3, r2
 8003338:	2b02      	cmp	r3, #2
 800333a:	d11d      	bne.n	8003378 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2203      	movs	r2, #3
 8003342:	4252      	negs	r2, r2
 8003344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2203      	movs	r2, #3
 8003354:	4013      	ands	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0018      	movs	r0, r3
 800335c:	f000 f9ce 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003360:	e007      	b.n	8003372 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f9c1 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 f9cd 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2204      	movs	r2, #4
 8003380:	4013      	ands	r3, r2
 8003382:	2b04      	cmp	r3, #4
 8003384:	d125      	bne.n	80033d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2204      	movs	r2, #4
 800338e:	4013      	ands	r3, r2
 8003390:	2b04      	cmp	r3, #4
 8003392:	d11e      	bne.n	80033d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2205      	movs	r2, #5
 800339a:	4252      	negs	r2, r2
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	23c0      	movs	r3, #192	; 0xc0
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 f9a1 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 80033ba:	e007      	b.n	80033cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 f994 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f9a0 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	2208      	movs	r2, #8
 80033da:	4013      	ands	r3, r2
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d124      	bne.n	800342a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2208      	movs	r2, #8
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d11d      	bne.n	800342a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2209      	movs	r2, #9
 80033f4:	4252      	negs	r2, r2
 80033f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2204      	movs	r2, #4
 80033fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2203      	movs	r2, #3
 8003406:	4013      	ands	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f975 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003412:	e007      	b.n	8003424 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f968 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f974 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2210      	movs	r2, #16
 8003432:	4013      	ands	r3, r2
 8003434:	2b10      	cmp	r3, #16
 8003436:	d125      	bne.n	8003484 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2210      	movs	r2, #16
 8003440:	4013      	ands	r3, r2
 8003442:	2b10      	cmp	r3, #16
 8003444:	d11e      	bne.n	8003484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2211      	movs	r2, #17
 800344c:	4252      	negs	r2, r2
 800344e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2208      	movs	r2, #8
 8003454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	23c0      	movs	r3, #192	; 0xc0
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4013      	ands	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f948 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 800346c:	e007      	b.n	800347e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f93b 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 f947 	bl	800370c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10f      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	2b01      	cmp	r3, #1
 800349e:	d108      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2202      	movs	r2, #2
 80034a6:	4252      	negs	r2, r2
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7fd fb2b 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d10f      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d108      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2281      	movs	r2, #129	; 0x81
 80034d4:	4252      	negs	r2, r2
 80034d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fa96 	bl	8003a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2240      	movs	r2, #64	; 0x40
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d10f      	bne.n	800350e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2240      	movs	r2, #64	; 0x40
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d108      	bne.n	800350e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2241      	movs	r2, #65	; 0x41
 8003502:	4252      	negs	r2, r2
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f907 	bl	800371c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2220      	movs	r2, #32
 8003516:	4013      	ands	r3, r2
 8003518:	2b20      	cmp	r3, #32
 800351a:	d10f      	bne.n	800353c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	4013      	ands	r3, r2
 8003526:	2b20      	cmp	r3, #32
 8003528:	d108      	bne.n	800353c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2221      	movs	r2, #33	; 0x21
 8003530:	4252      	negs	r2, r2
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0018      	movs	r0, r3
 8003538:	f000 fa60 	bl	80039fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	230f      	movs	r3, #15
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	223c      	movs	r2, #60	; 0x3c
 800355a:	5c9b      	ldrb	r3, [r3, r2]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIM_ConfigClockSource+0x20>
 8003560:	2302      	movs	r3, #2
 8003562:	e0bc      	b.n	80036de <HAL_TIM_ConfigClockSource+0x19a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	223c      	movs	r2, #60	; 0x3c
 8003568:	2101      	movs	r1, #1
 800356a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	223d      	movs	r2, #61	; 0x3d
 8003570:	2102      	movs	r1, #2
 8003572:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2277      	movs	r2, #119	; 0x77
 8003580:	4393      	bics	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2280      	movs	r2, #128	; 0x80
 800359a:	0192      	lsls	r2, r2, #6
 800359c:	4293      	cmp	r3, r2
 800359e:	d040      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xde>
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	0192      	lsls	r2, r2, #6
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d900      	bls.n	80035aa <HAL_TIM_ConfigClockSource+0x66>
 80035a8:	e088      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	0152      	lsls	r2, r2, #5
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d100      	bne.n	80035b4 <HAL_TIM_ConfigClockSource+0x70>
 80035b2:	e088      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x182>
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	0152      	lsls	r2, r2, #5
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d900      	bls.n	80035be <HAL_TIM_ConfigClockSource+0x7a>
 80035bc:	e07e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035be:	2b70      	cmp	r3, #112	; 0x70
 80035c0:	d018      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0xb0>
 80035c2:	d900      	bls.n	80035c6 <HAL_TIM_ConfigClockSource+0x82>
 80035c4:	e07a      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035c6:	2b60      	cmp	r3, #96	; 0x60
 80035c8:	d04f      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x126>
 80035ca:	d900      	bls.n	80035ce <HAL_TIM_ConfigClockSource+0x8a>
 80035cc:	e076      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035ce:	2b50      	cmp	r3, #80	; 0x50
 80035d0:	d03b      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x106>
 80035d2:	d900      	bls.n	80035d6 <HAL_TIM_ConfigClockSource+0x92>
 80035d4:	e072      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d057      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x146>
 80035da:	d900      	bls.n	80035de <HAL_TIM_ConfigClockSource+0x9a>
 80035dc:	e06e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d063      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035e2:	d86b      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d060      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035e8:	d868      	bhi.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d05d      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d05b      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x166>
 80035f2:	e063      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f000 f982 	bl	800390c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2277      	movs	r2, #119	; 0x77
 8003614:	4313      	orrs	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
      break;
 8003620:	e052      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f000 f96b 	bl	800390c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	01c9      	lsls	r1, r1, #7
 8003644:	430a      	orrs	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
      break;
 8003648:	e03e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	001a      	movs	r2, r3
 8003658:	f000 f8de 	bl	8003818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2150      	movs	r1, #80	; 0x50
 8003662:	0018      	movs	r0, r3
 8003664:	f000 f938 	bl	80038d8 <TIM_ITRx_SetConfig>
      break;
 8003668:	e02e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	001a      	movs	r2, r3
 8003678:	f000 f8fc 	bl	8003874 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2160      	movs	r1, #96	; 0x60
 8003682:	0018      	movs	r0, r3
 8003684:	f000 f928 	bl	80038d8 <TIM_ITRx_SetConfig>
      break;
 8003688:	e01e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	001a      	movs	r2, r3
 8003698:	f000 f8be 	bl	8003818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2140      	movs	r1, #64	; 0x40
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 f918 	bl	80038d8 <TIM_ITRx_SetConfig>
      break;
 80036a8:	e00e      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f000 f90f 	bl	80038d8 <TIM_ITRx_SetConfig>
      break;
 80036ba:	e005      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036bc:	230f      	movs	r3, #15
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
      break;
 80036c4:	e000      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036c6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	223d      	movs	r2, #61	; 0x3d
 80036cc:	2101      	movs	r1, #1
 80036ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	223c      	movs	r2, #60	; 0x3c
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]

  return status;
 80036d8:	230f      	movs	r3, #15
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	ffff00ff 	.word	0xffff00ff

080036ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b002      	add	sp, #8
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}

0800372c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <TIM_Base_SetConfig+0xd0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0x20>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <TIM_Base_SetConfig+0xd4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d108      	bne.n	800375e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2270      	movs	r2, #112	; 0x70
 8003750:	4393      	bics	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <TIM_Base_SetConfig+0xd0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <TIM_Base_SetConfig+0xd4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00f      	beq.n	800378e <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <TIM_Base_SetConfig+0xd8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00b      	beq.n	800378e <TIM_Base_SetConfig+0x62>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <TIM_Base_SetConfig+0xdc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <TIM_Base_SetConfig+0x62>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a22      	ldr	r2, [pc, #136]	; (800380c <TIM_Base_SetConfig+0xe0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_Base_SetConfig+0x62>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a21      	ldr	r2, [pc, #132]	; (8003810 <TIM_Base_SetConfig+0xe4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a20      	ldr	r2, [pc, #128]	; (8003814 <TIM_Base_SetConfig+0xe8>)
 8003792:	4013      	ands	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	4393      	bics	r3, r2
 80037a6:	001a      	movs	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a0c      	ldr	r2, [pc, #48]	; (80037fc <TIM_Base_SetConfig+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <TIM_Base_SetConfig+0xba>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <TIM_Base_SetConfig+0xdc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_Base_SetConfig+0xba>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a0c      	ldr	r2, [pc, #48]	; (800380c <TIM_Base_SetConfig+0xe0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_Base_SetConfig+0xba>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <TIM_Base_SetConfig+0xe4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d103      	bne.n	80037ee <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	615a      	str	r2, [r3, #20]
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40002000 	.word	0x40002000
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800
 8003814:	fffffcff 	.word	0xfffffcff

08003818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	2201      	movs	r2, #1
 8003830:	4393      	bics	r3, r2
 8003832:	001a      	movs	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	22f0      	movs	r2, #240	; 0xf0
 8003842:	4393      	bics	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	220a      	movs	r2, #10
 8003854:	4393      	bics	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b006      	add	sp, #24
 8003872:	bd80      	pop	{r7, pc}

08003874 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	2210      	movs	r2, #16
 8003886:	4393      	bics	r3, r2
 8003888:	001a      	movs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <TIM_TI2_ConfigInputStage+0x60>)
 800389e:	4013      	ands	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	031b      	lsls	r3, r3, #12
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	22a0      	movs	r2, #160	; 0xa0
 80038b0:	4393      	bics	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	621a      	str	r2, [r3, #32]
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b006      	add	sp, #24
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	ffff0fff 	.word	0xffff0fff

080038d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2270      	movs	r2, #112	; 0x70
 80038ec:	4393      	bics	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	2207      	movs	r2, #7
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <TIM_ETR_SetConfig+0x3c>)
 8003924:	4013      	ands	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	431a      	orrs	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b006      	add	sp, #24
 8003946:	bd80      	pop	{r7, pc}
 8003948:	ffff00ff 	.word	0xffff00ff

0800394c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	223c      	movs	r2, #60	; 0x3c
 800395a:	5c9b      	ldrb	r3, [r3, r2]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e041      	b.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	223c      	movs	r2, #60	; 0x3c
 8003968:	2101      	movs	r1, #1
 800396a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	223d      	movs	r2, #61	; 0x3d
 8003970:	2102      	movs	r1, #2
 8003972:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2270      	movs	r2, #112	; 0x70
 8003988:	4393      	bics	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d10c      	bne.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	4393      	bics	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	223d      	movs	r2, #61	; 0x3d
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	223c      	movs	r2, #60	; 0x3c
 80039e2:	2100      	movs	r1, #0
 80039e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b004      	add	sp, #16
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40014000 	.word	0x40014000

080039fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e044      	b.n	8003ab8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d107      	bne.n	8003a46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2274      	movs	r2, #116	; 0x74
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7fd f975 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2224      	movs	r2, #36	; 0x24
 8003a4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2101      	movs	r1, #1
 8003a58:	438a      	bics	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 fbb6 	bl	80041d0 <UART_SetConfig>
 8003a64:	0003      	movs	r3, r0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e024      	b.n	8003ab8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 fce9 	bl	8004450 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	490d      	ldr	r1, [pc, #52]	; (8003ac0 <HAL_UART_Init+0xa4>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2108      	movs	r1, #8
 8003a9a:	438a      	bics	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 fd81 	bl	80045b8 <UART_CheckIdleState>
 8003ab6:	0003      	movs	r3, r0
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b002      	add	sp, #8
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	fffff7ff 	.word	0xfffff7ff

08003ac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	1dbb      	adds	r3, r7, #6
 8003ad2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d000      	beq.n	8003ade <HAL_UART_Transmit+0x1a>
 8003adc:	e096      	b.n	8003c0c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_UART_Transmit+0x28>
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e08e      	b.n	8003c0e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	015b      	lsls	r3, r3, #5
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d109      	bne.n	8003b10 <HAL_UART_Transmit+0x4c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2201      	movs	r2, #1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d001      	beq.n	8003b10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e07e      	b.n	8003c0e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2274      	movs	r2, #116	; 0x74
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Transmit+0x5a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e077      	b.n	8003c0e <HAL_UART_Transmit+0x14a>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2274      	movs	r2, #116	; 0x74
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2221      	movs	r2, #33	; 0x21
 8003b32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b34:	f7fd fad2 	bl	80010dc <HAL_GetTick>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1dba      	adds	r2, r7, #6
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	8812      	ldrh	r2, [r2, #0]
 8003b44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1dba      	adds	r2, r7, #6
 8003b4a:	2152      	movs	r1, #82	; 0x52
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	015b      	lsls	r3, r3, #5
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d108      	bne.n	8003b6e <HAL_UART_Transmit+0xaa>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e003      	b.n	8003b76 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2274      	movs	r2, #116	; 0x74
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003b7e:	e02d      	b.n	8003bdc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	0013      	movs	r3, r2
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	f000 fd5b 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e039      	b.n	8003c0e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	05d2      	lsls	r2, r2, #23
 8003baa:	0dd2      	lsrs	r2, r2, #23
 8003bac:	b292      	uxth	r2, r2
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e008      	b.n	8003bca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2252      	movs	r2, #82	; 0x52
 8003bce:	5a9b      	ldrh	r3, [r3, r2]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b299      	uxth	r1, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2252      	movs	r2, #82	; 0x52
 8003bda:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2252      	movs	r2, #82	; 0x52
 8003be0:	5a9b      	ldrh	r3, [r3, r2]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1cb      	bne.n	8003b80 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	f000 fd27 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e005      	b.n	8003c0e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b008      	add	sp, #32
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b0ab      	sub	sp, #172	; 0xac
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	22a4      	movs	r2, #164	; 0xa4
 8003c28:	18b9      	adds	r1, r7, r2
 8003c2a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	20a0      	movs	r0, #160	; 0xa0
 8003c34:	1839      	adds	r1, r7, r0
 8003c36:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	219c      	movs	r1, #156	; 0x9c
 8003c40:	1879      	adds	r1, r7, r1
 8003c42:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c44:	0011      	movs	r1, r2
 8003c46:	18bb      	adds	r3, r7, r2
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a99      	ldr	r2, [pc, #612]	; (8003eb0 <HAL_UART_IRQHandler+0x298>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2298      	movs	r2, #152	; 0x98
 8003c50:	18bc      	adds	r4, r7, r2
 8003c52:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003c54:	18bb      	adds	r3, r7, r2
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d114      	bne.n	8003c86 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c5c:	187b      	adds	r3, r7, r1
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2220      	movs	r2, #32
 8003c62:	4013      	ands	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c66:	183b      	adds	r3, r7, r0
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d00a      	beq.n	8003c86 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d100      	bne.n	8003c7a <HAL_UART_IRQHandler+0x62>
 8003c78:	e27e      	b.n	8004178 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	0010      	movs	r0, r2
 8003c82:	4798      	blx	r3
      }
      return;
 8003c84:	e278      	b.n	8004178 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c86:	2398      	movs	r3, #152	; 0x98
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d100      	bne.n	8003c92 <HAL_UART_IRQHandler+0x7a>
 8003c90:	e114      	b.n	8003ebc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c92:	239c      	movs	r3, #156	; 0x9c
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d106      	bne.n	8003cac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c9e:	23a0      	movs	r3, #160	; 0xa0
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a83      	ldr	r2, [pc, #524]	; (8003eb4 <HAL_UART_IRQHandler+0x29c>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d100      	bne.n	8003cac <HAL_UART_IRQHandler+0x94>
 8003caa:	e107      	b.n	8003ebc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cac:	23a4      	movs	r3, #164	; 0xa4
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d012      	beq.n	8003cde <HAL_UART_IRQHandler+0xc6>
 8003cb8:	23a0      	movs	r3, #160	; 0xa0
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	589b      	ldr	r3, [r3, r2]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cde:	23a4      	movs	r3, #164	; 0xa4
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d011      	beq.n	8003d0e <HAL_UART_IRQHandler+0xf6>
 8003cea:	239c      	movs	r3, #156	; 0x9c
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	589b      	ldr	r3, [r3, r2]
 8003d04:	2204      	movs	r2, #4
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d0e:	23a4      	movs	r3, #164	; 0xa4
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2204      	movs	r2, #4
 8003d16:	4013      	ands	r3, r2
 8003d18:	d011      	beq.n	8003d3e <HAL_UART_IRQHandler+0x126>
 8003d1a:	239c      	movs	r3, #156	; 0x9c
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2201      	movs	r2, #1
 8003d22:	4013      	ands	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	589b      	ldr	r3, [r3, r2]
 8003d34:	2202      	movs	r2, #2
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2180      	movs	r1, #128	; 0x80
 8003d3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d3e:	23a4      	movs	r3, #164	; 0xa4
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	4013      	ands	r3, r2
 8003d48:	d017      	beq.n	8003d7a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d4a:	23a0      	movs	r3, #160	; 0xa0
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2220      	movs	r2, #32
 8003d52:	4013      	ands	r3, r2
 8003d54:	d105      	bne.n	8003d62 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d56:	239c      	movs	r3, #156	; 0x9c
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d60:	d00b      	beq.n	8003d7a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2208      	movs	r2, #8
 8003d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	589b      	ldr	r3, [r3, r2]
 8003d70:	2208      	movs	r2, #8
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d7a:	23a4      	movs	r3, #164	; 0xa4
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	4013      	ands	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_UART_IRQHandler+0x198>
 8003d88:	23a0      	movs	r3, #160	; 0xa0
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	04db      	lsls	r3, r3, #19
 8003d92:	4013      	ands	r3, r2
 8003d94:	d00c      	beq.n	8003db0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2280      	movs	r2, #128	; 0x80
 8003d9c:	0112      	lsls	r2, r2, #4
 8003d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2280      	movs	r2, #128	; 0x80
 8003da4:	589b      	ldr	r3, [r3, r2]
 8003da6:	2220      	movs	r2, #32
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2180      	movs	r1, #128	; 0x80
 8003dae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	589b      	ldr	r3, [r3, r2]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d100      	bne.n	8003dbc <HAL_UART_IRQHandler+0x1a4>
 8003dba:	e1df      	b.n	800417c <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dbc:	23a4      	movs	r3, #164	; 0xa4
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dc8:	23a0      	movs	r3, #160	; 0xa0
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d008      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	0010      	movs	r0, r2
 8003de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	589b      	ldr	r3, [r3, r2]
 8003dec:	2194      	movs	r1, #148	; 0x94
 8003dee:	187a      	adds	r2, r7, r1
 8003df0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2240      	movs	r2, #64	; 0x40
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d004      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e00:	187b      	adds	r3, r7, r1
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2228      	movs	r2, #40	; 0x28
 8003e06:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e08:	d047      	beq.n	8003e9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fcdf 	bl	80047d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2240      	movs	r2, #64	; 0x40
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d137      	bne.n	8003e90 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e20:	f3ef 8310 	mrs	r3, PRIMASK
 8003e24:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e28:	2090      	movs	r0, #144	; 0x90
 8003e2a:	183a      	adds	r2, r7, r0
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	2301      	movs	r3, #1
 8003e30:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e34:	f383 8810 	msr	PRIMASK, r3
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2140      	movs	r1, #64	; 0x40
 8003e46:	438a      	bics	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	183b      	adds	r3, r7, r0
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d012      	beq.n	8003e86 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <HAL_UART_IRQHandler+0x2a0>)
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fd fa55 	bl	800131c <HAL_DMA_Abort_IT>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d01a      	beq.n	8003eac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	0018      	movs	r0, r3
 8003e82:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	e012      	b.n	8003eac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f000 f98d 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8e:	e00d      	b.n	8003eac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 f988 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	e008      	b.n	8003eac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f000 f983 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003eaa:	e167      	b.n	800417c <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	46c0      	nop			; (mov r8, r8)
    return;
 8003eae:	e165      	b.n	800417c <HAL_UART_IRQHandler+0x564>
 8003eb0:	0000080f 	.word	0x0000080f
 8003eb4:	04000120 	.word	0x04000120
 8003eb8:	08004895 	.word	0x08004895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d000      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x2ae>
 8003ec4:	e131      	b.n	800412a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ec6:	23a4      	movs	r3, #164	; 0xa4
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d100      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x2bc>
 8003ed2:	e12a      	b.n	800412a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ed4:	23a0      	movs	r3, #160	; 0xa0
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2210      	movs	r2, #16
 8003edc:	4013      	ands	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x2ca>
 8003ee0:	e123      	b.n	800412a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2240      	movs	r2, #64	; 0x40
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d000      	beq.n	8003efa <HAL_UART_IRQHandler+0x2e2>
 8003ef8:	e09b      	b.n	8004032 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	217e      	movs	r1, #126	; 0x7e
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d100      	bne.n	8003f12 <HAL_UART_IRQHandler+0x2fa>
 8003f10:	e136      	b.n	8004180 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2258      	movs	r2, #88	; 0x58
 8003f16:	5a9b      	ldrh	r3, [r3, r2]
 8003f18:	187a      	adds	r2, r7, r1
 8003f1a:	8812      	ldrh	r2, [r2, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d300      	bcc.n	8003f22 <HAL_UART_IRQHandler+0x30a>
 8003f20:	e12e      	b.n	8004180 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	187a      	adds	r2, r7, r1
 8003f26:	215a      	movs	r1, #90	; 0x5a
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d06e      	beq.n	8004014 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f36:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f40:	2301      	movs	r3, #1
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	498e      	ldr	r1, [pc, #568]	; (8004190 <HAL_UART_IRQHandler+0x578>)
 8003f58:	400a      	ands	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f68:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f70:	677b      	str	r3, [r7, #116]	; 0x74
 8003f72:	2301      	movs	r3, #1
 8003f74:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f78:	f383 8810 	msr	PRIMASK, r3
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	438a      	bics	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f94:	f383 8810 	msr	PRIMASK, r3
}
 8003f98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003faa:	f383 8810 	msr	PRIMASK, r3
}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc6:	f383 8810 	msr	PRIMASK, r3
}
 8003fca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2110      	movs	r1, #16
 8003ffa:	438a      	bics	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	0018      	movs	r0, r3
 8004010:	f7fd f94c 	bl	80012ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2258      	movs	r2, #88	; 0x58
 8004018:	5a9a      	ldrh	r2, [r3, r2]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	215a      	movs	r1, #90	; 0x5a
 800401e:	5a5b      	ldrh	r3, [r3, r1]
 8004020:	b29b      	uxth	r3, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	b29a      	uxth	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f000 f8c4 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004030:	e0a6      	b.n	8004180 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2258      	movs	r2, #88	; 0x58
 8004036:	5a99      	ldrh	r1, [r3, r2]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	225a      	movs	r2, #90	; 0x5a
 800403c:	5a9b      	ldrh	r3, [r3, r2]
 800403e:	b29a      	uxth	r2, r3
 8004040:	208e      	movs	r0, #142	; 0x8e
 8004042:	183b      	adds	r3, r7, r0
 8004044:	1a8a      	subs	r2, r1, r2
 8004046:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	225a      	movs	r2, #90	; 0x5a
 800404c:	5a9b      	ldrh	r3, [r3, r2]
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d100      	bne.n	8004056 <HAL_UART_IRQHandler+0x43e>
 8004054:	e096      	b.n	8004184 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8004056:	183b      	adds	r3, r7, r0
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d100      	bne.n	8004060 <HAL_UART_IRQHandler+0x448>
 800405e:	e091      	b.n	8004184 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004060:	f3ef 8310 	mrs	r3, PRIMASK
 8004064:	60fb      	str	r3, [r7, #12]
  return(result);
 8004066:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004068:	2488      	movs	r4, #136	; 0x88
 800406a:	193a      	adds	r2, r7, r4
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	2301      	movs	r3, #1
 8004070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f383 8810 	msr	PRIMASK, r3
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4943      	ldr	r1, [pc, #268]	; (8004194 <HAL_UART_IRQHandler+0x57c>)
 8004086:	400a      	ands	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	193b      	adds	r3, r7, r4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f383 8810 	msr	PRIMASK, r3
}
 8004096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004098:	f3ef 8310 	mrs	r3, PRIMASK
 800409c:	61bb      	str	r3, [r7, #24]
  return(result);
 800409e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	2484      	movs	r4, #132	; 0x84
 80040a2:	193a      	adds	r2, r7, r4
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	2301      	movs	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f383 8810 	msr	PRIMASK, r3
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2101      	movs	r1, #1
 80040be:	438a      	bics	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	193b      	adds	r3, r7, r4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ea:	2480      	movs	r4, #128	; 0x80
 80040ec:	193a      	adds	r2, r7, r4
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	2301      	movs	r3, #1
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2110      	movs	r1, #16
 8004108:	438a      	bics	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	193b      	adds	r3, r7, r4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800411a:	183b      	adds	r3, r7, r0
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0011      	movs	r1, r2
 8004122:	0018      	movs	r0, r3
 8004124:	f000 f848 	bl	80041b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004128:	e02c      	b.n	8004184 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800412a:	23a4      	movs	r3, #164	; 0xa4
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	4013      	ands	r3, r2
 8004134:	d00f      	beq.n	8004156 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004136:	23a0      	movs	r3, #160	; 0xa0
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2280      	movs	r2, #128	; 0x80
 800413e:	4013      	ands	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01e      	beq.n	8004188 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	0010      	movs	r0, r2
 8004152:	4798      	blx	r3
    }
    return;
 8004154:	e018      	b.n	8004188 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004156:	23a4      	movs	r3, #164	; 0xa4
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2240      	movs	r2, #64	; 0x40
 800415e:	4013      	ands	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_UART_IRQHandler+0x572>
 8004162:	23a0      	movs	r3, #160	; 0xa0
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	4013      	ands	r3, r2
 800416c:	d00d      	beq.n	800418a <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 fba6 	bl	80048c2 <UART_EndTransmit_IT>
    return;
 8004176:	e008      	b.n	800418a <HAL_UART_IRQHandler+0x572>
      return;
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	e006      	b.n	800418a <HAL_UART_IRQHandler+0x572>
    return;
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	e004      	b.n	800418a <HAL_UART_IRQHandler+0x572>
      return;
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	e002      	b.n	800418a <HAL_UART_IRQHandler+0x572>
      return;
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	e000      	b.n	800418a <HAL_UART_IRQHandler+0x572>
    return;
 8004188:	46c0      	nop			; (mov r8, r8)
  }

}
 800418a:	46bd      	mov	sp, r7
 800418c:	b02b      	add	sp, #172	; 0xac
 800418e:	bd90      	pop	{r4, r7, pc}
 8004190:	fffffeff 	.word	0xfffffeff
 8004194:	fffffedf 	.word	0xfffffedf

08004198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b002      	add	sp, #8
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	000a      	movs	r2, r1
 80041c2:	1cbb      	adds	r3, r7, #2
 80041c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b002      	add	sp, #8
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d8:	231e      	movs	r3, #30
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a8d      	ldr	r2, [pc, #564]	; (8004434 <UART_SetConfig+0x264>)
 8004200:	4013      	ands	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4a88      	ldr	r2, [pc, #544]	; (8004438 <UART_SetConfig+0x268>)
 8004216:	4013      	ands	r3, r2
 8004218:	0019      	movs	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a7f      	ldr	r2, [pc, #508]	; (800443c <UART_SetConfig+0x26c>)
 800423e:	4013      	ands	r3, r2
 8004240:	0019      	movs	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a7b      	ldr	r2, [pc, #492]	; (8004440 <UART_SetConfig+0x270>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d127      	bne.n	80042a6 <UART_SetConfig+0xd6>
 8004256:	4b7b      	ldr	r3, [pc, #492]	; (8004444 <UART_SetConfig+0x274>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	2203      	movs	r2, #3
 800425c:	4013      	ands	r3, r2
 800425e:	2b03      	cmp	r3, #3
 8004260:	d00d      	beq.n	800427e <UART_SetConfig+0xae>
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0xcc>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d014      	beq.n	8004292 <UART_SetConfig+0xc2>
 8004268:	d818      	bhi.n	800429c <UART_SetConfig+0xcc>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <UART_SetConfig+0xa4>
 800426e:	2b01      	cmp	r3, #1
 8004270:	d00a      	beq.n	8004288 <UART_SetConfig+0xb8>
 8004272:	e013      	b.n	800429c <UART_SetConfig+0xcc>
 8004274:	231f      	movs	r3, #31
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	e021      	b.n	80042c2 <UART_SetConfig+0xf2>
 800427e:	231f      	movs	r3, #31
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	2202      	movs	r2, #2
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e01c      	b.n	80042c2 <UART_SetConfig+0xf2>
 8004288:	231f      	movs	r3, #31
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2204      	movs	r2, #4
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e017      	b.n	80042c2 <UART_SetConfig+0xf2>
 8004292:	231f      	movs	r3, #31
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	2208      	movs	r2, #8
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e012      	b.n	80042c2 <UART_SetConfig+0xf2>
 800429c:	231f      	movs	r3, #31
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	2210      	movs	r2, #16
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e00d      	b.n	80042c2 <UART_SetConfig+0xf2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a67      	ldr	r2, [pc, #412]	; (8004448 <UART_SetConfig+0x278>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d104      	bne.n	80042ba <UART_SetConfig+0xea>
 80042b0:	231f      	movs	r3, #31
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e003      	b.n	80042c2 <UART_SetConfig+0xf2>
 80042ba:	231f      	movs	r3, #31
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	2210      	movs	r2, #16
 80042c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d15d      	bne.n	800438a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80042ce:	231f      	movs	r3, #31
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d015      	beq.n	8004304 <UART_SetConfig+0x134>
 80042d8:	dc18      	bgt.n	800430c <UART_SetConfig+0x13c>
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d00d      	beq.n	80042fa <UART_SetConfig+0x12a>
 80042de:	dc15      	bgt.n	800430c <UART_SetConfig+0x13c>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <UART_SetConfig+0x11a>
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d005      	beq.n	80042f4 <UART_SetConfig+0x124>
 80042e8:	e010      	b.n	800430c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ea:	f7fd fe77 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 80042ee:	0003      	movs	r3, r0
 80042f0:	61bb      	str	r3, [r7, #24]
        break;
 80042f2:	e012      	b.n	800431a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b55      	ldr	r3, [pc, #340]	; (800444c <UART_SetConfig+0x27c>)
 80042f6:	61bb      	str	r3, [r7, #24]
        break;
 80042f8:	e00f      	b.n	800431a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fd fe01 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80042fe:	0003      	movs	r3, r0
 8004300:	61bb      	str	r3, [r7, #24]
        break;
 8004302:	e00a      	b.n	800431a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	61bb      	str	r3, [r7, #24]
        break;
 800430a:	e006      	b.n	800431a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004310:	231e      	movs	r3, #30
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
        break;
 8004318:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d100      	bne.n	8004322 <UART_SetConfig+0x152>
 8004320:	e07b      	b.n	800441a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	005a      	lsls	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	18d2      	adds	r2, r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	0019      	movs	r1, r3
 8004334:	0010      	movs	r0, r2
 8004336:	f7fb fef1 	bl	800011c <__udivsi3>
 800433a:	0003      	movs	r3, r0
 800433c:	b29b      	uxth	r3, r3
 800433e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0f      	cmp	r3, #15
 8004344:	d91c      	bls.n	8004380 <UART_SetConfig+0x1b0>
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	025b      	lsls	r3, r3, #9
 800434c:	429a      	cmp	r2, r3
 800434e:	d217      	bcs.n	8004380 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	b29a      	uxth	r2, r3
 8004354:	200e      	movs	r0, #14
 8004356:	183b      	adds	r3, r7, r0
 8004358:	210f      	movs	r1, #15
 800435a:	438a      	bics	r2, r1
 800435c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	2207      	movs	r2, #7
 8004366:	4013      	ands	r3, r2
 8004368:	b299      	uxth	r1, r3
 800436a:	183b      	adds	r3, r7, r0
 800436c:	183a      	adds	r2, r7, r0
 800436e:	8812      	ldrh	r2, [r2, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	183a      	adds	r2, r7, r0
 800437a:	8812      	ldrh	r2, [r2, #0]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	e04c      	b.n	800441a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004380:	231e      	movs	r3, #30
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e047      	b.n	800441a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800438a:	231f      	movs	r3, #31
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d015      	beq.n	80043c0 <UART_SetConfig+0x1f0>
 8004394:	dc18      	bgt.n	80043c8 <UART_SetConfig+0x1f8>
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00d      	beq.n	80043b6 <UART_SetConfig+0x1e6>
 800439a:	dc15      	bgt.n	80043c8 <UART_SetConfig+0x1f8>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <UART_SetConfig+0x1d6>
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d005      	beq.n	80043b0 <UART_SetConfig+0x1e0>
 80043a4:	e010      	b.n	80043c8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a6:	f7fd fe19 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 80043aa:	0003      	movs	r3, r0
 80043ac:	61bb      	str	r3, [r7, #24]
        break;
 80043ae:	e012      	b.n	80043d6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b0:	4b26      	ldr	r3, [pc, #152]	; (800444c <UART_SetConfig+0x27c>)
 80043b2:	61bb      	str	r3, [r7, #24]
        break;
 80043b4:	e00f      	b.n	80043d6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b6:	f7fd fda3 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80043ba:	0003      	movs	r3, r0
 80043bc:	61bb      	str	r3, [r7, #24]
        break;
 80043be:	e00a      	b.n	80043d6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	61bb      	str	r3, [r7, #24]
        break;
 80043c6:	e006      	b.n	80043d6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043cc:	231e      	movs	r3, #30
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
        break;
 80043d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01e      	beq.n	800441a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	085a      	lsrs	r2, r3, #1
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	18d2      	adds	r2, r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0019      	movs	r1, r3
 80043ec:	0010      	movs	r0, r2
 80043ee:	f7fb fe95 	bl	800011c <__udivsi3>
 80043f2:	0003      	movs	r3, r0
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b0f      	cmp	r3, #15
 80043fc:	d909      	bls.n	8004412 <UART_SetConfig+0x242>
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	025b      	lsls	r3, r3, #9
 8004404:	429a      	cmp	r2, r3
 8004406:	d204      	bcs.n	8004412 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	e003      	b.n	800441a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004412:	231e      	movs	r3, #30
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004426:	231e      	movs	r3, #30
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b008      	add	sp, #32
 8004432:	bd80      	pop	{r7, pc}
 8004434:	ffff69f3 	.word	0xffff69f3
 8004438:	ffffcfff 	.word	0xffffcfff
 800443c:	fffff4ff 	.word	0xfffff4ff
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000
 8004448:	40004400 	.word	0x40004400
 800444c:	007a1200 	.word	0x007a1200

08004450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	2201      	movs	r2, #1
 800445e:	4013      	ands	r3, r2
 8004460:	d00b      	beq.n	800447a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a4a      	ldr	r2, [pc, #296]	; (8004594 <UART_AdvFeatureConfig+0x144>)
 800446a:	4013      	ands	r3, r2
 800446c:	0019      	movs	r1, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	2202      	movs	r2, #2
 8004480:	4013      	ands	r3, r2
 8004482:	d00b      	beq.n	800449c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4a43      	ldr	r2, [pc, #268]	; (8004598 <UART_AdvFeatureConfig+0x148>)
 800448c:	4013      	ands	r3, r2
 800448e:	0019      	movs	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2204      	movs	r2, #4
 80044a2:	4013      	ands	r3, r2
 80044a4:	d00b      	beq.n	80044be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4a3b      	ldr	r2, [pc, #236]	; (800459c <UART_AdvFeatureConfig+0x14c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2208      	movs	r2, #8
 80044c4:	4013      	ands	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <UART_AdvFeatureConfig+0x150>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	2210      	movs	r2, #16
 80044e6:	4013      	ands	r3, r2
 80044e8:	d00b      	beq.n	8004502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a2c      	ldr	r2, [pc, #176]	; (80045a4 <UART_AdvFeatureConfig+0x154>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2220      	movs	r2, #32
 8004508:	4013      	ands	r3, r2
 800450a:	d00b      	beq.n	8004524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <UART_AdvFeatureConfig+0x158>)
 8004514:	4013      	ands	r3, r2
 8004516:	0019      	movs	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	2240      	movs	r2, #64	; 0x40
 800452a:	4013      	ands	r3, r2
 800452c:	d01d      	beq.n	800456a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <UART_AdvFeatureConfig+0x15c>)
 8004536:	4013      	ands	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	035b      	lsls	r3, r3, #13
 800454e:	429a      	cmp	r2, r3
 8004550:	d10b      	bne.n	800456a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <UART_AdvFeatureConfig+0x160>)
 800455a:	4013      	ands	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	4013      	ands	r3, r2
 8004572:	d00b      	beq.n	800458c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4a0e      	ldr	r2, [pc, #56]	; (80045b4 <UART_AdvFeatureConfig+0x164>)
 800457c:	4013      	ands	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}
 8004594:	fffdffff 	.word	0xfffdffff
 8004598:	fffeffff 	.word	0xfffeffff
 800459c:	fffbffff 	.word	0xfffbffff
 80045a0:	ffff7fff 	.word	0xffff7fff
 80045a4:	ffffefff 	.word	0xffffefff
 80045a8:	ffffdfff 	.word	0xffffdfff
 80045ac:	ffefffff 	.word	0xffefffff
 80045b0:	ff9fffff 	.word	0xff9fffff
 80045b4:	fff7ffff 	.word	0xfff7ffff

080045b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2280      	movs	r2, #128	; 0x80
 80045c4:	2100      	movs	r1, #0
 80045c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c8:	f7fc fd88 	bl	80010dc <HAL_GetTick>
 80045cc:	0003      	movs	r3, r0
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2208      	movs	r2, #8
 80045d8:	4013      	ands	r3, r2
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d10c      	bne.n	80045f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	0391      	lsls	r1, r2, #14
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	4a17      	ldr	r2, [pc, #92]	; (8004644 <UART_CheckIdleState+0x8c>)
 80045e8:	9200      	str	r2, [sp, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f000 f82c 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d001      	beq.n	80045f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e021      	b.n	800463c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2204      	movs	r2, #4
 8004600:	4013      	ands	r3, r2
 8004602:	2b04      	cmp	r3, #4
 8004604:	d10c      	bne.n	8004620 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	03d1      	lsls	r1, r2, #15
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <UART_CheckIdleState+0x8c>)
 8004610:	9200      	str	r2, [sp, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	f000 f818 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d001      	beq.n	8004620 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e00d      	b.n	800463c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2274      	movs	r2, #116	; 0x74
 8004636:	2100      	movs	r1, #0
 8004638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}
 8004644:	01ffffff 	.word	0x01ffffff

08004648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b094      	sub	sp, #80	; 0x50
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	e0a3      	b.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800465c:	3301      	adds	r3, #1
 800465e:	d100      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004660:	e09f      	b.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fc fd3b 	bl	80010dc <HAL_GetTick>
 8004666:	0002      	movs	r2, r0
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
 8004672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004674:	2b00      	cmp	r3, #0
 8004676:	d13d      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004678:	f3ef 8310 	mrs	r3, PRIMASK
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004680:	647b      	str	r3, [r7, #68]	; 0x44
 8004682:	2301      	movs	r3, #1
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	f383 8810 	msr	PRIMASK, r3
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	494c      	ldr	r1, [pc, #304]	; (80047cc <UART_WaitOnFlagUntilTimeout+0x184>)
 800469a:	400a      	ands	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	f383 8810 	msr	PRIMASK, r3
}
 80046a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046aa:	f3ef 8310 	mrs	r3, PRIMASK
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b2:	643b      	str	r3, [r7, #64]	; 0x40
 80046b4:	2301      	movs	r3, #1
 80046b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	f383 8810 	msr	PRIMASK, r3
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	438a      	bics	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d6:	f383 8810 	msr	PRIMASK, r3
}
 80046da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2220      	movs	r2, #32
 80046e6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2274      	movs	r2, #116	; 0x74
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e067      	b.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2204      	movs	r2, #4
 80046fc:	4013      	ands	r3, r2
 80046fe:	d050      	beq.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	401a      	ands	r2, r3
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	429a      	cmp	r2, r3
 8004712:	d146      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471e:	f3ef 8310 	mrs	r3, PRIMASK
 8004722:	613b      	str	r3, [r7, #16]
  return(result);
 8004724:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f383 8810 	msr	PRIMASK, r3
}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4923      	ldr	r1, [pc, #140]	; (80047cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004740:	400a      	ands	r2, r1
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f383 8810 	msr	PRIMASK, r3
}
 800474e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004750:	f3ef 8310 	mrs	r3, PRIMASK
 8004754:	61fb      	str	r3, [r7, #28]
  return(result);
 8004756:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004758:	64bb      	str	r3, [r7, #72]	; 0x48
 800475a:	2301      	movs	r3, #1
 800475c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	f383 8810 	msr	PRIMASK, r3
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2101      	movs	r1, #1
 8004772:	438a      	bics	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	f383 8810 	msr	PRIMASK, r3
}
 8004780:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	2120      	movs	r1, #32
 8004794:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2274      	movs	r2, #116	; 0x74
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e010      	b.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	425a      	negs	r2, r3
 80047b2:	4153      	adcs	r3, r2
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	001a      	movs	r2, r3
 80047b8:	1dfb      	adds	r3, r7, #7
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d100      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80047c0:	e74b      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b014      	add	sp, #80	; 0x50
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	fffffe5f 	.word	0xfffffe5f

080047d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d8:	f3ef 8310 	mrs	r3, PRIMASK
 80047dc:	617b      	str	r3, [r7, #20]
  return(result);
 80047de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
 80047e2:	2301      	movs	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f383 8810 	msr	PRIMASK, r3
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4925      	ldr	r1, [pc, #148]	; (8004890 <UART_EndRxTransfer+0xc0>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f383 8810 	msr	PRIMASK, r3
}
 8004808:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	623b      	str	r3, [r7, #32]
  return(result);
 8004810:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
 8004814:	2301      	movs	r3, #1
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2101      	movs	r1, #1
 800482c:	438a      	bics	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004840:	2b01      	cmp	r3, #1
 8004842:	d118      	bne.n	8004876 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004844:	f3ef 8310 	mrs	r3, PRIMASK
 8004848:	60bb      	str	r3, [r7, #8]
  return(result);
 800484a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800484e:	2301      	movs	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2110      	movs	r1, #16
 8004866:	438a      	bics	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f383 8810 	msr	PRIMASK, r3
}
 8004874:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b00e      	add	sp, #56	; 0x38
 800488e:	bd80      	pop	{r7, pc}
 8004890:	fffffedf 	.word	0xfffffedf

08004894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	225a      	movs	r2, #90	; 0x5a
 80048a6:	2100      	movs	r1, #0
 80048a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2252      	movs	r2, #82	; 0x52
 80048ae:	2100      	movs	r1, #0
 80048b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f7ff fc77 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ca:	f3ef 8310 	mrs	r3, PRIMASK
 80048ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	2301      	movs	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	438a      	bics	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0018      	movs	r0, r3
 800490c:	f7ff fc44 	bl	8004198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004910:	46c0      	nop			; (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b006      	add	sp, #24
 8004916:	bd80      	pop	{r7, pc}

08004918 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004918:	b5b0      	push	{r4, r5, r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <WIZCHIP_READ+0xa0>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004926:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <WIZCHIP_READ+0xa0>)
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800492c:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <WIZCHIP_READ+0xa0>)
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <WIZCHIP_READ+0x24>
 8004934:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <WIZCHIP_READ+0xa0>)
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d114      	bne.n	8004966 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800493c:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <WIZCHIP_READ+0xa0>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	0c12      	lsrs	r2, r2, #16
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	0010      	movs	r0, r2
 8004948:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <WIZCHIP_READ+0xa0>)
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	0a12      	lsrs	r2, r2, #8
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	0010      	movs	r0, r2
 8004956:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <WIZCHIP_READ+0xa0>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	0010      	movs	r0, r2
 8004962:	4798      	blx	r3
 8004964:	e014      	b.n	8004990 <WIZCHIP_READ+0x78>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	b2da      	uxtb	r2, r3
 800496c:	210c      	movs	r1, #12
 800496e:	187b      	adds	r3, r7, r1
 8004970:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	b2da      	uxtb	r2, r3
 8004978:	187b      	adds	r3, r7, r1
 800497a:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	187b      	adds	r3, r7, r1
 8004982:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <WIZCHIP_READ+0xa0>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	187a      	adds	r2, r7, r1
 800498a:	2103      	movs	r1, #3
 800498c:	0010      	movs	r0, r2
 800498e:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <WIZCHIP_READ+0xa0>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	250f      	movs	r5, #15
 8004996:	197c      	adds	r4, r7, r5
 8004998:	4798      	blx	r3
 800499a:	0003      	movs	r3, r0
 800499c:	7023      	strb	r3, [r4, #0]

   WIZCHIP.CS._deselect();
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <WIZCHIP_READ+0xa0>)
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <WIZCHIP_READ+0xa0>)
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	4798      	blx	r3
   return ret;
 80049aa:	197b      	adds	r3, r7, r5
 80049ac:	781b      	ldrb	r3, [r3, #0]
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b004      	add	sp, #16
 80049b4:	bdb0      	pop	{r4, r5, r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	2000000c 	.word	0x2000000c

080049bc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	000a      	movs	r2, r1
 80049c6:	1cfb      	adds	r3, r7, #3
 80049c8:	701a      	strb	r2, [r3, #0]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4798      	blx	r3
   WIZCHIP.CS._select();
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2204      	movs	r2, #4
 80049da:	4313      	orrs	r3, r2
 80049dc:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80049de:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d11a      	bne.n	8004a1c <WIZCHIP_WRITE+0x60>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	0c12      	lsrs	r2, r2, #16
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	0010      	movs	r0, r2
 80049f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80049f4:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	0a12      	lsrs	r2, r2, #8
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	0010      	movs	r0, r2
 8004a00:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	0010      	movs	r0, r2
 8004a0c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	1cfa      	adds	r2, r7, #3
 8004a14:	7812      	ldrb	r2, [r2, #0]
 8004a16:	0010      	movs	r0, r2
 8004a18:	4798      	blx	r3
 8004a1a:	e018      	b.n	8004a4e <WIZCHIP_WRITE+0x92>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	210c      	movs	r1, #12
 8004a24:	187b      	adds	r3, r7, r1
 8004a26:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	187b      	adds	r3, r7, r1
 8004a30:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	187b      	adds	r3, r7, r1
 8004a38:	709a      	strb	r2, [r3, #2]
		spi_data[3] = wb;
 8004a3a:	187b      	adds	r3, r7, r1
 8004a3c:	1cfa      	adds	r2, r7, #3
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	70da      	strb	r2, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	187a      	adds	r2, r7, r1
 8004a48:	2104      	movs	r1, #4
 8004a4a:	0010      	movs	r0, r2
 8004a4c:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <WIZCHIP_WRITE+0xa8>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	4798      	blx	r3
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b004      	add	sp, #16
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	2000000c 	.word	0x2000000c

08004a68 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004a68:	b5b0      	push	{r4, r5, r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	1dbb      	adds	r3, r7, #6
 8004a74:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004a76:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004a7c:	4b30      	ldr	r3, [pc, #192]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004a82:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <WIZCHIP_READ_BUF+0x2a>
 8004a8a:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d12f      	bne.n	8004af2 <WIZCHIP_READ_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004a92:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	0c12      	lsrs	r2, r2, #16
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004aa0:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	0a12      	lsrs	r2, r2, #8
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	0010      	movs	r0, r2
 8004aac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	0010      	movs	r0, r2
 8004ab8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004aba:	2316      	movs	r3, #22
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	2200      	movs	r2, #0
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	e00e      	b.n	8004ae2 <WIZCHIP_READ_BUF+0x7a>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2516      	movs	r5, #22
 8004aca:	197a      	adds	r2, r7, r5
 8004acc:	8812      	ldrh	r2, [r2, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	188c      	adds	r4, r1, r2
 8004ad2:	4798      	blx	r3
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004ad8:	197b      	adds	r3, r7, r5
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	197b      	adds	r3, r7, r5
 8004ade:	3201      	adds	r2, #1
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	2316      	movs	r3, #22
 8004ae4:	18fa      	adds	r2, r7, r3
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	8812      	ldrh	r2, [r2, #0]
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3e9      	bcc.n	8004ac4 <WIZCHIP_READ_BUF+0x5c>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004af0:	e01b      	b.n	8004b2a <WIZCHIP_READ_BUF+0xc2>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	2110      	movs	r1, #16
 8004afa:	187b      	adds	r3, r7, r1
 8004afc:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	187b      	adds	r3, r7, r1
 8004b0e:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	187a      	adds	r2, r7, r1
 8004b16:	2103      	movs	r1, #3
 8004b18:	0010      	movs	r0, r2
 8004b1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004b1c:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1dba      	adds	r2, r7, #6
 8004b22:	8811      	ldrh	r1, [r2, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	0010      	movs	r0, r2
 8004b28:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <WIZCHIP_READ_BUF+0xd8>)
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	4798      	blx	r3
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b006      	add	sp, #24
 8004b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	2000000c 	.word	0x2000000c

08004b44 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	1dbb      	adds	r3, r7, #6
 8004b50:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004b52:	4b32      	ldr	r3, [pc, #200]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004b58:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2204      	movs	r2, #4
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004b66:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d12f      	bne.n	8004bce <WIZCHIP_WRITE_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004b6e:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	0c12      	lsrs	r2, r2, #16
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	0010      	movs	r0, r2
 8004b7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004b7c:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	0a12      	lsrs	r2, r2, #8
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	0010      	movs	r0, r2
 8004b88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004b8a:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	0010      	movs	r0, r2
 8004b94:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004b96:	2316      	movs	r3, #22
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	e00e      	b.n	8004bbe <WIZCHIP_WRITE_BUF+0x7a>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	2416      	movs	r4, #22
 8004ba6:	193a      	adds	r2, r7, r4
 8004ba8:	8812      	ldrh	r2, [r2, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	188a      	adds	r2, r1, r2
 8004bae:	7812      	ldrb	r2, [r2, #0]
 8004bb0:	0010      	movs	r0, r2
 8004bb2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	193b      	adds	r3, r7, r4
 8004bba:	3201      	adds	r2, #1
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	2316      	movs	r3, #22
 8004bc0:	18fa      	adds	r2, r7, r3
 8004bc2:	1dbb      	adds	r3, r7, #6
 8004bc4:	8812      	ldrh	r2, [r2, #0]
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3e9      	bcc.n	8004ba0 <WIZCHIP_WRITE_BUF+0x5c>
 8004bcc:	e01b      	b.n	8004c06 <WIZCHIP_WRITE_BUF+0xc2>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	2110      	movs	r1, #16
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	187a      	adds	r2, r7, r1
 8004bf2:	2103      	movs	r1, #3
 8004bf4:	0010      	movs	r0, r2
 8004bf6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	1dba      	adds	r2, r7, #6
 8004bfe:	8811      	ldrh	r1, [r2, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	0010      	movs	r0, r2
 8004c04:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <WIZCHIP_WRITE_BUF+0xd8>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4798      	blx	r3
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b007      	add	sp, #28
 8004c18:	bd90      	pop	{r4, r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004c20:	b5b0      	push	{r4, r5, r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	0002      	movs	r2, r0
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8004c2c:	230e      	movs	r3, #14
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	2200      	movs	r2, #0
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	230c      	movs	r3, #12
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004c3c:	1dfb      	adds	r3, r7, #7
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3301      	adds	r3, #1
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	2280      	movs	r2, #128	; 0x80
 8004c48:	0192      	lsls	r2, r2, #6
 8004c4a:	4694      	mov	ip, r2
 8004c4c:	4463      	add	r3, ip
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff fe62 	bl	8004918 <WIZCHIP_READ>
 8004c54:	0003      	movs	r3, r0
 8004c56:	001a      	movs	r2, r3
 8004c58:	250c      	movs	r5, #12
 8004c5a:	197b      	adds	r3, r7, r5
 8004c5c:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004c5e:	197b      	adds	r3, r7, r5
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	b29c      	uxth	r4, r3
 8004c66:	1dfb      	adds	r3, r7, #7
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	2284      	movs	r2, #132	; 0x84
 8004c72:	0192      	lsls	r2, r2, #6
 8004c74:	4694      	mov	ip, r2
 8004c76:	4463      	add	r3, ip
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7ff fe4d 	bl	8004918 <WIZCHIP_READ>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	197b      	adds	r3, r7, r5
 8004c84:	18a2      	adds	r2, r4, r2
 8004c86:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8004c88:	197b      	adds	r3, r7, r5
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d025      	beq.n	8004cdc <getSn_TX_FSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004c90:	1dfb      	adds	r3, r7, #7
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	3301      	adds	r3, #1
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	2280      	movs	r2, #128	; 0x80
 8004c9c:	0192      	lsls	r2, r2, #6
 8004c9e:	4694      	mov	ip, r2
 8004ca0:	4463      	add	r3, ip
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7ff fe38 	bl	8004918 <WIZCHIP_READ>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	001a      	movs	r2, r3
 8004cac:	250e      	movs	r5, #14
 8004cae:	197b      	adds	r3, r7, r5
 8004cb0:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004cb2:	197b      	adds	r3, r7, r5
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	b29c      	uxth	r4, r3
 8004cba:	1dfb      	adds	r3, r7, #7
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	2284      	movs	r2, #132	; 0x84
 8004cc6:	0192      	lsls	r2, r2, #6
 8004cc8:	4694      	mov	ip, r2
 8004cca:	4463      	add	r3, ip
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7ff fe23 	bl	8004918 <WIZCHIP_READ>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	197b      	adds	r3, r7, r5
 8004cd8:	18a2      	adds	r2, r4, r2
 8004cda:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8004cdc:	210e      	movs	r1, #14
 8004cde:	187a      	adds	r2, r7, r1
 8004ce0:	230c      	movs	r3, #12
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1a7      	bne.n	8004c3c <getSn_TX_FSR+0x1c>
   return val;
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	881b      	ldrh	r3, [r3, #0]
}
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b004      	add	sp, #16
 8004cf6:	bdb0      	pop	{r4, r5, r7, pc}

08004cf8 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004cf8:	b5b0      	push	{r4, r5, r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	0002      	movs	r2, r0
 8004d00:	1dfb      	adds	r3, r7, #7
 8004d02:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8004d04:	230e      	movs	r3, #14
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	2200      	movs	r2, #0
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2200      	movs	r2, #0
 8004d12:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004d14:	1dfb      	adds	r3, r7, #7
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	2298      	movs	r2, #152	; 0x98
 8004d20:	0192      	lsls	r2, r2, #6
 8004d22:	4694      	mov	ip, r2
 8004d24:	4463      	add	r3, ip
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7ff fdf6 	bl	8004918 <WIZCHIP_READ>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	001a      	movs	r2, r3
 8004d30:	250c      	movs	r5, #12
 8004d32:	197b      	adds	r3, r7, r5
 8004d34:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004d36:	197b      	adds	r3, r7, r5
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	b29c      	uxth	r4, r3
 8004d3e:	1dfb      	adds	r3, r7, #7
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	3301      	adds	r3, #1
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	229c      	movs	r2, #156	; 0x9c
 8004d4a:	0192      	lsls	r2, r2, #6
 8004d4c:	4694      	mov	ip, r2
 8004d4e:	4463      	add	r3, ip
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff fde1 	bl	8004918 <WIZCHIP_READ>
 8004d56:	0003      	movs	r3, r0
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	197b      	adds	r3, r7, r5
 8004d5c:	18a2      	adds	r2, r4, r2
 8004d5e:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8004d60:	197b      	adds	r3, r7, r5
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d025      	beq.n	8004db4 <getSn_RX_RSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004d68:	1dfb      	adds	r3, r7, #7
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	3301      	adds	r3, #1
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	2298      	movs	r2, #152	; 0x98
 8004d74:	0192      	lsls	r2, r2, #6
 8004d76:	4694      	mov	ip, r2
 8004d78:	4463      	add	r3, ip
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7ff fdcc 	bl	8004918 <WIZCHIP_READ>
 8004d80:	0003      	movs	r3, r0
 8004d82:	001a      	movs	r2, r3
 8004d84:	250e      	movs	r5, #14
 8004d86:	197b      	adds	r3, r7, r5
 8004d88:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004d8a:	197b      	adds	r3, r7, r5
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	b29c      	uxth	r4, r3
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	3301      	adds	r3, #1
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	229c      	movs	r2, #156	; 0x9c
 8004d9e:	0192      	lsls	r2, r2, #6
 8004da0:	4694      	mov	ip, r2
 8004da2:	4463      	add	r3, ip
 8004da4:	0018      	movs	r0, r3
 8004da6:	f7ff fdb7 	bl	8004918 <WIZCHIP_READ>
 8004daa:	0003      	movs	r3, r0
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	197b      	adds	r3, r7, r5
 8004db0:	18a2      	adds	r2, r4, r2
 8004db2:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8004db4:	210e      	movs	r1, #14
 8004db6:	187a      	adds	r2, r7, r1
 8004db8:	230c      	movs	r3, #12
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	8812      	ldrh	r2, [r2, #0]
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d1a7      	bne.n	8004d14 <getSn_RX_RSR+0x1c>
   return val;
 8004dc4:	187b      	adds	r3, r7, r1
 8004dc6:	881b      	ldrh	r3, [r3, #0]
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b004      	add	sp, #16
 8004dce:	bdb0      	pop	{r4, r5, r7, pc}

08004dd0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6039      	str	r1, [r7, #0]
 8004dd8:	0011      	movs	r1, r2
 8004dda:	1dfb      	adds	r3, r7, #7
 8004ddc:	1c02      	adds	r2, r0, #0
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	1d3b      	adds	r3, r7, #4
 8004de2:	1c0a      	adds	r2, r1, #0
 8004de4:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8004de6:	250e      	movs	r5, #14
 8004de8:	197b      	adds	r3, r7, r5
 8004dea:	2200      	movs	r2, #0
 8004dec:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004df2:	1d3b      	adds	r3, r7, #4
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d05e      	beq.n	8004eb8 <wiz_send_data+0xe8>
   ptr = getSn_TX_WR(sn);
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	3301      	adds	r3, #1
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	2290      	movs	r2, #144	; 0x90
 8004e06:	0192      	lsls	r2, r2, #6
 8004e08:	4694      	mov	ip, r2
 8004e0a:	4463      	add	r3, ip
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff fd83 	bl	8004918 <WIZCHIP_READ>
 8004e12:	0003      	movs	r3, r0
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	b29c      	uxth	r4, r3
 8004e1a:	1dfb      	adds	r3, r7, #7
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	3301      	adds	r3, #1
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	2294      	movs	r2, #148	; 0x94
 8004e26:	0192      	lsls	r2, r2, #6
 8004e28:	4694      	mov	ip, r2
 8004e2a:	4463      	add	r3, ip
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f7ff fd73 	bl	8004918 <WIZCHIP_READ>
 8004e32:	0003      	movs	r3, r0
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	197b      	adds	r3, r7, r5
 8004e38:	18a2      	adds	r2, r4, r2
 8004e3a:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004e3c:	002c      	movs	r4, r5
 8004e3e:	197b      	adds	r3, r7, r5
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	1dfa      	adds	r2, r7, #7
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	0092      	lsls	r2, r2, #2
 8004e4a:	3202      	adds	r2, #2
 8004e4c:	00d2      	lsls	r2, r2, #3
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004e52:	1d3b      	adds	r3, r7, #4
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f7ff fe72 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004e60:	193b      	adds	r3, r7, r4
 8004e62:	1939      	adds	r1, r7, r4
 8004e64:	1d3a      	adds	r2, r7, #4
 8004e66:	8809      	ldrh	r1, [r1, #0]
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	188a      	adds	r2, r1, r2
 8004e6c:	801a      	strh	r2, [r3, #0]
   setSn_TX_WR(sn,ptr);
 8004e6e:	1dfb      	adds	r3, r7, #7
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	3301      	adds	r3, #1
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	2290      	movs	r2, #144	; 0x90
 8004e7a:	0192      	lsls	r2, r2, #6
 8004e7c:	4694      	mov	ip, r2
 8004e7e:	4463      	add	r3, ip
 8004e80:	001a      	movs	r2, r3
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	0010      	movs	r0, r2
 8004e90:	f7ff fd94 	bl	80049bc <WIZCHIP_WRITE>
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	2294      	movs	r2, #148	; 0x94
 8004ea0:	0192      	lsls	r2, r2, #6
 8004ea2:	4694      	mov	ip, r2
 8004ea4:	4463      	add	r3, ip
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	193b      	adds	r3, r7, r4
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	0019      	movs	r1, r3
 8004eb0:	0010      	movs	r0, r2
 8004eb2:	f7ff fd83 	bl	80049bc <WIZCHIP_WRITE>
 8004eb6:	e000      	b.n	8004eba <wiz_send_data+0xea>
   if(len == 0)  return;
 8004eb8:	46c0      	nop			; (mov r8, r8)
}
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b004      	add	sp, #16
 8004ebe:	bdb0      	pop	{r4, r5, r7, pc}

08004ec0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004ec0:	b5b0      	push	{r4, r5, r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6039      	str	r1, [r7, #0]
 8004ec8:	0011      	movs	r1, r2
 8004eca:	1dfb      	adds	r3, r7, #7
 8004ecc:	1c02      	adds	r2, r0, #0
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	1c0a      	adds	r2, r1, #0
 8004ed4:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8004ed6:	250e      	movs	r5, #14
 8004ed8:	197b      	adds	r3, r7, r5
 8004eda:	2200      	movs	r2, #0
 8004edc:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d05e      	beq.n	8004fa8 <wiz_recv_data+0xe8>
   ptr = getSn_RX_RD(sn);
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	22a0      	movs	r2, #160	; 0xa0
 8004ef6:	0192      	lsls	r2, r2, #6
 8004ef8:	4694      	mov	ip, r2
 8004efa:	4463      	add	r3, ip
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff fd0b 	bl	8004918 <WIZCHIP_READ>
 8004f02:	0003      	movs	r3, r0
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	b29c      	uxth	r4, r3
 8004f0a:	1dfb      	adds	r3, r7, #7
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3301      	adds	r3, #1
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	22a4      	movs	r2, #164	; 0xa4
 8004f16:	0192      	lsls	r2, r2, #6
 8004f18:	4694      	mov	ip, r2
 8004f1a:	4463      	add	r3, ip
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7ff fcfb 	bl	8004918 <WIZCHIP_READ>
 8004f22:	0003      	movs	r3, r0
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	197b      	adds	r3, r7, r5
 8004f28:	18a2      	adds	r2, r4, r2
 8004f2a:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004f2c:	002c      	movs	r4, r5
 8004f2e:	197b      	adds	r3, r7, r5
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	1dfa      	adds	r2, r7, #7
 8004f36:	7812      	ldrb	r2, [r2, #0]
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	3203      	adds	r2, #3
 8004f3c:	00d2      	lsls	r2, r2, #3
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	881a      	ldrh	r2, [r3, #0]
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7ff fd8c 	bl	8004a68 <WIZCHIP_READ_BUF>
   ptr += len;
 8004f50:	193b      	adds	r3, r7, r4
 8004f52:	1939      	adds	r1, r7, r4
 8004f54:	1d3a      	adds	r2, r7, #4
 8004f56:	8809      	ldrh	r1, [r1, #0]
 8004f58:	8812      	ldrh	r2, [r2, #0]
 8004f5a:	188a      	adds	r2, r1, r2
 8004f5c:	801a      	strh	r2, [r3, #0]
   
   setSn_RX_RD(sn,ptr);
 8004f5e:	1dfb      	adds	r3, r7, #7
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	3301      	adds	r3, #1
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	22a0      	movs	r2, #160	; 0xa0
 8004f6a:	0192      	lsls	r2, r2, #6
 8004f6c:	4694      	mov	ip, r2
 8004f6e:	4463      	add	r3, ip
 8004f70:	001a      	movs	r2, r3
 8004f72:	193b      	adds	r3, r7, r4
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	0010      	movs	r0, r2
 8004f80:	f7ff fd1c 	bl	80049bc <WIZCHIP_WRITE>
 8004f84:	1dfb      	adds	r3, r7, #7
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	22a4      	movs	r2, #164	; 0xa4
 8004f90:	0192      	lsls	r2, r2, #6
 8004f92:	4694      	mov	ip, r2
 8004f94:	4463      	add	r3, ip
 8004f96:	001a      	movs	r2, r3
 8004f98:	193b      	adds	r3, r7, r4
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	0010      	movs	r0, r2
 8004fa2:	f7ff fd0b 	bl	80049bc <WIZCHIP_WRITE>
 8004fa6:	e000      	b.n	8004faa <wiz_recv_data+0xea>
   if(len == 0) return;
 8004fa8:	46c0      	nop			; (mov r8, r8)
}
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b004      	add	sp, #16
 8004fae:	bdb0      	pop	{r4, r5, r7, pc}

08004fb0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8004fb0:	b5b0      	push	{r4, r5, r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	1c0a      	adds	r2, r1, #0
 8004fc0:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8004fc2:	250e      	movs	r5, #14
 8004fc4:	197b      	adds	r3, r7, r5
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	801a      	strh	r2, [r3, #0]

   ptr = getSn_RX_RD(sn);
 8004fca:	1dfb      	adds	r3, r7, #7
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	22a0      	movs	r2, #160	; 0xa0
 8004fd6:	0192      	lsls	r2, r2, #6
 8004fd8:	4694      	mov	ip, r2
 8004fda:	4463      	add	r3, ip
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7ff fc9b 	bl	8004918 <WIZCHIP_READ>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	b29c      	uxth	r4, r3
 8004fea:	1dfb      	adds	r3, r7, #7
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	22a4      	movs	r2, #164	; 0xa4
 8004ff6:	0192      	lsls	r2, r2, #6
 8004ff8:	4694      	mov	ip, r2
 8004ffa:	4463      	add	r3, ip
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7ff fc8b 	bl	8004918 <WIZCHIP_READ>
 8005002:	0003      	movs	r3, r0
 8005004:	b29a      	uxth	r2, r3
 8005006:	197b      	adds	r3, r7, r5
 8005008:	18a2      	adds	r2, r4, r2
 800500a:	801a      	strh	r2, [r3, #0]
   ptr += len;
 800500c:	002c      	movs	r4, r5
 800500e:	193b      	adds	r3, r7, r4
 8005010:	1939      	adds	r1, r7, r4
 8005012:	1d3a      	adds	r2, r7, #4
 8005014:	8809      	ldrh	r1, [r1, #0]
 8005016:	8812      	ldrh	r2, [r2, #0]
 8005018:	188a      	adds	r2, r1, r2
 800501a:	801a      	strh	r2, [r3, #0]
   setSn_RX_RD(sn,ptr);
 800501c:	1dfb      	adds	r3, r7, #7
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	3301      	adds	r3, #1
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	22a0      	movs	r2, #160	; 0xa0
 8005028:	0192      	lsls	r2, r2, #6
 800502a:	4694      	mov	ip, r2
 800502c:	4463      	add	r3, ip
 800502e:	001a      	movs	r2, r3
 8005030:	193b      	adds	r3, r7, r4
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	0019      	movs	r1, r3
 800503c:	0010      	movs	r0, r2
 800503e:	f7ff fcbd 	bl	80049bc <WIZCHIP_WRITE>
 8005042:	1dfb      	adds	r3, r7, #7
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	3301      	adds	r3, #1
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	22a4      	movs	r2, #164	; 0xa4
 800504e:	0192      	lsls	r2, r2, #6
 8005050:	4694      	mov	ip, r2
 8005052:	4463      	add	r3, ip
 8005054:	001a      	movs	r2, r3
 8005056:	193b      	adds	r3, r7, r4
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	0019      	movs	r1, r3
 800505e:	0010      	movs	r0, r2
 8005060:	f7ff fcac 	bl	80049bc <WIZCHIP_WRITE>
}
 8005064:	46c0      	nop			; (mov r8, r8)
 8005066:	46bd      	mov	sp, r7
 8005068:	b004      	add	sp, #16
 800506a:	bdb0      	pop	{r4, r5, r7, pc}

0800506c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800506c:	b5b0      	push	{r4, r5, r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	0005      	movs	r5, r0
 8005074:	000c      	movs	r4, r1
 8005076:	0010      	movs	r0, r2
 8005078:	0019      	movs	r1, r3
 800507a:	1dfb      	adds	r3, r7, #7
 800507c:	1c2a      	adds	r2, r5, #0
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	1dbb      	adds	r3, r7, #6
 8005082:	1c22      	adds	r2, r4, #0
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	1c02      	adds	r2, r0, #0
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	1cfb      	adds	r3, r7, #3
 800508e:	1c0a      	adds	r2, r1, #0
 8005090:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8005092:	1dfb      	adds	r3, r7, #7
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b08      	cmp	r3, #8
 8005098:	d902      	bls.n	80050a0 <socket+0x34>
 800509a:	2301      	movs	r3, #1
 800509c:	425b      	negs	r3, r3
 800509e:	e10d      	b.n	80052bc <socket+0x250>
	switch(protocol)
 80050a0:	1dbb      	adds	r3, r7, #6
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d005      	beq.n	80050b4 <socket+0x48>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dd11      	ble.n	80050d0 <socket+0x64>
 80050ac:	3b02      	subs	r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d80e      	bhi.n	80050d0 <socket+0x64>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80050b2:	e011      	b.n	80050d8 <socket+0x6c>
            getSIPR((uint8_t*)&taddr);
 80050b4:	230c      	movs	r3, #12
 80050b6:	18f9      	adds	r1, r7, r3
 80050b8:	23f0      	movs	r3, #240	; 0xf0
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	2204      	movs	r2, #4
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff fcd2 	bl	8004a68 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <socket+0x6a>
 80050ca:	2303      	movs	r3, #3
 80050cc:	425b      	negs	r3, r3
 80050ce:	e0f5      	b.n	80052bc <socket+0x250>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80050d0:	2305      	movs	r3, #5
 80050d2:	425b      	negs	r3, r3
 80050d4:	e0f2      	b.n	80052bc <socket+0x250>
	    break;
 80050d6:	46c0      	nop			; (mov r8, r8)
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80050d8:	1cfb      	adds	r3, r7, #3
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2204      	movs	r2, #4
 80050de:	4013      	ands	r3, r2
 80050e0:	d002      	beq.n	80050e8 <socket+0x7c>
 80050e2:	2306      	movs	r3, #6
 80050e4:	425b      	negs	r3, r3
 80050e6:	e0e9      	b.n	80052bc <socket+0x250>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80050e8:	1cfb      	adds	r3, r7, #3
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d028      	beq.n	8005142 <socket+0xd6>
	{
   	switch(protocol)
 80050f0:	1dbb      	adds	r3, r7, #6
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d002      	beq.n	80050fe <socket+0x92>
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d008      	beq.n	800510e <socket+0xa2>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80050fc:	e026      	b.n	800514c <socket+0xe0>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80050fe:	1cfb      	adds	r3, r7, #3
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2221      	movs	r2, #33	; 0x21
 8005104:	4013      	ands	r3, r2
 8005106:	d11e      	bne.n	8005146 <socket+0xda>
 8005108:	2306      	movs	r3, #6
 800510a:	425b      	negs	r3, r3
 800510c:	e0d6      	b.n	80052bc <socket+0x250>
   	      if(flag & SF_IGMP_VER2)
 800510e:	1cfb      	adds	r3, r7, #3
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2220      	movs	r2, #32
 8005114:	4013      	ands	r3, r2
 8005116:	d007      	beq.n	8005128 <socket+0xbc>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005118:	1cfb      	adds	r3, r7, #3
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b25b      	sxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	db02      	blt.n	8005128 <socket+0xbc>
 8005122:	2306      	movs	r3, #6
 8005124:	425b      	negs	r3, r3
 8005126:	e0c9      	b.n	80052bc <socket+0x250>
      	      if(flag & SF_UNI_BLOCK)
 8005128:	1cfb      	adds	r3, r7, #3
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2210      	movs	r2, #16
 800512e:	4013      	ands	r3, r2
 8005130:	d00b      	beq.n	800514a <socket+0xde>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005132:	1cfb      	adds	r3, r7, #3
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b25b      	sxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	db06      	blt.n	800514a <socket+0xde>
 800513c:	2306      	movs	r3, #6
 800513e:	425b      	negs	r3, r3
 8005140:	e0bc      	b.n	80052bc <socket+0x250>
   	}
   }
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	e002      	b.n	800514c <socket+0xe0>
   	      break;
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	e000      	b.n	800514c <socket+0xe0>
   	      break;
 800514a:	46c0      	nop			; (mov r8, r8)
	close(sn);
 800514c:	1dfb      	adds	r3, r7, #7
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	0018      	movs	r0, r3
 8005152:	f000 f8c5 	bl	80052e0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005156:	1dfb      	adds	r3, r7, #7
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	3301      	adds	r3, #1
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	0018      	movs	r0, r3
 8005162:	1cfb      	adds	r3, r7, #3
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	b25b      	sxtb	r3, r3
 8005168:	220f      	movs	r2, #15
 800516a:	4393      	bics	r3, r2
 800516c:	b25a      	sxtb	r2, r3
 800516e:	1dbb      	adds	r3, r7, #6
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b25b      	sxtb	r3, r3
 8005174:	4313      	orrs	r3, r2
 8005176:	b25b      	sxtb	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	0019      	movs	r1, r3
 800517c:	f7ff fc1e 	bl	80049bc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10f      	bne.n	80051a8 <socket+0x13c>
	{
	   port = sock_any_port++;
 8005188:	4b4e      	ldr	r3, [pc, #312]	; (80052c4 <socket+0x258>)
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	b291      	uxth	r1, r2
 8005190:	4a4c      	ldr	r2, [pc, #304]	; (80052c4 <socket+0x258>)
 8005192:	8011      	strh	r1, [r2, #0]
 8005194:	1d3a      	adds	r2, r7, #4
 8005196:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005198:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <socket+0x258>)
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	4a4a      	ldr	r2, [pc, #296]	; (80052c8 <socket+0x25c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d102      	bne.n	80051a8 <socket+0x13c>
 80051a2:	4b48      	ldr	r3, [pc, #288]	; (80052c4 <socket+0x258>)
 80051a4:	4a49      	ldr	r2, [pc, #292]	; (80052cc <socket+0x260>)
 80051a6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80051a8:	1dfb      	adds	r3, r7, #7
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	3301      	adds	r3, #1
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	00d2      	lsls	r2, r2, #3
 80051b6:	4694      	mov	ip, r2
 80051b8:	4463      	add	r3, ip
 80051ba:	001a      	movs	r2, r3
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	0019      	movs	r1, r3
 80051c8:	0010      	movs	r0, r2
 80051ca:	f7ff fbf7 	bl	80049bc <WIZCHIP_WRITE>
 80051ce:	1dfb      	adds	r3, r7, #7
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	3301      	adds	r3, #1
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	22a0      	movs	r2, #160	; 0xa0
 80051da:	00d2      	lsls	r2, r2, #3
 80051dc:	4694      	mov	ip, r2
 80051de:	4463      	add	r3, ip
 80051e0:	001a      	movs	r2, r3
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	0019      	movs	r1, r3
 80051ea:	0010      	movs	r0, r2
 80051ec:	f7ff fbe6 	bl	80049bc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80051f0:	1dfb      	adds	r3, r7, #7
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	3301      	adds	r3, #1
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	3301      	adds	r3, #1
 80051fc:	33ff      	adds	r3, #255	; 0xff
 80051fe:	2101      	movs	r1, #1
 8005200:	0018      	movs	r0, r3
 8005202:	f7ff fbdb 	bl	80049bc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	3301      	adds	r3, #1
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	3301      	adds	r3, #1
 8005214:	33ff      	adds	r3, #255	; 0xff
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff fb7e 	bl	8004918 <WIZCHIP_READ>
 800521c:	1e03      	subs	r3, r0, #0
 800521e:	d1f3      	bne.n	8005208 <socket+0x19c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2201      	movs	r2, #1
 8005226:	409a      	lsls	r2, r3
 8005228:	0013      	movs	r3, r2
 800522a:	b21b      	sxth	r3, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	b21b      	sxth	r3, r3
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <socket+0x264>)
 8005232:	8812      	ldrh	r2, [r2, #0]
 8005234:	b212      	sxth	r2, r2
 8005236:	4013      	ands	r3, r2
 8005238:	b21b      	sxth	r3, r3
 800523a:	b29a      	uxth	r2, r3
 800523c:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <socket+0x264>)
 800523e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005240:	1cfb      	adds	r3, r7, #3
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	401a      	ands	r2, r3
 8005248:	1dfb      	adds	r3, r7, #7
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	409a      	lsls	r2, r3
 800524e:	0013      	movs	r3, r2
 8005250:	b21a      	sxth	r2, r3
 8005252:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <socket+0x264>)
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b21b      	sxth	r3, r3
 8005258:	4313      	orrs	r3, r2
 800525a:	b21b      	sxth	r3, r3
 800525c:	b29a      	uxth	r2, r3
 800525e:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <socket+0x264>)
 8005260:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005262:	1dfb      	adds	r3, r7, #7
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2201      	movs	r2, #1
 8005268:	409a      	lsls	r2, r3
 800526a:	0013      	movs	r3, r2
 800526c:	b21b      	sxth	r3, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	b21b      	sxth	r3, r3
 8005272:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <socket+0x268>)
 8005274:	8812      	ldrh	r2, [r2, #0]
 8005276:	b212      	sxth	r2, r2
 8005278:	4013      	ands	r3, r2
 800527a:	b21b      	sxth	r3, r3
 800527c:	b29a      	uxth	r2, r3
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <socket+0x268>)
 8005280:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005282:	1dfb      	adds	r3, r7, #7
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <socket+0x26c>)
 8005288:	0052      	lsls	r2, r2, #1
 800528a:	2100      	movs	r1, #0
 800528c:	52d1      	strh	r1, [r2, r3]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800528e:	1dfb      	adds	r3, r7, #7
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <socket+0x270>)
 8005294:	2100      	movs	r1, #0
 8005296:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	1dfb      	adds	r3, r7, #7
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	3301      	adds	r3, #1
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	22c0      	movs	r2, #192	; 0xc0
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	4694      	mov	ip, r2
 80052aa:	4463      	add	r3, ip
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7ff fb33 	bl	8004918 <WIZCHIP_READ>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d0f1      	beq.n	800529a <socket+0x22e>
   return (int8_t)sn;
 80052b6:	1dfb      	adds	r3, r7, #7
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b25b      	sxtb	r3, r3
}	   
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bdb0      	pop	{r4, r5, r7, pc}
 80052c4:	2000000a 	.word	0x2000000a
 80052c8:	0000fff0 	.word	0x0000fff0
 80052cc:	ffffc000 	.word	0xffffc000
 80052d0:	20000660 	.word	0x20000660
 80052d4:	20000662 	.word	0x20000662
 80052d8:	20000664 	.word	0x20000664
 80052dc:	20000674 	.word	0x20000674

080052e0 <close>:

int8_t close(uint8_t sn)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	0002      	movs	r2, r0
 80052e8:	1dfb      	adds	r3, r7, #7
 80052ea:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 80052ec:	1dfb      	adds	r3, r7, #7
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d902      	bls.n	80052fa <close+0x1a>
 80052f4:	2301      	movs	r3, #1
 80052f6:	425b      	negs	r3, r3
 80052f8:	e05f      	b.n	80053ba <close+0xda>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80052fa:	1dfb      	adds	r3, r7, #7
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	3301      	adds	r3, #1
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	3301      	adds	r3, #1
 8005306:	33ff      	adds	r3, #255	; 0xff
 8005308:	2110      	movs	r1, #16
 800530a:	0018      	movs	r0, r3
 800530c:	f7ff fb56 	bl	80049bc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8005310:	46c0      	nop			; (mov r8, r8)
 8005312:	1dfb      	adds	r3, r7, #7
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	3301      	adds	r3, #1
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	3301      	adds	r3, #1
 800531e:	33ff      	adds	r3, #255	; 0xff
 8005320:	0018      	movs	r0, r3
 8005322:	f7ff faf9 	bl	8004918 <WIZCHIP_READ>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d1f3      	bne.n	8005312 <close+0x32>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800532a:	1dfb      	adds	r3, r7, #7
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	3301      	adds	r3, #1
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	2280      	movs	r2, #128	; 0x80
 8005336:	0092      	lsls	r2, r2, #2
 8005338:	4694      	mov	ip, r2
 800533a:	4463      	add	r3, ip
 800533c:	211f      	movs	r1, #31
 800533e:	0018      	movs	r0, r3
 8005340:	f7ff fb3c 	bl	80049bc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005344:	1dfb      	adds	r3, r7, #7
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2201      	movs	r2, #1
 800534a:	409a      	lsls	r2, r3
 800534c:	0013      	movs	r3, r2
 800534e:	b21b      	sxth	r3, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	b21b      	sxth	r3, r3
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <close+0xe4>)
 8005356:	8812      	ldrh	r2, [r2, #0]
 8005358:	b212      	sxth	r2, r2
 800535a:	4013      	ands	r3, r2
 800535c:	b21b      	sxth	r3, r3
 800535e:	b29a      	uxth	r2, r3
 8005360:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <close+0xe4>)
 8005362:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	0013      	movs	r3, r2
 800536e:	b21b      	sxth	r3, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	b21b      	sxth	r3, r3
 8005374:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <close+0xe8>)
 8005376:	8812      	ldrh	r2, [r2, #0]
 8005378:	b212      	sxth	r2, r2
 800537a:	4013      	ands	r3, r2
 800537c:	b21b      	sxth	r3, r3
 800537e:	b29a      	uxth	r2, r3
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <close+0xe8>)
 8005382:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005384:	1dfb      	adds	r3, r7, #7
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	4b10      	ldr	r3, [pc, #64]	; (80053cc <close+0xec>)
 800538a:	0052      	lsls	r2, r2, #1
 800538c:	2100      	movs	r1, #0
 800538e:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
 8005390:	1dfb      	adds	r3, r7, #7
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4a0e      	ldr	r2, [pc, #56]	; (80053d0 <close+0xf0>)
 8005396:	2100      	movs	r1, #0
 8005398:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	3301      	adds	r3, #1
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	22c0      	movs	r2, #192	; 0xc0
 80053a8:	0092      	lsls	r2, r2, #2
 80053aa:	4694      	mov	ip, r2
 80053ac:	4463      	add	r3, ip
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7ff fab2 	bl	8004918 <WIZCHIP_READ>
 80053b4:	1e03      	subs	r3, r0, #0
 80053b6:	d1f1      	bne.n	800539c <close+0xbc>
	return SOCK_OK;
 80053b8:	2301      	movs	r3, #1
}
 80053ba:	0018      	movs	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	b002      	add	sp, #8
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	20000660 	.word	0x20000660
 80053c8:	20000662 	.word	0x20000662
 80053cc:	20000664 	.word	0x20000664
 80053d0:	20000674 	.word	0x20000674

080053d4 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	0011      	movs	r1, r2
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	240f      	movs	r4, #15
 80053e2:	193b      	adds	r3, r7, r4
 80053e4:	1c02      	adds	r2, r0, #0
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	230c      	movs	r3, #12
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	1c0a      	adds	r2, r1, #0
 80053ee:	801a      	strh	r2, [r3, #0]
   uint8_t tmp = 0;
 80053f0:	2317      	movs	r3, #23
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
   uint16_t freesize = 0;
 80053f8:	2314      	movs	r3, #20
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	2200      	movs	r2, #0
 80053fe:	801a      	strh	r2, [r3, #0]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005400:	193b      	adds	r3, r7, r4
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d902      	bls.n	800540e <sendto+0x3a>
 8005408:	2301      	movs	r3, #1
 800540a:	425b      	negs	r3, r3
 800540c:	e16f      	b.n	80056ee <sendto+0x31a>
   switch(getSn_MR(sn) & 0x0F)
 800540e:	230f      	movs	r3, #15
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	3301      	adds	r3, #1
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	0018      	movs	r0, r3
 800541c:	f7ff fa7c 	bl	8004918 <WIZCHIP_READ>
 8005420:	0003      	movs	r3, r0
 8005422:	001a      	movs	r2, r3
 8005424:	230f      	movs	r3, #15
 8005426:	4013      	ands	r3, r2
 8005428:	3b02      	subs	r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d902      	bls.n	8005434 <sendto+0x60>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800542e:	2305      	movs	r3, #5
 8005430:	425b      	negs	r3, r3
 8005432:	e15c      	b.n	80056ee <sendto+0x31a>
         break;
 8005434:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 8005436:	230c      	movs	r3, #12
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <sendto+0x72>
 8005440:	230e      	movs	r3, #14
 8005442:	425b      	negs	r3, r3
 8005444:	e153      	b.n	80056ee <sendto+0x31a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	3201      	adds	r2, #1
 8005454:	7812      	ldrb	r2, [r2, #0]
 8005456:	189b      	adds	r3, r3, r2
 8005458:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	3202      	adds	r2, #2
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	189b      	adds	r3, r3, r2
 8005466:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	3203      	adds	r2, #3
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	189b      	adds	r3, r3, r2
 8005474:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d111      	bne.n	80054a0 <sendto+0xcc>
 800547c:	230f      	movs	r3, #15
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	3301      	adds	r3, #1
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	0018      	movs	r0, r3
 800548a:	f7ff fa45 	bl	8004918 <WIZCHIP_READ>
 800548e:	0003      	movs	r3, r0
 8005490:	001a      	movs	r2, r3
 8005492:	2304      	movs	r3, #4
 8005494:	4013      	ands	r3, r2
 8005496:	2b04      	cmp	r3, #4
 8005498:	d002      	beq.n	80054a0 <sendto+0xcc>
 800549a:	230c      	movs	r3, #12
 800549c:	425b      	negs	r3, r3
 800549e:	e126      	b.n	80056ee <sendto+0x31a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80054a0:	2328      	movs	r3, #40	; 0x28
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d111      	bne.n	80054ce <sendto+0xfa>
 80054aa:	230f      	movs	r3, #15
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	3301      	adds	r3, #1
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7ff fa2e 	bl	8004918 <WIZCHIP_READ>
 80054bc:	0003      	movs	r3, r0
 80054be:	001a      	movs	r2, r3
 80054c0:	2304      	movs	r3, #4
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d002      	beq.n	80054ce <sendto+0xfa>
 80054c8:	230b      	movs	r3, #11
 80054ca:	425b      	negs	r3, r3
 80054cc:	e10f      	b.n	80056ee <sendto+0x31a>
   tmp = getSn_SR(sn);
 80054ce:	230f      	movs	r3, #15
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	3301      	adds	r3, #1
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	22c0      	movs	r2, #192	; 0xc0
 80054dc:	0092      	lsls	r2, r2, #2
 80054de:	4694      	mov	ip, r2
 80054e0:	4463      	add	r3, ip
 80054e2:	2517      	movs	r5, #23
 80054e4:	197c      	adds	r4, r7, r5
 80054e6:	0018      	movs	r0, r3
 80054e8:	f7ff fa16 	bl	8004918 <WIZCHIP_READ>
 80054ec:	0003      	movs	r3, r0
 80054ee:	7023      	strb	r3, [r4, #0]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80054f0:	197b      	adds	r3, r7, r5
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b42      	cmp	r3, #66	; 0x42
 80054f6:	d00a      	beq.n	800550e <sendto+0x13a>
 80054f8:	197b      	adds	r3, r7, r5
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b22      	cmp	r3, #34	; 0x22
 80054fe:	d006      	beq.n	800550e <sendto+0x13a>
 8005500:	197b      	adds	r3, r7, r5
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b32      	cmp	r3, #50	; 0x32
 8005506:	d002      	beq.n	800550e <sendto+0x13a>
 8005508:	2307      	movs	r3, #7
 800550a:	425b      	negs	r3, r3
 800550c:	e0ef      	b.n	80056ee <sendto+0x31a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800550e:	240f      	movs	r4, #15
 8005510:	193b      	adds	r3, r7, r4
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	3301      	adds	r3, #1
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	22c0      	movs	r2, #192	; 0xc0
 800551c:	0112      	lsls	r2, r2, #4
 800551e:	4694      	mov	ip, r2
 8005520:	4463      	add	r3, ip
 8005522:	0018      	movs	r0, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	0019      	movs	r1, r3
 800552a:	f7ff fb0b 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800552e:	193b      	adds	r3, r7, r4
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	3301      	adds	r3, #1
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	0152      	lsls	r2, r2, #5
 800553c:	4694      	mov	ip, r2
 800553e:	4463      	add	r3, ip
 8005540:	001a      	movs	r2, r3
 8005542:	2528      	movs	r5, #40	; 0x28
 8005544:	197b      	adds	r3, r7, r5
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	b29b      	uxth	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	0019      	movs	r1, r3
 8005550:	0010      	movs	r0, r2
 8005552:	f7ff fa33 	bl	80049bc <WIZCHIP_WRITE>
 8005556:	193b      	adds	r3, r7, r4
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	3301      	adds	r3, #1
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	2288      	movs	r2, #136	; 0x88
 8005562:	0152      	lsls	r2, r2, #5
 8005564:	4694      	mov	ip, r2
 8005566:	4463      	add	r3, ip
 8005568:	001a      	movs	r2, r3
 800556a:	197b      	adds	r3, r7, r5
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	0019      	movs	r1, r3
 8005572:	0010      	movs	r0, r2
 8005574:	f7ff fa22 	bl	80049bc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005578:	193b      	adds	r3, r7, r4
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	3301      	adds	r3, #1
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	22f8      	movs	r2, #248	; 0xf8
 8005584:	0152      	lsls	r2, r2, #5
 8005586:	4694      	mov	ip, r2
 8005588:	4463      	add	r3, ip
 800558a:	0018      	movs	r0, r3
 800558c:	f7ff f9c4 	bl	8004918 <WIZCHIP_READ>
 8005590:	0003      	movs	r3, r0
 8005592:	b29a      	uxth	r2, r3
 8005594:	2114      	movs	r1, #20
 8005596:	187b      	adds	r3, r7, r1
 8005598:	0292      	lsls	r2, r2, #10
 800559a:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800559c:	200c      	movs	r0, #12
 800559e:	183a      	adds	r2, r7, r0
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	8812      	ldrh	r2, [r2, #0]
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d903      	bls.n	80055b2 <sendto+0x1de>
 80055aa:	183b      	adds	r3, r7, r0
 80055ac:	187a      	adds	r2, r7, r1
 80055ae:	8812      	ldrh	r2, [r2, #0]
 80055b0:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80055b2:	2314      	movs	r3, #20
 80055b4:	18fc      	adds	r4, r7, r3
 80055b6:	250f      	movs	r5, #15
 80055b8:	197b      	adds	r3, r7, r5
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	0018      	movs	r0, r3
 80055be:	f7ff fb2f 	bl	8004c20 <getSn_TX_FSR>
 80055c2:	0003      	movs	r3, r0
 80055c4:	8023      	strh	r3, [r4, #0]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80055c6:	197b      	adds	r3, r7, r5
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	3301      	adds	r3, #1
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	22c0      	movs	r2, #192	; 0xc0
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	4694      	mov	ip, r2
 80055d6:	4463      	add	r3, ip
 80055d8:	0018      	movs	r0, r3
 80055da:	f7ff f99d 	bl	8004918 <WIZCHIP_READ>
 80055de:	1e03      	subs	r3, r0, #0
 80055e0:	d102      	bne.n	80055e8 <sendto+0x214>
 80055e2:	2304      	movs	r3, #4
 80055e4:	425b      	negs	r3, r3
 80055e6:	e082      	b.n	80056ee <sendto+0x31a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80055e8:	4b43      	ldr	r3, [pc, #268]	; (80056f8 <sendto+0x324>)
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	001a      	movs	r2, r3
 80055ee:	230f      	movs	r3, #15
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	411a      	asrs	r2, r3
 80055f6:	0013      	movs	r3, r2
 80055f8:	2201      	movs	r2, #1
 80055fa:	4013      	ands	r3, r2
 80055fc:	d009      	beq.n	8005612 <sendto+0x23e>
 80055fe:	230c      	movs	r3, #12
 8005600:	18fa      	adds	r2, r7, r3
 8005602:	2314      	movs	r3, #20
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	8812      	ldrh	r2, [r2, #0]
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d901      	bls.n	8005612 <sendto+0x23e>
 800560e:	2300      	movs	r3, #0
 8005610:	e06d      	b.n	80056ee <sendto+0x31a>
      if(len <= freesize) break;
 8005612:	230c      	movs	r3, #12
 8005614:	18fa      	adds	r2, r7, r3
 8005616:	2314      	movs	r3, #20
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	8812      	ldrh	r2, [r2, #0]
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d900      	bls.n	8005624 <sendto+0x250>
      freesize = getSn_TX_FSR(sn);
 8005622:	e7c6      	b.n	80055b2 <sendto+0x1de>
      if(len <= freesize) break;
 8005624:	46c0      	nop			; (mov r8, r8)
   };
	wiz_send_data(sn, buf, len);
 8005626:	230c      	movs	r3, #12
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	240f      	movs	r4, #15
 8005630:	193b      	adds	r3, r7, r4
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	0018      	movs	r0, r3
 8005636:	f7ff fbcb 	bl	8004dd0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800563a:	193b      	adds	r3, r7, r4
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	3301      	adds	r3, #1
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	3301      	adds	r3, #1
 8005646:	33ff      	adds	r3, #255	; 0xff
 8005648:	2120      	movs	r1, #32
 800564a:	0018      	movs	r0, r3
 800564c:	f7ff f9b6 	bl	80049bc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	230f      	movs	r3, #15
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	3301      	adds	r3, #1
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	3301      	adds	r3, #1
 8005660:	33ff      	adds	r3, #255	; 0xff
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff f958 	bl	8004918 <WIZCHIP_READ>
 8005668:	1e03      	subs	r3, r0, #0
 800566a:	d1f2      	bne.n	8005652 <sendto+0x27e>
   while(1)
   {
      tmp = getSn_IR(sn);
 800566c:	240f      	movs	r4, #15
 800566e:	193b      	adds	r3, r7, r4
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	3301      	adds	r3, #1
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	2280      	movs	r2, #128	; 0x80
 800567a:	0092      	lsls	r2, r2, #2
 800567c:	4694      	mov	ip, r2
 800567e:	4463      	add	r3, ip
 8005680:	0018      	movs	r0, r3
 8005682:	f7ff f949 	bl	8004918 <WIZCHIP_READ>
 8005686:	0003      	movs	r3, r0
 8005688:	0019      	movs	r1, r3
 800568a:	2017      	movs	r0, #23
 800568c:	183b      	adds	r3, r7, r0
 800568e:	221f      	movs	r2, #31
 8005690:	400a      	ands	r2, r1
 8005692:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 8005694:	183b      	adds	r3, r7, r0
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2210      	movs	r2, #16
 800569a:	4013      	ands	r3, r2
 800569c:	d011      	beq.n	80056c2 <sendto+0x2ee>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800569e:	193b      	adds	r3, r7, r4
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	3301      	adds	r3, #1
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	4694      	mov	ip, r2
 80056ae:	4463      	add	r3, ip
 80056b0:	2110      	movs	r1, #16
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff f982 	bl	80049bc <WIZCHIP_WRITE>
         break;
 80056b8:	46c0      	nop			; (mov r8, r8)
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80056ba:	230c      	movs	r3, #12
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	e015      	b.n	80056ee <sendto+0x31a>
      else if(tmp & Sn_IR_TIMEOUT)
 80056c2:	2317      	movs	r3, #23
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2208      	movs	r2, #8
 80056ca:	4013      	ands	r3, r2
 80056cc:	d0ce      	beq.n	800566c <sendto+0x298>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80056ce:	230f      	movs	r3, #15
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	3301      	adds	r3, #1
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	0092      	lsls	r2, r2, #2
 80056de:	4694      	mov	ip, r2
 80056e0:	4463      	add	r3, ip
 80056e2:	2108      	movs	r1, #8
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7ff f969 	bl	80049bc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80056ea:	230d      	movs	r3, #13
 80056ec:	425b      	negs	r3, r3
}
 80056ee:	0018      	movs	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b006      	add	sp, #24
 80056f4:	bdb0      	pop	{r4, r5, r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	20000660 	.word	0x20000660

080056fc <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80056fc:	b5b0      	push	{r4, r5, r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	0011      	movs	r1, r2
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	240f      	movs	r4, #15
 800570a:	193b      	adds	r3, r7, r4
 800570c:	1c02      	adds	r2, r0, #0
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	230c      	movs	r3, #12
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	1c0a      	adds	r2, r1, #0
 8005716:	801a      	strh	r2, [r3, #0]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8005718:	231e      	movs	r3, #30
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	2200      	movs	r2, #0
 800571e:	801a      	strh	r2, [r3, #0]

   CHECK_SOCKNUM();
 8005720:	193b      	adds	r3, r7, r4
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d902      	bls.n	800572e <recvfrom+0x32>
 8005728:	2301      	movs	r3, #1
 800572a:	425b      	negs	r3, r3
 800572c:	e264      	b.n	8005bf8 <recvfrom+0x4fc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800572e:	230f      	movs	r3, #15
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	3301      	adds	r3, #1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	251d      	movs	r5, #29
 800573c:	197c      	adds	r4, r7, r5
 800573e:	0018      	movs	r0, r3
 8005740:	f7ff f8ea 	bl	8004918 <WIZCHIP_READ>
 8005744:	0003      	movs	r3, r0
 8005746:	7023      	strb	r3, [r4, #0]
 8005748:	197b      	adds	r3, r7, r5
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	220f      	movs	r2, #15
 800574e:	4013      	ands	r3, r2
 8005750:	3b02      	subs	r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d902      	bls.n	800575c <recvfrom+0x60>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005756:	2305      	movs	r3, #5
 8005758:	425b      	negs	r3, r3
 800575a:	e24d      	b.n	8005bf8 <recvfrom+0x4fc>
         break;
 800575c:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 800575e:	230c      	movs	r3, #12
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <recvfrom+0x72>
 8005768:	230e      	movs	r3, #14
 800576a:	425b      	negs	r3, r3
 800576c:	e244      	b.n	8005bf8 <recvfrom+0x4fc>
   if(sock_remained_size[sn] == 0)
 800576e:	230f      	movs	r3, #15
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	4baf      	ldr	r3, [pc, #700]	; (8005a34 <recvfrom+0x338>)
 8005776:	0052      	lsls	r2, r2, #1
 8005778:	5ad3      	ldrh	r3, [r2, r3]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d133      	bne.n	80057e6 <recvfrom+0xea>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800577e:	231e      	movs	r3, #30
 8005780:	18fc      	adds	r4, r7, r3
 8005782:	250f      	movs	r5, #15
 8005784:	197b      	adds	r3, r7, r5
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	0018      	movs	r0, r3
 800578a:	f7ff fab5 	bl	8004cf8 <getSn_RX_RSR>
 800578e:	0003      	movs	r3, r0
 8005790:	8023      	strh	r3, [r4, #0]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005792:	197b      	adds	r3, r7, r5
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	3301      	adds	r3, #1
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	22c0      	movs	r2, #192	; 0xc0
 800579e:	0092      	lsls	r2, r2, #2
 80057a0:	4694      	mov	ip, r2
 80057a2:	4463      	add	r3, ip
 80057a4:	0018      	movs	r0, r3
 80057a6:	f7ff f8b7 	bl	8004918 <WIZCHIP_READ>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d102      	bne.n	80057b4 <recvfrom+0xb8>
 80057ae:	2304      	movs	r3, #4
 80057b0:	425b      	negs	r3, r3
 80057b2:	e221      	b.n	8005bf8 <recvfrom+0x4fc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80057b4:	4ba0      	ldr	r3, [pc, #640]	; (8005a38 <recvfrom+0x33c>)
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	001a      	movs	r2, r3
 80057ba:	230f      	movs	r3, #15
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	411a      	asrs	r2, r3
 80057c2:	0013      	movs	r3, r2
 80057c4:	2201      	movs	r2, #1
 80057c6:	4013      	ands	r3, r2
 80057c8:	d006      	beq.n	80057d8 <recvfrom+0xdc>
 80057ca:	231e      	movs	r3, #30
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <recvfrom+0xdc>
 80057d4:	2300      	movs	r3, #0
 80057d6:	e20f      	b.n	8005bf8 <recvfrom+0x4fc>
         if(pack_len != 0) break;
 80057d8:	231e      	movs	r3, #30
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d100      	bne.n	80057e4 <recvfrom+0xe8>
         pack_len = getSn_RX_RSR(sn);
 80057e2:	e7cc      	b.n	800577e <recvfrom+0x82>
         if(pack_len != 0) break;
 80057e4:	46c0      	nop			; (mov r8, r8)
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80057e6:	231d      	movs	r3, #29
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2207      	movs	r2, #7
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d100      	bne.n	80057f6 <recvfrom+0xfa>
 80057f4:	e09d      	b.n	8005932 <recvfrom+0x236>
 80057f6:	dd00      	ble.n	80057fa <recvfrom+0xfe>
 80057f8:	e1a7      	b.n	8005b4a <recvfrom+0x44e>
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d003      	beq.n	8005806 <recvfrom+0x10a>
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d100      	bne.n	8005804 <recvfrom+0x108>
 8005802:	e121      	b.n	8005a48 <recvfrom+0x34c>
 8005804:	e1a1      	b.n	8005b4a <recvfrom+0x44e>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8005806:	200f      	movs	r0, #15
 8005808:	183b      	adds	r3, r7, r0
 800580a:	781a      	ldrb	r2, [r3, #0]
 800580c:	4b89      	ldr	r3, [pc, #548]	; (8005a34 <recvfrom+0x338>)
 800580e:	0052      	lsls	r2, r2, #1
 8005810:	5ad3      	ldrh	r3, [r2, r3]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d163      	bne.n	80058de <recvfrom+0x1e2>
	      {
   			wiz_recv_data(sn, head, 8);
 8005816:	2314      	movs	r3, #20
 8005818:	18f9      	adds	r1, r7, r3
 800581a:	0004      	movs	r4, r0
 800581c:	183b      	adds	r3, r7, r0
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2208      	movs	r2, #8
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff fb4c 	bl	8004ec0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005828:	193b      	adds	r3, r7, r4
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	3301      	adds	r3, #1
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	3301      	adds	r3, #1
 8005834:	33ff      	adds	r3, #255	; 0xff
 8005836:	2140      	movs	r1, #64	; 0x40
 8005838:	0018      	movs	r0, r3
 800583a:	f7ff f8bf 	bl	80049bc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	240f      	movs	r4, #15
 8005842:	193b      	adds	r3, r7, r4
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	3301      	adds	r3, #1
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	3301      	adds	r3, #1
 800584e:	33ff      	adds	r3, #255	; 0xff
 8005850:	0018      	movs	r0, r3
 8005852:	f7ff f861 	bl	8004918 <WIZCHIP_READ>
 8005856:	1e03      	subs	r3, r0, #0
 8005858:	d1f2      	bne.n	8005840 <recvfrom+0x144>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800585a:	2014      	movs	r0, #20
 800585c:	183b      	adds	r3, r7, r0
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3301      	adds	r3, #1
 8005868:	183a      	adds	r2, r7, r0
 800586a:	7852      	ldrb	r2, [r2, #1]
 800586c:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3302      	adds	r3, #2
 8005872:	183a      	adds	r2, r7, r0
 8005874:	7892      	ldrb	r2, [r2, #2]
 8005876:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3303      	adds	r3, #3
 800587c:	183a      	adds	r2, r7, r0
 800587e:	78d2      	ldrb	r2, [r2, #3]
 8005880:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8005882:	183b      	adds	r3, r7, r0
 8005884:	791b      	ldrb	r3, [r3, #4]
 8005886:	b29a      	uxth	r2, r3
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	b29a      	uxth	r2, r3
 8005894:	183b      	adds	r3, r7, r0
 8005896:	795b      	ldrb	r3, [r3, #5]
 8005898:	b29b      	uxth	r3, r3
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	b29a      	uxth	r2, r3
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	7999      	ldrb	r1, [r3, #6]
 80058a6:	193b      	adds	r3, r7, r4
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	b289      	uxth	r1, r1
 80058ac:	4b61      	ldr	r3, [pc, #388]	; (8005a34 <recvfrom+0x338>)
 80058ae:	0052      	lsls	r2, r2, #1
 80058b0:	52d1      	strh	r1, [r2, r3]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80058b2:	193b      	adds	r3, r7, r4
 80058b4:	781a      	ldrb	r2, [r3, #0]
 80058b6:	4b5f      	ldr	r3, [pc, #380]	; (8005a34 <recvfrom+0x338>)
 80058b8:	0052      	lsls	r2, r2, #1
 80058ba:	5ad3      	ldrh	r3, [r2, r3]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	b299      	uxth	r1, r3
 80058c0:	183b      	adds	r3, r7, r0
 80058c2:	79db      	ldrb	r3, [r3, #7]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	193a      	adds	r2, r7, r4
 80058c8:	7812      	ldrb	r2, [r2, #0]
 80058ca:	18cb      	adds	r3, r1, r3
 80058cc:	b299      	uxth	r1, r3
 80058ce:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <recvfrom+0x338>)
 80058d0:	0052      	lsls	r2, r2, #1
 80058d2:	52d1      	strh	r1, [r2, r3]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80058d4:	193b      	adds	r3, r7, r4
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	4a58      	ldr	r2, [pc, #352]	; (8005a3c <recvfrom+0x340>)
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80058de:	230f      	movs	r3, #15
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <recvfrom+0x338>)
 80058e6:	0052      	lsls	r2, r2, #1
 80058e8:	5ad3      	ldrh	r3, [r2, r3]
 80058ea:	210c      	movs	r1, #12
 80058ec:	187a      	adds	r2, r7, r1
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d205      	bcs.n	8005900 <recvfrom+0x204>
 80058f4:	231e      	movs	r3, #30
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	187a      	adds	r2, r7, r1
 80058fa:	8812      	ldrh	r2, [r2, #0]
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	e008      	b.n	8005912 <recvfrom+0x216>
			else pack_len = sock_remained_size[sn];
 8005900:	230f      	movs	r3, #15
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	7819      	ldrb	r1, [r3, #0]
 8005906:	231e      	movs	r3, #30
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	4a4a      	ldr	r2, [pc, #296]	; (8005a34 <recvfrom+0x338>)
 800590c:	0049      	lsls	r1, r1, #1
 800590e:	5a8a      	ldrh	r2, [r1, r2]
 8005910:	801a      	strh	r2, [r3, #0]
			//A20150601 : For W5300
			len = pack_len;
 8005912:	230c      	movs	r3, #12
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	211e      	movs	r1, #30
 8005918:	187a      	adds	r2, r7, r1
 800591a:	8812      	ldrh	r2, [r2, #0]
 800591c:	801a      	strh	r2, [r3, #0]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800591e:	187b      	adds	r3, r7, r1
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	230f      	movs	r3, #15
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	0018      	movs	r0, r3
 800592c:	f7ff fac8 	bl	8004ec0 <wiz_recv_data>
			break;
 8005930:	e11d      	b.n	8005b6e <recvfrom+0x472>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8005932:	200f      	movs	r0, #15
 8005934:	183b      	adds	r3, r7, r0
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	4b3e      	ldr	r3, [pc, #248]	; (8005a34 <recvfrom+0x338>)
 800593a:	0052      	lsls	r2, r2, #1
 800593c:	5ad3      	ldrh	r3, [r2, r3]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d152      	bne.n	80059e8 <recvfrom+0x2ec>
	      {
   			wiz_recv_data(sn, head, 2);
 8005942:	2314      	movs	r3, #20
 8005944:	18f9      	adds	r1, r7, r3
 8005946:	0004      	movs	r4, r0
 8005948:	183b      	adds	r3, r7, r0
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2202      	movs	r2, #2
 800594e:	0018      	movs	r0, r3
 8005950:	f7ff fab6 	bl	8004ec0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005954:	193b      	adds	r3, r7, r4
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	3301      	adds	r3, #1
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	3301      	adds	r3, #1
 8005960:	33ff      	adds	r3, #255	; 0xff
 8005962:	2140      	movs	r1, #64	; 0x40
 8005964:	0018      	movs	r0, r3
 8005966:	f7ff f829 	bl	80049bc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	240f      	movs	r4, #15
 800596e:	193b      	adds	r3, r7, r4
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	3301      	adds	r3, #1
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	3301      	adds	r3, #1
 800597a:	33ff      	adds	r3, #255	; 0xff
 800597c:	0018      	movs	r0, r3
 800597e:	f7fe ffcb 	bl	8004918 <WIZCHIP_READ>
 8005982:	1e03      	subs	r3, r0, #0
 8005984:	d1f2      	bne.n	800596c <recvfrom+0x270>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8005986:	2014      	movs	r0, #20
 8005988:	183b      	adds	r3, r7, r0
 800598a:	7819      	ldrb	r1, [r3, #0]
 800598c:	193b      	adds	r3, r7, r4
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	b289      	uxth	r1, r1
 8005992:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <recvfrom+0x338>)
 8005994:	0052      	lsls	r2, r2, #1
 8005996:	52d1      	strh	r1, [r2, r3]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8005998:	193b      	adds	r3, r7, r4
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	4b25      	ldr	r3, [pc, #148]	; (8005a34 <recvfrom+0x338>)
 800599e:	0052      	lsls	r2, r2, #1
 80059a0:	5ad3      	ldrh	r3, [r2, r3]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	183b      	adds	r3, r7, r0
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	18d3      	adds	r3, r2, r3
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	193a      	adds	r2, r7, r4
 80059b2:	7812      	ldrb	r2, [r2, #0]
 80059b4:	3b02      	subs	r3, #2
 80059b6:	b299      	uxth	r1, r3
 80059b8:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <recvfrom+0x338>)
 80059ba:	0052      	lsls	r2, r2, #1
 80059bc:	52d1      	strh	r1, [r2, r3]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80059be:	193b      	adds	r3, r7, r4
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <recvfrom+0x338>)
 80059c4:	0052      	lsls	r2, r2, #1
 80059c6:	5ad3      	ldrh	r3, [r2, r3]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <recvfrom+0x344>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d906      	bls.n	80059dc <recvfrom+0x2e0>
   			{
   			   close(sn);
 80059ce:	193b      	adds	r3, r7, r4
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff fc84 	bl	80052e0 <close>
   			   return SOCKFATAL_PACKLEN;
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <recvfrom+0x348>)
 80059da:	e10d      	b.n	8005bf8 <recvfrom+0x4fc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80059dc:	230f      	movs	r3, #15
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <recvfrom+0x340>)
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80059e8:	230f      	movs	r3, #15
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <recvfrom+0x338>)
 80059f0:	0052      	lsls	r2, r2, #1
 80059f2:	5ad3      	ldrh	r3, [r2, r3]
 80059f4:	210c      	movs	r1, #12
 80059f6:	187a      	adds	r2, r7, r1
 80059f8:	8812      	ldrh	r2, [r2, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d205      	bcs.n	8005a0a <recvfrom+0x30e>
 80059fe:	231e      	movs	r3, #30
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	187a      	adds	r2, r7, r1
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	e008      	b.n	8005a1c <recvfrom+0x320>
			else pack_len = sock_remained_size[sn];
 8005a0a:	230f      	movs	r3, #15
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	7819      	ldrb	r1, [r3, #0]
 8005a10:	231e      	movs	r3, #30
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <recvfrom+0x338>)
 8005a16:	0049      	lsls	r1, r1, #1
 8005a18:	5a8a      	ldrh	r2, [r1, r2]
 8005a1a:	801a      	strh	r2, [r3, #0]
			wiz_recv_data(sn,buf,pack_len);
 8005a1c:	231e      	movs	r3, #30
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	230f      	movs	r3, #15
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff fa48 	bl	8004ec0 <wiz_recv_data>
		   break;
 8005a30:	e09d      	b.n	8005b6e <recvfrom+0x472>
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	20000664 	.word	0x20000664
 8005a38:	20000660 	.word	0x20000660
 8005a3c:	20000674 	.word	0x20000674
 8005a40:	000005ea 	.word	0x000005ea
 8005a44:	fffffc17 	.word	0xfffffc17
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8005a48:	200f      	movs	r0, #15
 8005a4a:	183b      	adds	r3, r7, r0
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	4b6c      	ldr	r3, [pc, #432]	; (8005c00 <recvfrom+0x504>)
 8005a50:	0052      	lsls	r2, r2, #1
 8005a52:	5ad3      	ldrh	r3, [r2, r3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d153      	bne.n	8005b00 <recvfrom+0x404>
		   {
   			wiz_recv_data(sn, head, 6);
 8005a58:	2314      	movs	r3, #20
 8005a5a:	18f9      	adds	r1, r7, r3
 8005a5c:	0004      	movs	r4, r0
 8005a5e:	183b      	adds	r3, r7, r0
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2206      	movs	r2, #6
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7ff fa2b 	bl	8004ec0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005a6a:	193b      	adds	r3, r7, r4
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	3301      	adds	r3, #1
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	3301      	adds	r3, #1
 8005a76:	33ff      	adds	r3, #255	; 0xff
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f7fe ff9e 	bl	80049bc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	240f      	movs	r4, #15
 8005a84:	193b      	adds	r3, r7, r4
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	33ff      	adds	r3, #255	; 0xff
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7fe ff40 	bl	8004918 <WIZCHIP_READ>
 8005a98:	1e03      	subs	r3, r0, #0
 8005a9a:	d1f2      	bne.n	8005a82 <recvfrom+0x386>
   			addr[0] = head[0];
 8005a9c:	2014      	movs	r0, #20
 8005a9e:	183b      	adds	r3, r7, r0
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	183a      	adds	r2, r7, r0
 8005aac:	7852      	ldrb	r2, [r2, #1]
 8005aae:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	183a      	adds	r2, r7, r0
 8005ab6:	7892      	ldrb	r2, [r2, #2]
 8005ab8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3303      	adds	r3, #3
 8005abe:	183a      	adds	r2, r7, r0
 8005ac0:	78d2      	ldrb	r2, [r2, #3]
 8005ac2:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8005ac4:	183b      	adds	r3, r7, r0
 8005ac6:	7919      	ldrb	r1, [r3, #4]
 8005ac8:	193b      	adds	r3, r7, r4
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	b289      	uxth	r1, r1
 8005ace:	4b4c      	ldr	r3, [pc, #304]	; (8005c00 <recvfrom+0x504>)
 8005ad0:	0052      	lsls	r2, r2, #1
 8005ad2:	52d1      	strh	r1, [r2, r3]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8005ad4:	193b      	adds	r3, r7, r4
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	4b49      	ldr	r3, [pc, #292]	; (8005c00 <recvfrom+0x504>)
 8005ada:	0052      	lsls	r2, r2, #1
 8005adc:	5ad3      	ldrh	r3, [r2, r3]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	b299      	uxth	r1, r3
 8005ae2:	183b      	adds	r3, r7, r0
 8005ae4:	795b      	ldrb	r3, [r3, #5]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	193a      	adds	r2, r7, r4
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	18cb      	adds	r3, r1, r3
 8005aee:	b299      	uxth	r1, r3
 8005af0:	4b43      	ldr	r3, [pc, #268]	; (8005c00 <recvfrom+0x504>)
 8005af2:	0052      	lsls	r2, r2, #1
 8005af4:	52d1      	strh	r1, [r2, r3]
   			sock_pack_info[sn] = PACK_FIRST;
 8005af6:	193b      	adds	r3, r7, r4
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	4a42      	ldr	r2, [pc, #264]	; (8005c04 <recvfrom+0x508>)
 8005afc:	2180      	movs	r1, #128	; 0x80
 8005afe:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8005b00:	230f      	movs	r3, #15
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <recvfrom+0x504>)
 8005b08:	0052      	lsls	r2, r2, #1
 8005b0a:	5ad3      	ldrh	r3, [r2, r3]
 8005b0c:	210c      	movs	r1, #12
 8005b0e:	187a      	adds	r2, r7, r1
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d205      	bcs.n	8005b22 <recvfrom+0x426>
 8005b16:	231e      	movs	r3, #30
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	187a      	adds	r2, r7, r1
 8005b1c:	8812      	ldrh	r2, [r2, #0]
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	e008      	b.n	8005b34 <recvfrom+0x438>
			else pack_len = sock_remained_size[sn];
 8005b22:	230f      	movs	r3, #15
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	7819      	ldrb	r1, [r3, #0]
 8005b28:	231e      	movs	r3, #30
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	4a34      	ldr	r2, [pc, #208]	; (8005c00 <recvfrom+0x504>)
 8005b2e:	0049      	lsls	r1, r1, #1
 8005b30:	5a8a      	ldrh	r2, [r1, r2]
 8005b32:	801a      	strh	r2, [r3, #0]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005b34:	231e      	movs	r3, #30
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	230f      	movs	r3, #15
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7ff f9bc 	bl	8004ec0 <wiz_recv_data>
			break;
 8005b48:	e011      	b.n	8005b6e <recvfrom+0x472>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8005b4a:	241e      	movs	r4, #30
 8005b4c:	193b      	adds	r3, r7, r4
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	250f      	movs	r5, #15
 8005b52:	197b      	adds	r3, r7, r5
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	0011      	movs	r1, r2
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7ff fa29 	bl	8004fb0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8005b5e:	197b      	adds	r3, r7, r5
 8005b60:	781a      	ldrb	r2, [r3, #0]
 8005b62:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <recvfrom+0x504>)
 8005b64:	0052      	lsls	r2, r2, #1
 8005b66:	1939      	adds	r1, r7, r4
 8005b68:	8809      	ldrh	r1, [r1, #0]
 8005b6a:	52d1      	strh	r1, [r2, r3]
         break;
 8005b6c:	46c0      	nop			; (mov r8, r8)
   }
	setSn_CR(sn,Sn_CR_RECV);
 8005b6e:	230f      	movs	r3, #15
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	3301      	adds	r3, #1
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	33ff      	adds	r3, #255	; 0xff
 8005b7e:	2140      	movs	r1, #64	; 0x40
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fe ff1b 	bl	80049bc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	240f      	movs	r4, #15
 8005b8a:	193b      	adds	r3, r7, r4
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	3301      	adds	r3, #1
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	3301      	adds	r3, #1
 8005b96:	33ff      	adds	r3, #255	; 0xff
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7fe febd 	bl	8004918 <WIZCHIP_READ>
 8005b9e:	1e03      	subs	r3, r0, #0
 8005ba0:	d1f2      	bne.n	8005b88 <recvfrom+0x48c>
	sock_remained_size[sn] -= pack_len;
 8005ba2:	193b      	adds	r3, r7, r4
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <recvfrom+0x504>)
 8005ba8:	0052      	lsls	r2, r2, #1
 8005baa:	5ad1      	ldrh	r1, [r2, r3]
 8005bac:	193b      	adds	r3, r7, r4
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	231e      	movs	r3, #30
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	1acb      	subs	r3, r1, r3
 8005bb8:	b299      	uxth	r1, r3
 8005bba:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <recvfrom+0x504>)
 8005bbc:	0052      	lsls	r2, r2, #1
 8005bbe:	52d1      	strh	r1, [r2, r3]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	781a      	ldrb	r2, [r3, #0]
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <recvfrom+0x504>)
 8005bc6:	0052      	lsls	r2, r2, #1
 8005bc8:	5ad3      	ldrh	r3, [r2, r3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <recvfrom+0x4ea>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8005bce:	193b      	adds	r3, r7, r4
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <recvfrom+0x508>)
 8005bd4:	5cd2      	ldrb	r2, [r2, r3]
 8005bd6:	193b      	adds	r3, r7, r4
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	b2d1      	uxtb	r1, r2
 8005be0:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <recvfrom+0x508>)
 8005be2:	54d1      	strb	r1, [r2, r3]
 8005be4:	e005      	b.n	8005bf2 <recvfrom+0x4f6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8005be6:	230f      	movs	r3, #15
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <recvfrom+0x508>)
 8005bee:	2100      	movs	r1, #0
 8005bf0:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8005bf2:	231e      	movs	r3, #30
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	881b      	ldrh	r3, [r3, #0]
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b008      	add	sp, #32
 8005bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8005c00:	20000664 	.word	0x20000664
 8005c04:	20000674 	.word	0x20000674

08005c08 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005c12:	b580      	push	{r7, lr}
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	46c0      	nop			; (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005c26:	b580      	push	{r7, lr}
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	0018      	movs	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b002      	add	sp, #8
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b082      	sub	sp, #8
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	000a      	movs	r2, r1
 8005c50:	1cfb      	adds	r3, r7, #3
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	1cfa      	adds	r2, r7, #3
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	0002      	movs	r2, r0
 8005c78:	1dfb      	adds	r3, r7, #7
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	46c0      	nop			; (mov r8, r8)
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b002      	add	sp, #8
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	000a      	movs	r2, r1
 8005c8e:	1cbb      	adds	r3, r7, #2
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b002      	add	sp, #8
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	000a      	movs	r2, r1
 8005ca4:	1cbb      	adds	r3, r7, #2
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <reg_wizchip_cs_cbfunc+0x16>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <reg_wizchip_cs_cbfunc+0x3c>)
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <reg_wizchip_cs_cbfunc+0x40>)
 8005cca:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005ccc:	4b07      	ldr	r3, [pc, #28]	; (8005cec <reg_wizchip_cs_cbfunc+0x3c>)
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <reg_wizchip_cs_cbfunc+0x44>)
 8005cd0:	619a      	str	r2, [r3, #24]
 8005cd2:	e006      	b.n	8005ce2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <reg_wizchip_cs_cbfunc+0x3c>)
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005cda:	4b04      	ldr	r3, [pc, #16]	; (8005cec <reg_wizchip_cs_cbfunc+0x3c>)
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	619a      	str	r2, [r3, #24]
   }
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b002      	add	sp, #8
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	2000000c 	.word	0x2000000c
 8005cf0:	08005c1d 	.word	0x08005c1d
 8005cf4:	08005c27 	.word	0x08005c27

08005cf8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	001a      	movs	r2, r3
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d0f8      	beq.n	8005d04 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <reg_wizchip_spi_cbfunc+0x26>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d20:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <reg_wizchip_spi_cbfunc+0x50>)
 8005d22:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005d24:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d26:	4a09      	ldr	r2, [pc, #36]	; (8005d4c <reg_wizchip_spi_cbfunc+0x54>)
 8005d28:	621a      	str	r2, [r3, #32]
 8005d2a:	e006      	b.n	8005d3a <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005d32:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <reg_wizchip_spi_cbfunc+0x4c>)
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	621a      	str	r2, [r3, #32]
   }
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	2000000c 	.word	0x2000000c
 8005d48:	08005c65 	.word	0x08005c65
 8005d4c:	08005c71 	.word	0x08005c71

08005d50 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	001a      	movs	r2, r3
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4013      	ands	r3, r2
 8005d68:	d0f8      	beq.n	8005d5c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <reg_wizchip_spiburst_cbfunc+0x26>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <reg_wizchip_spiburst_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d78:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005d7a:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005d7c:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <reg_wizchip_spiburst_cbfunc+0x54>)
 8005d80:	629a      	str	r2, [r3, #40]	; 0x28
 8005d82:	e006      	b.n	8005d92 <reg_wizchip_spiburst_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b002      	add	sp, #8
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	2000000c 	.word	0x2000000c
 8005da0:	08005c85 	.word	0x08005c85
 8005da4:	08005c9b 	.word	0x08005c9b

08005da8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005dae:	1d39      	adds	r1, r7, #4
 8005db0:	2390      	movs	r3, #144	; 0x90
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	2206      	movs	r2, #6
 8005db6:	0018      	movs	r0, r3
 8005db8:	f7fe fe56 	bl	8004a68 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005dbc:	2414      	movs	r4, #20
 8005dbe:	1939      	adds	r1, r7, r4
 8005dc0:	2380      	movs	r3, #128	; 0x80
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7fe fe4e 	bl	8004a68 <WIZCHIP_READ_BUF>
 8005dcc:	2510      	movs	r5, #16
 8005dce:	1979      	adds	r1, r7, r5
 8005dd0:	23a0      	movs	r3, #160	; 0xa0
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f7fe fe46 	bl	8004a68 <WIZCHIP_READ_BUF>
 8005ddc:	260c      	movs	r6, #12
 8005dde:	19b9      	adds	r1, r7, r6
 8005de0:	23f0      	movs	r3, #240	; 0xf0
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	2204      	movs	r2, #4
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7fe fe3e 	bl	8004a68 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005dec:	2180      	movs	r1, #128	; 0x80
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7fe fde4 	bl	80049bc <WIZCHIP_WRITE>
   getMR(); // for delay
 8005df4:	2000      	movs	r0, #0
 8005df6:	f7fe fd8f 	bl	8004918 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005dfa:	1d39      	adds	r1, r7, #4
 8005dfc:	2390      	movs	r3, #144	; 0x90
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	2206      	movs	r2, #6
 8005e02:	0018      	movs	r0, r3
 8005e04:	f7fe fe9e 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005e08:	1939      	adds	r1, r7, r4
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	2204      	movs	r2, #4
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7fe fe97 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005e16:	1979      	adds	r1, r7, r5
 8005e18:	23a0      	movs	r3, #160	; 0xa0
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7fe fe90 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005e24:	19b9      	adds	r1, r7, r6
 8005e26:	23f0      	movs	r3, #240	; 0xf0
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7fe fe89 	bl	8004b44 <WIZCHIP_WRITE_BUF>
}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b007      	add	sp, #28
 8005e38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e3a <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005e3a:	b590      	push	{r4, r7, lr}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005e44:	240e      	movs	r4, #14
 8005e46:	193b      	adds	r3, r7, r4
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 8005e4c:	f7ff ffac 	bl	8005da8 <wizchip_sw_reset>
   if(txsize)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d055      	beq.n	8005f02 <wizchip_init+0xc8>
   {
      tmp = 0;
 8005e56:	193b      	adds	r3, r7, r4
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e5c:	230f      	movs	r3, #15
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e01e      	b.n	8005ea4 <wizchip_init+0x6a>
		{
			tmp += txsize[i];
 8005e66:	230f      	movs	r3, #15
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	18d3      	adds	r3, r2, r3
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	210e      	movs	r1, #14
 8005e76:	187b      	adds	r3, r7, r1
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	18d3      	adds	r3, r2, r3
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	187b      	adds	r3, r7, r1
 8005e80:	701a      	strb	r2, [r3, #0]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005e82:	187b      	adds	r3, r7, r1
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	dd02      	ble.n	8005e92 <wizchip_init+0x58>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	425b      	negs	r3, r3
 8005e90:	e092      	b.n	8005fb8 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e92:	210f      	movs	r1, #15
 8005e94:	187b      	adds	r3, r7, r1
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	b25b      	sxtb	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	187b      	adds	r3, r7, r1
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	220f      	movs	r2, #15
 8005ea6:	18bb      	adds	r3, r7, r2
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	b25b      	sxtb	r3, r3
 8005eac:	2b07      	cmp	r3, #7
 8005eae:	ddda      	ble.n	8005e66 <wizchip_init+0x2c>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005eb0:	18bb      	adds	r3, r7, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e01e      	b.n	8005ef6 <wizchip_init+0xbc>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005eb8:	220f      	movs	r2, #15
 8005eba:	18bb      	adds	r3, r7, r2
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	21f8      	movs	r1, #248	; 0xf8
 8005ec8:	0149      	lsls	r1, r1, #5
 8005eca:	468c      	mov	ip, r1
 8005ecc:	4463      	add	r3, ip
 8005ece:	0018      	movs	r0, r3
 8005ed0:	0014      	movs	r4, r2
 8005ed2:	18bb      	adds	r3, r7, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	b25b      	sxtb	r3, r3
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	18d3      	adds	r3, r2, r3
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	0019      	movs	r1, r3
 8005ee0:	f7fe fd6c 	bl	80049bc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005ee4:	0021      	movs	r1, r4
 8005ee6:	187b      	adds	r3, r7, r1
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	187b      	adds	r3, r7, r1
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	230f      	movs	r3, #15
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	2b07      	cmp	r3, #7
 8005f00:	ddda      	ble.n	8005eb8 <wizchip_init+0x7e>
		}

	#endif
   }

   if(rxsize)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d056      	beq.n	8005fb6 <wizchip_init+0x17c>
   {
      tmp = 0;
 8005f08:	230e      	movs	r3, #14
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f10:	230f      	movs	r3, #15
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e01e      	b.n	8005f58 <wizchip_init+0x11e>
		{
			tmp += rxsize[i];
 8005f1a:	230f      	movs	r3, #15
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	18d3      	adds	r3, r2, r3
 8005f26:	781a      	ldrb	r2, [r3, #0]
 8005f28:	210e      	movs	r1, #14
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	18d3      	adds	r3, r2, r3
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	701a      	strb	r2, [r3, #0]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005f36:	187b      	adds	r3, r7, r1
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	dd02      	ble.n	8005f46 <wizchip_init+0x10c>
 8005f40:	2301      	movs	r3, #1
 8005f42:	425b      	negs	r3, r3
 8005f44:	e038      	b.n	8005fb8 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f46:	210f      	movs	r1, #15
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	3301      	adds	r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	220f      	movs	r2, #15
 8005f5a:	18bb      	adds	r3, r7, r2
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	ddda      	ble.n	8005f1a <wizchip_init+0xe0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f64:	18bb      	adds	r3, r7, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e01e      	b.n	8005faa <wizchip_init+0x170>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005f6c:	220f      	movs	r2, #15
 8005f6e:	18bb      	adds	r3, r7, r2
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b25b      	sxtb	r3, r3
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	3301      	adds	r3, #1
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	21f0      	movs	r1, #240	; 0xf0
 8005f7c:	0149      	lsls	r1, r1, #5
 8005f7e:	468c      	mov	ip, r1
 8005f80:	4463      	add	r3, ip
 8005f82:	0018      	movs	r0, r3
 8005f84:	0014      	movs	r4, r2
 8005f86:	18bb      	adds	r3, r7, r2
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	18d3      	adds	r3, r2, r3
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	0019      	movs	r1, r3
 8005f94:	f7fe fd12 	bl	80049bc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f98:	0021      	movs	r1, r4
 8005f9a:	187b      	adds	r3, r7, r1
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	187b      	adds	r3, r7, r1
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	230f      	movs	r3, #15
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b25b      	sxtb	r3, r3
 8005fb2:	2b07      	cmp	r3, #7
 8005fb4:	ddda      	ble.n	8005f6c <wizchip_init+0x132>
		#endif
		}
	#endif
   }
   return 0;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b005      	add	sp, #20
 8005fbe:	bd90      	pop	{r4, r7, pc}

08005fc0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	2390      	movs	r3, #144	; 0x90
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	2206      	movs	r2, #6
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f7fe fdb7 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	330e      	adds	r3, #14
 8005fda:	0019      	movs	r1, r3
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f7fe fdae 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	330a      	adds	r3, #10
 8005fec:	0019      	movs	r1, r3
 8005fee:	23a0      	movs	r3, #160	; 0xa0
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f7fe fda5 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	1d99      	adds	r1, r3, #6
 8005ffe:	23f0      	movs	r3, #240	; 0xf0
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	2204      	movs	r2, #4
 8006004:	0018      	movs	r0, r3
 8006006:	f7fe fd9d 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	7c9a      	ldrb	r2, [r3, #18]
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <wizchip_setnetinfo+0x7c>)
 8006010:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7cda      	ldrb	r2, [r3, #19]
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <wizchip_setnetinfo+0x7c>)
 8006018:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7d1a      	ldrb	r2, [r3, #20]
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <wizchip_setnetinfo+0x7c>)
 8006020:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	7d5a      	ldrb	r2, [r3, #21]
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <wizchip_setnetinfo+0x7c>)
 8006028:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7d9a      	ldrb	r2, [r3, #22]
 800602e:	4b04      	ldr	r3, [pc, #16]	; (8006040 <wizchip_setnetinfo+0x80>)
 8006030:	701a      	strb	r2, [r3, #0]
}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	46bd      	mov	sp, r7
 8006036:	b002      	add	sp, #8
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	2000067c 	.word	0x2000067c
 8006040:	20000680 	.word	0x20000680

08006044 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8006048:	490b      	ldr	r1, [pc, #44]	; (8006078 <default_ip_assign+0x34>)
 800604a:	23f0      	movs	r3, #240	; 0xf0
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	2204      	movs	r2, #4
 8006050:	0018      	movs	r0, r3
 8006052:	f7fe fd77 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8006056:	4909      	ldr	r1, [pc, #36]	; (800607c <default_ip_assign+0x38>)
 8006058:	23a0      	movs	r3, #160	; 0xa0
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	2204      	movs	r2, #4
 800605e:	0018      	movs	r0, r3
 8006060:	f7fe fd70 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8006064:	4906      	ldr	r1, [pc, #24]	; (8006080 <default_ip_assign+0x3c>)
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	2204      	movs	r2, #4
 800606c:	0018      	movs	r0, r3
 800606e:	f7fe fd69 	bl	8004b44 <WIZCHIP_WRITE_BUF>
}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000690 	.word	0x20000690
 800607c:	20000698 	.word	0x20000698
 8006080:	20000694 	.word	0x20000694

08006084 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8006088:	2180      	movs	r1, #128	; 0x80
 800608a:	2000      	movs	r0, #0
 800608c:	f7fe fc96 	bl	80049bc <WIZCHIP_WRITE>
   getMR(); // for delay
 8006090:	2000      	movs	r0, #0
 8006092:	f7fe fc41 	bl	8004918 <WIZCHIP_READ>
   default_ip_assign();
 8006096:	f7ff ffd5 	bl	8006044 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 800609a:	4905      	ldr	r1, [pc, #20]	; (80060b0 <default_ip_update+0x2c>)
 800609c:	2390      	movs	r3, #144	; 0x90
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	2206      	movs	r2, #6
 80060a2:	0018      	movs	r0, r3
 80060a4:	f7fe fd4e 	bl	8004b44 <WIZCHIP_WRITE_BUF>
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	200006b0 	.word	0x200006b0

080060b4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	2000      	movs	r0, #0
 80060bc:	f7fe fc7e 	bl	80049bc <WIZCHIP_WRITE>
	getMR(); // for delay
 80060c0:	2000      	movs	r0, #0
 80060c2:	f7fe fc29 	bl	8004918 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80060c6:	4905      	ldr	r1, [pc, #20]	; (80060dc <default_ip_conflict+0x28>)
 80060c8:	2390      	movs	r3, #144	; 0x90
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	2206      	movs	r2, #6
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fe fd38 	bl	8004b44 <WIZCHIP_WRITE_BUF>
}
 80060d4:	46c0      	nop			; (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	200006b0 	.word	0x200006b0

080060e0 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <reg_dhcp_cbfunc+0x4c>)
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <reg_dhcp_cbfunc+0x50>)
 80060f0:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 80060f2:	4b10      	ldr	r3, [pc, #64]	; (8006134 <reg_dhcp_cbfunc+0x54>)
 80060f4:	4a10      	ldr	r2, [pc, #64]	; (8006138 <reg_dhcp_cbfunc+0x58>)
 80060f6:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80060f8:	4b10      	ldr	r3, [pc, #64]	; (800613c <reg_dhcp_cbfunc+0x5c>)
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <reg_dhcp_cbfunc+0x60>)
 80060fc:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <reg_dhcp_cbfunc+0x2a>
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <reg_dhcp_cbfunc+0x4c>)
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	601a      	str	r2, [r3, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <reg_dhcp_cbfunc+0x36>
 8006110:	4b08      	ldr	r3, [pc, #32]	; (8006134 <reg_dhcp_cbfunc+0x54>)
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	601a      	str	r2, [r3, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <reg_dhcp_cbfunc+0x42>
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <reg_dhcp_cbfunc+0x5c>)
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	46bd      	mov	sp, r7
 8006126:	b004      	add	sp, #16
 8006128:	bd80      	pop	{r7, pc}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	20000048 	.word	0x20000048
 8006130:	08006045 	.word	0x08006045
 8006134:	2000004c 	.word	0x2000004c
 8006138:	08006085 	.word	0x08006085
 800613c:	20000050 	.word	0x20000050
 8006140:	080060b5 	.word	0x080060b5

08006144 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800614a:	0039      	movs	r1, r7
 800614c:	2390      	movs	r3, #144	; 0x90
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	2206      	movs	r2, #6
 8006152:	0018      	movs	r0, r3
 8006154:	f7fe fc88 	bl	8004a68 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8006158:	4b7e      	ldr	r3, [pc, #504]	; (8006354 <makeDHCPMSG+0x210>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8006160:	4b7c      	ldr	r3, [pc, #496]	; (8006354 <makeDHCPMSG+0x210>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2201      	movs	r2, #1
 8006166:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8006168:	4b7a      	ldr	r3, [pc, #488]	; (8006354 <makeDHCPMSG+0x210>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2206      	movs	r2, #6
 800616e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8006170:	4b78      	ldr	r3, [pc, #480]	; (8006354 <makeDHCPMSG+0x210>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2200      	movs	r2, #0
 8006176:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8006178:	4b76      	ldr	r3, [pc, #472]	; (8006354 <makeDHCPMSG+0x210>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3304      	adds	r3, #4
 800617e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8006180:	4b75      	ldr	r3, [pc, #468]	; (8006358 <makeDHCPMSG+0x214>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	0e1b      	lsrs	r3, r3, #24
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 800618c:	4b72      	ldr	r3, [pc, #456]	; (8006358 <makeDHCPMSG+0x214>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	0c1a      	lsrs	r2, r3, #16
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3301      	adds	r3, #1
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 800619a:	4b6f      	ldr	r3, [pc, #444]	; (8006358 <makeDHCPMSG+0x214>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	0a1a      	lsrs	r2, r3, #8
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	3302      	adds	r3, #2
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80061a8:	4b6b      	ldr	r3, [pc, #428]	; (8006358 <makeDHCPMSG+0x214>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	3303      	adds	r3, #3
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80061b4:	4b67      	ldr	r3, [pc, #412]	; (8006354 <makeDHCPMSG+0x210>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2200      	movs	r2, #0
 80061ba:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80061bc:	4b65      	ldr	r3, [pc, #404]	; (8006354 <makeDHCPMSG+0x210>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330a      	adds	r3, #10
 80061c2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2280      	movs	r2, #128	; 0x80
 80061c8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	3301      	adds	r3, #1
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80061d2:	4b60      	ldr	r3, [pc, #384]	; (8006354 <makeDHCPMSG+0x210>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2200      	movs	r2, #0
 80061d8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80061da:	4b5e      	ldr	r3, [pc, #376]	; (8006354 <makeDHCPMSG+0x210>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80061e2:	4b5c      	ldr	r3, [pc, #368]	; (8006354 <makeDHCPMSG+0x210>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2200      	movs	r2, #0
 80061e8:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80061ea:	4b5a      	ldr	r3, [pc, #360]	; (8006354 <makeDHCPMSG+0x210>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80061f2:	4b58      	ldr	r3, [pc, #352]	; (8006354 <makeDHCPMSG+0x210>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80061fa:	4b56      	ldr	r3, [pc, #344]	; (8006354 <makeDHCPMSG+0x210>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8006202:	4b54      	ldr	r3, [pc, #336]	; (8006354 <makeDHCPMSG+0x210>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800620a:	4b52      	ldr	r3, [pc, #328]	; (8006354 <makeDHCPMSG+0x210>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2200      	movs	r2, #0
 8006210:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8006212:	4b50      	ldr	r3, [pc, #320]	; (8006354 <makeDHCPMSG+0x210>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2200      	movs	r2, #0
 8006218:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800621a:	4b4e      	ldr	r3, [pc, #312]	; (8006354 <makeDHCPMSG+0x210>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8006222:	4b4c      	ldr	r3, [pc, #304]	; (8006354 <makeDHCPMSG+0x210>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800622a:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <makeDHCPMSG+0x210>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8006232:	4b48      	ldr	r3, [pc, #288]	; (8006354 <makeDHCPMSG+0x210>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800623a:	4b46      	ldr	r3, [pc, #280]	; (8006354 <makeDHCPMSG+0x210>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8006242:	4b44      	ldr	r3, [pc, #272]	; (8006354 <makeDHCPMSG+0x210>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <makeDHCPMSG+0x210>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2200      	movs	r2, #0
 8006250:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8006252:	4b40      	ldr	r3, [pc, #256]	; (8006354 <makeDHCPMSG+0x210>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a41      	ldr	r2, [pc, #260]	; (800635c <makeDHCPMSG+0x218>)
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800625c:	4b3d      	ldr	r3, [pc, #244]	; (8006354 <makeDHCPMSG+0x210>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a3e      	ldr	r2, [pc, #248]	; (800635c <makeDHCPMSG+0x218>)
 8006262:	7852      	ldrb	r2, [r2, #1]
 8006264:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8006266:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <makeDHCPMSG+0x210>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a3c      	ldr	r2, [pc, #240]	; (800635c <makeDHCPMSG+0x218>)
 800626c:	7892      	ldrb	r2, [r2, #2]
 800626e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8006270:	4b38      	ldr	r3, [pc, #224]	; (8006354 <makeDHCPMSG+0x210>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a39      	ldr	r2, [pc, #228]	; (800635c <makeDHCPMSG+0x218>)
 8006276:	78d2      	ldrb	r2, [r2, #3]
 8006278:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800627a:	4b36      	ldr	r3, [pc, #216]	; (8006354 <makeDHCPMSG+0x210>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a37      	ldr	r2, [pc, #220]	; (800635c <makeDHCPMSG+0x218>)
 8006280:	7911      	ldrb	r1, [r2, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8006286:	4b33      	ldr	r3, [pc, #204]	; (8006354 <makeDHCPMSG+0x210>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a34      	ldr	r2, [pc, #208]	; (800635c <makeDHCPMSG+0x218>)
 800628c:	7951      	ldrb	r1, [r2, #5]
 800628e:	2221      	movs	r2, #33	; 0x21
 8006290:	5499      	strb	r1, [r3, r2]

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8006292:	230f      	movs	r3, #15
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	2206      	movs	r2, #6
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e00c      	b.n	80062b6 <makeDHCPMSG+0x172>
 800629c:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <makeDHCPMSG+0x210>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	210f      	movs	r1, #15
 80062a2:	187b      	adds	r3, r7, r1
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	18d3      	adds	r3, r2, r3
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
 80062ac:	187b      	adds	r3, r7, r1
 80062ae:	781a      	ldrb	r2, [r3, #0]
 80062b0:	187b      	adds	r3, r7, r1
 80062b2:	3201      	adds	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	220f      	movs	r2, #15
 80062b8:	18bb      	adds	r3, r7, r2
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b0f      	cmp	r3, #15
 80062be:	d9ed      	bls.n	800629c <makeDHCPMSG+0x158>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80062c0:	18bb      	adds	r3, r7, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e00e      	b.n	80062e6 <makeDHCPMSG+0x1a2>
 80062c8:	4b22      	ldr	r3, [pc, #136]	; (8006354 <makeDHCPMSG+0x210>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	200f      	movs	r0, #15
 80062ce:	183b      	adds	r3, r7, r0
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	212c      	movs	r1, #44	; 0x2c
 80062d4:	18d3      	adds	r3, r2, r3
 80062d6:	185b      	adds	r3, r3, r1
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	183b      	adds	r3, r7, r0
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	183b      	adds	r3, r7, r0
 80062e2:	3201      	adds	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	220f      	movs	r2, #15
 80062e8:	18bb      	adds	r3, r7, r2
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b3f      	cmp	r3, #63	; 0x3f
 80062ee:	d9eb      	bls.n	80062c8 <makeDHCPMSG+0x184>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80062f0:	18bb      	adds	r3, r7, r2
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e00e      	b.n	8006316 <makeDHCPMSG+0x1d2>
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <makeDHCPMSG+0x210>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	200f      	movs	r0, #15
 80062fe:	183b      	adds	r3, r7, r0
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	216c      	movs	r1, #108	; 0x6c
 8006304:	18d3      	adds	r3, r2, r3
 8006306:	185b      	adds	r3, r3, r1
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	183b      	adds	r3, r7, r0
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	183b      	adds	r3, r7, r0
 8006312:	3201      	adds	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	230f      	movs	r3, #15
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b25b      	sxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	daea      	bge.n	80062f8 <makeDHCPMSG+0x1b4>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8006322:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <makeDHCPMSG+0x210>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	22ec      	movs	r2, #236	; 0xec
 8006328:	2163      	movs	r1, #99	; 0x63
 800632a:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800632c:	4b09      	ldr	r3, [pc, #36]	; (8006354 <makeDHCPMSG+0x210>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	22ed      	movs	r2, #237	; 0xed
 8006332:	2182      	movs	r1, #130	; 0x82
 8006334:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8006336:	4b07      	ldr	r3, [pc, #28]	; (8006354 <makeDHCPMSG+0x210>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	22ee      	movs	r2, #238	; 0xee
 800633c:	2153      	movs	r1, #83	; 0x53
 800633e:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <makeDHCPMSG+0x210>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	22ef      	movs	r2, #239	; 0xef
 8006346:	2163      	movs	r1, #99	; 0x63
 8006348:	5499      	strb	r1, [r3, r2]
}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	46bd      	mov	sp, r7
 800634e:	b004      	add	sp, #16
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	200006ac 	.word	0x200006ac
 8006358:	200006a8 	.word	0x200006a8
 800635c:	200006b0 	.word	0x200006b0

08006360 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8006360:	b5b0      	push	{r4, r5, r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	2200      	movs	r2, #0
 800636a:	801a      	strh	r2, [r3, #0]
   
   makeDHCPMSG();
 800636c:	f7ff feea 	bl	8006144 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8006370:	4b6c      	ldr	r3, [pc, #432]	; (8006524 <send_DHCP_DISCOVER+0x1c4>)
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8006376:	4b6b      	ldr	r3, [pc, #428]	; (8006524 <send_DHCP_DISCOVER+0x1c4>)
 8006378:	2200      	movs	r2, #0
 800637a:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800637c:	4b69      	ldr	r3, [pc, #420]	; (8006524 <send_DHCP_DISCOVER+0x1c4>)
 800637e:	2200      	movs	r2, #0
 8006380:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8006382:	4b68      	ldr	r3, [pc, #416]	; (8006524 <send_DHCP_DISCOVER+0x1c4>)
 8006384:	2200      	movs	r2, #0
 8006386:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8006388:	4b67      	ldr	r3, [pc, #412]	; (8006528 <send_DHCP_DISCOVER+0x1c8>)
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 800638e:	4b66      	ldr	r3, [pc, #408]	; (8006528 <send_DHCP_DISCOVER+0x1c8>)
 8006390:	2200      	movs	r2, #0
 8006392:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8006394:	4b64      	ldr	r3, [pc, #400]	; (8006528 <send_DHCP_DISCOVER+0x1c8>)
 8006396:	2200      	movs	r2, #0
 8006398:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 800639a:	4b63      	ldr	r3, [pc, #396]	; (8006528 <send_DHCP_DISCOVER+0x1c8>)
 800639c:	2200      	movs	r2, #0
 800639e:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80063a0:	1d3b      	adds	r3, r7, #4
 80063a2:	2204      	movs	r2, #4
 80063a4:	801a      	strh	r2, [r3, #0]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80063a6:	4b61      	ldr	r3, [pc, #388]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	1d3b      	adds	r3, r7, #4
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	1d39      	adds	r1, r7, #4
 80063b0:	1c58      	adds	r0, r3, #1
 80063b2:	8008      	strh	r0, [r1, #0]
 80063b4:	21ec      	movs	r1, #236	; 0xec
 80063b6:	18d3      	adds	r3, r2, r3
 80063b8:	185b      	adds	r3, r3, r1
 80063ba:	2235      	movs	r2, #53	; 0x35
 80063bc:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 80063be:	4b5b      	ldr	r3, [pc, #364]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	1d39      	adds	r1, r7, #4
 80063c8:	1c58      	adds	r0, r3, #1
 80063ca:	8008      	strh	r0, [r1, #0]
 80063cc:	21ec      	movs	r1, #236	; 0xec
 80063ce:	18d3      	adds	r3, r2, r3
 80063d0:	185b      	adds	r3, r3, r1
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80063d6:	4b55      	ldr	r3, [pc, #340]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	1d3b      	adds	r3, r7, #4
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	1d39      	adds	r1, r7, #4
 80063e0:	1c58      	adds	r0, r3, #1
 80063e2:	8008      	strh	r0, [r1, #0]
 80063e4:	21ec      	movs	r1, #236	; 0xec
 80063e6:	18d3      	adds	r3, r2, r3
 80063e8:	185b      	adds	r3, r3, r1
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80063ee:	4b4f      	ldr	r3, [pc, #316]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	1d39      	adds	r1, r7, #4
 80063f8:	1c58      	adds	r0, r3, #1
 80063fa:	8008      	strh	r0, [r1, #0]
 80063fc:	21ec      	movs	r1, #236	; 0xec
 80063fe:	18d3      	adds	r3, r2, r3
 8006400:	185b      	adds	r3, r3, r1
 8006402:	223d      	movs	r2, #61	; 0x3d
 8006404:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 8006406:	4b49      	ldr	r3, [pc, #292]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	1d3b      	adds	r3, r7, #4
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	1d39      	adds	r1, r7, #4
 8006410:	1c58      	adds	r0, r3, #1
 8006412:	8008      	strh	r0, [r1, #0]
 8006414:	21ec      	movs	r1, #236	; 0xec
 8006416:	18d3      	adds	r3, r2, r3
 8006418:	185b      	adds	r3, r3, r1
 800641a:	2207      	movs	r2, #7
 800641c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 800641e:	4b43      	ldr	r3, [pc, #268]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	1d3b      	adds	r3, r7, #4
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	1d39      	adds	r1, r7, #4
 8006428:	1c58      	adds	r0, r3, #1
 800642a:	8008      	strh	r0, [r1, #0]
 800642c:	21ec      	movs	r1, #236	; 0xec
 800642e:	18d3      	adds	r3, r2, r3
 8006430:	185b      	adds	r3, r3, r1
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8006436:	4b3d      	ldr	r3, [pc, #244]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	1d3b      	adds	r3, r7, #4
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	1d39      	adds	r1, r7, #4
 8006440:	1c58      	adds	r0, r3, #1
 8006442:	8008      	strh	r0, [r1, #0]
 8006444:	001c      	movs	r4, r3
 8006446:	4b3a      	ldr	r3, [pc, #232]	; (8006530 <send_DHCP_DISCOVER+0x1d0>)
 8006448:	7818      	ldrb	r0, [r3, #0]
 800644a:	21ec      	movs	r1, #236	; 0xec
 800644c:	1913      	adds	r3, r2, r4
 800644e:	185b      	adds	r3, r3, r1
 8006450:	1c02      	adds	r2, r0, #0
 8006452:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8006454:	4b35      	ldr	r3, [pc, #212]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	1d39      	adds	r1, r7, #4
 800645e:	1c58      	adds	r0, r3, #1
 8006460:	8008      	strh	r0, [r1, #0]
 8006462:	001c      	movs	r4, r3
 8006464:	4b32      	ldr	r3, [pc, #200]	; (8006530 <send_DHCP_DISCOVER+0x1d0>)
 8006466:	7858      	ldrb	r0, [r3, #1]
 8006468:	21ec      	movs	r1, #236	; 0xec
 800646a:	1913      	adds	r3, r2, r4
 800646c:	185b      	adds	r3, r3, r1
 800646e:	1c02      	adds	r2, r0, #0
 8006470:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8006472:	4b2e      	ldr	r3, [pc, #184]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	1d39      	adds	r1, r7, #4
 800647c:	1c58      	adds	r0, r3, #1
 800647e:	8008      	strh	r0, [r1, #0]
 8006480:	001c      	movs	r4, r3
 8006482:	4b2b      	ldr	r3, [pc, #172]	; (8006530 <send_DHCP_DISCOVER+0x1d0>)
 8006484:	7898      	ldrb	r0, [r3, #2]
 8006486:	21ec      	movs	r1, #236	; 0xec
 8006488:	1913      	adds	r3, r2, r4
 800648a:	185b      	adds	r3, r3, r1
 800648c:	1c02      	adds	r2, r0, #0
 800648e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8006490:	4b26      	ldr	r3, [pc, #152]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	1d39      	adds	r1, r7, #4
 800649a:	1c58      	adds	r0, r3, #1
 800649c:	8008      	strh	r0, [r1, #0]
 800649e:	001c      	movs	r4, r3
 80064a0:	4b23      	ldr	r3, [pc, #140]	; (8006530 <send_DHCP_DISCOVER+0x1d0>)
 80064a2:	78d8      	ldrb	r0, [r3, #3]
 80064a4:	21ec      	movs	r1, #236	; 0xec
 80064a6:	1913      	adds	r3, r2, r4
 80064a8:	185b      	adds	r3, r3, r1
 80064aa:	1c02      	adds	r2, r0, #0
 80064ac:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	1d39      	adds	r1, r7, #4
 80064b8:	1c58      	adds	r0, r3, #1
 80064ba:	8008      	strh	r0, [r1, #0]
 80064bc:	001c      	movs	r4, r3
 80064be:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <send_DHCP_DISCOVER+0x1d0>)
 80064c0:	7918      	ldrb	r0, [r3, #4]
 80064c2:	21ec      	movs	r1, #236	; 0xec
 80064c4:	1913      	adds	r3, r2, r4
 80064c6:	185b      	adds	r3, r3, r1
 80064c8:	1c02      	adds	r2, r0, #0
 80064ca:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	1d3b      	adds	r3, r7, #4
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	1d39      	adds	r1, r7, #4
 80064d6:	1c58      	adds	r0, r3, #1
 80064d8:	8008      	strh	r0, [r1, #0]
 80064da:	001c      	movs	r4, r3
 80064dc:	4b14      	ldr	r3, [pc, #80]	; (8006530 <send_DHCP_DISCOVER+0x1d0>)
 80064de:	7958      	ldrb	r0, [r3, #5]
 80064e0:	21ec      	movs	r1, #236	; 0xec
 80064e2:	1913      	adds	r3, r2, r4
 80064e4:	185b      	adds	r3, r3, r1
 80064e6:	1c02      	adds	r2, r0, #0
 80064e8:	701a      	strb	r2, [r3, #0]
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	1d39      	adds	r1, r7, #4
 80064f4:	1c58      	adds	r0, r3, #1
 80064f6:	8008      	strh	r0, [r1, #0]
 80064f8:	21ec      	movs	r1, #236	; 0xec
 80064fa:	18d3      	adds	r3, r2, r3
 80064fc:	185b      	adds	r3, r3, r1
 80064fe:	220c      	movs	r2, #12
 8006500:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <send_DHCP_DISCOVER+0x1cc>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	1d3b      	adds	r3, r7, #4
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	1d39      	adds	r1, r7, #4
 800650c:	1c58      	adds	r0, r3, #1
 800650e:	8008      	strh	r0, [r1, #0]
 8006510:	21ec      	movs	r1, #236	; 0xec
 8006512:	18d3      	adds	r3, r2, r3
 8006514:	185b      	adds	r3, r3, r1
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800651a:	1dbb      	adds	r3, r7, #6
 800651c:	2200      	movs	r2, #0
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e01e      	b.n	8006560 <send_DHCP_DISCOVER+0x200>
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	20000684 	.word	0x20000684
 8006528:	20000688 	.word	0x20000688
 800652c:	200006ac 	.word	0x200006ac
 8006530:	200006b0 	.word	0x200006b0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8006534:	1dbb      	adds	r3, r7, #6
 8006536:	8819      	ldrh	r1, [r3, #0]
 8006538:	4ba4      	ldr	r3, [pc, #656]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	1d3b      	adds	r3, r7, #4
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	1d38      	adds	r0, r7, #4
 8006542:	1c5c      	adds	r4, r3, #1
 8006544:	8004      	strh	r4, [r0, #0]
 8006546:	001c      	movs	r4, r3
 8006548:	4ba1      	ldr	r3, [pc, #644]	; (80067d0 <send_DHCP_DISCOVER+0x470>)
 800654a:	5c58      	ldrb	r0, [r3, r1]
 800654c:	21ec      	movs	r1, #236	; 0xec
 800654e:	1913      	adds	r3, r2, r4
 8006550:	185b      	adds	r3, r3, r1
 8006552:	1c02      	adds	r2, r0, #0
 8006554:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006556:	1dbb      	adds	r3, r7, #6
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	1dbb      	adds	r3, r7, #6
 800655c:	3201      	adds	r2, #1
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	4a9a      	ldr	r2, [pc, #616]	; (80067d0 <send_DHCP_DISCOVER+0x470>)
 8006566:	5cd3      	ldrb	r3, [r2, r3]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <send_DHCP_DISCOVER+0x1d4>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800656c:	4b99      	ldr	r3, [pc, #612]	; (80067d4 <send_DHCP_DISCOVER+0x474>)
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	b2d9      	uxtb	r1, r3
 8006574:	4b95      	ldr	r3, [pc, #596]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 8006576:	681c      	ldr	r4, [r3, #0]
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	1d3a      	adds	r2, r7, #4
 800657e:	1c58      	adds	r0, r3, #1
 8006580:	8010      	strh	r0, [r2, #0]
 8006582:	001d      	movs	r5, r3
 8006584:	0008      	movs	r0, r1
 8006586:	f001 fad1 	bl	8007b2c <NibbleToHex>
 800658a:	0003      	movs	r3, r0
 800658c:	0019      	movs	r1, r3
 800658e:	22ec      	movs	r2, #236	; 0xec
 8006590:	1963      	adds	r3, r4, r5
 8006592:	189b      	adds	r3, r3, r2
 8006594:	1c0a      	adds	r2, r1, #0
 8006596:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8006598:	4b8e      	ldr	r3, [pc, #568]	; (80067d4 <send_DHCP_DISCOVER+0x474>)
 800659a:	78d9      	ldrb	r1, [r3, #3]
 800659c:	4b8b      	ldr	r3, [pc, #556]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 800659e:	681c      	ldr	r4, [r3, #0]
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	1d3a      	adds	r2, r7, #4
 80065a6:	1c58      	adds	r0, r3, #1
 80065a8:	8010      	strh	r0, [r2, #0]
 80065aa:	001d      	movs	r5, r3
 80065ac:	0008      	movs	r0, r1
 80065ae:	f001 fabd 	bl	8007b2c <NibbleToHex>
 80065b2:	0003      	movs	r3, r0
 80065b4:	0019      	movs	r1, r3
 80065b6:	22ec      	movs	r2, #236	; 0xec
 80065b8:	1963      	adds	r3, r4, r5
 80065ba:	189b      	adds	r3, r3, r2
 80065bc:	1c0a      	adds	r2, r1, #0
 80065be:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80065c0:	4b84      	ldr	r3, [pc, #528]	; (80067d4 <send_DHCP_DISCOVER+0x474>)
 80065c2:	791b      	ldrb	r3, [r3, #4]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	b2d9      	uxtb	r1, r3
 80065c8:	4b80      	ldr	r3, [pc, #512]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 80065ca:	681c      	ldr	r4, [r3, #0]
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	1d3a      	adds	r2, r7, #4
 80065d2:	1c58      	adds	r0, r3, #1
 80065d4:	8010      	strh	r0, [r2, #0]
 80065d6:	001d      	movs	r5, r3
 80065d8:	0008      	movs	r0, r1
 80065da:	f001 faa7 	bl	8007b2c <NibbleToHex>
 80065de:	0003      	movs	r3, r0
 80065e0:	0019      	movs	r1, r3
 80065e2:	22ec      	movs	r2, #236	; 0xec
 80065e4:	1963      	adds	r3, r4, r5
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	1c0a      	adds	r2, r1, #0
 80065ea:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80065ec:	4b79      	ldr	r3, [pc, #484]	; (80067d4 <send_DHCP_DISCOVER+0x474>)
 80065ee:	7919      	ldrb	r1, [r3, #4]
 80065f0:	4b76      	ldr	r3, [pc, #472]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 80065f2:	681c      	ldr	r4, [r3, #0]
 80065f4:	1d3b      	adds	r3, r7, #4
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	1d3a      	adds	r2, r7, #4
 80065fa:	1c58      	adds	r0, r3, #1
 80065fc:	8010      	strh	r0, [r2, #0]
 80065fe:	001d      	movs	r5, r3
 8006600:	0008      	movs	r0, r1
 8006602:	f001 fa93 	bl	8007b2c <NibbleToHex>
 8006606:	0003      	movs	r3, r0
 8006608:	0019      	movs	r1, r3
 800660a:	22ec      	movs	r2, #236	; 0xec
 800660c:	1963      	adds	r3, r4, r5
 800660e:	189b      	adds	r3, r3, r2
 8006610:	1c0a      	adds	r2, r1, #0
 8006612:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8006614:	4b6f      	ldr	r3, [pc, #444]	; (80067d4 <send_DHCP_DISCOVER+0x474>)
 8006616:	795b      	ldrb	r3, [r3, #5]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	b2d9      	uxtb	r1, r3
 800661c:	4b6b      	ldr	r3, [pc, #428]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 800661e:	681c      	ldr	r4, [r3, #0]
 8006620:	1d3b      	adds	r3, r7, #4
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	1d3a      	adds	r2, r7, #4
 8006626:	1c58      	adds	r0, r3, #1
 8006628:	8010      	strh	r0, [r2, #0]
 800662a:	001d      	movs	r5, r3
 800662c:	0008      	movs	r0, r1
 800662e:	f001 fa7d 	bl	8007b2c <NibbleToHex>
 8006632:	0003      	movs	r3, r0
 8006634:	0019      	movs	r1, r3
 8006636:	22ec      	movs	r2, #236	; 0xec
 8006638:	1963      	adds	r3, r4, r5
 800663a:	189b      	adds	r3, r3, r2
 800663c:	1c0a      	adds	r2, r1, #0
 800663e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8006640:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <send_DHCP_DISCOVER+0x474>)
 8006642:	7959      	ldrb	r1, [r3, #5]
 8006644:	4b61      	ldr	r3, [pc, #388]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 8006646:	681c      	ldr	r4, [r3, #0]
 8006648:	1d3b      	adds	r3, r7, #4
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	1d3a      	adds	r2, r7, #4
 800664e:	1c58      	adds	r0, r3, #1
 8006650:	8010      	strh	r0, [r2, #0]
 8006652:	001d      	movs	r5, r3
 8006654:	0008      	movs	r0, r1
 8006656:	f001 fa69 	bl	8007b2c <NibbleToHex>
 800665a:	0003      	movs	r3, r0
 800665c:	0019      	movs	r1, r3
 800665e:	22ec      	movs	r2, #236	; 0xec
 8006660:	1963      	adds	r3, r4, r5
 8006662:	189b      	adds	r3, r3, r2
 8006664:	1c0a      	adds	r2, r1, #0
 8006666:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8006668:	1dbb      	adds	r3, r7, #6
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b2d9      	uxtb	r1, r3
 800666e:	4b57      	ldr	r3, [pc, #348]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	1d3b      	adds	r3, r7, #4
 8006674:	8818      	ldrh	r0, [r3, #0]
 8006676:	1dbb      	adds	r3, r7, #6
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	3307      	adds	r3, #7
 800667c:	1ac3      	subs	r3, r0, r3
 800667e:	3106      	adds	r1, #6
 8006680:	b2c8      	uxtb	r0, r1
 8006682:	21ec      	movs	r1, #236	; 0xec
 8006684:	18d3      	adds	r3, r2, r3
 8006686:	185b      	adds	r3, r3, r1
 8006688:	1c02      	adds	r2, r0, #0
 800668a:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800668c:	4b4f      	ldr	r3, [pc, #316]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	1d39      	adds	r1, r7, #4
 8006696:	1c58      	adds	r0, r3, #1
 8006698:	8008      	strh	r0, [r1, #0]
 800669a:	21ec      	movs	r1, #236	; 0xec
 800669c:	18d3      	adds	r3, r2, r3
 800669e:	185b      	adds	r3, r3, r1
 80066a0:	2237      	movs	r2, #55	; 0x37
 80066a2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80066a4:	4b49      	ldr	r3, [pc, #292]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	1d3b      	adds	r3, r7, #4
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	1d39      	adds	r1, r7, #4
 80066ae:	1c58      	adds	r0, r3, #1
 80066b0:	8008      	strh	r0, [r1, #0]
 80066b2:	21ec      	movs	r1, #236	; 0xec
 80066b4:	18d3      	adds	r3, r2, r3
 80066b6:	185b      	adds	r3, r3, r1
 80066b8:	2206      	movs	r2, #6
 80066ba:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = subnetMask;
 80066bc:	4b43      	ldr	r3, [pc, #268]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	1d3b      	adds	r3, r7, #4
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	1d39      	adds	r1, r7, #4
 80066c6:	1c58      	adds	r0, r3, #1
 80066c8:	8008      	strh	r0, [r1, #0]
 80066ca:	21ec      	movs	r1, #236	; 0xec
 80066cc:	18d3      	adds	r3, r2, r3
 80066ce:	185b      	adds	r3, r3, r1
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80066d4:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	1d3b      	adds	r3, r7, #4
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	1d39      	adds	r1, r7, #4
 80066de:	1c58      	adds	r0, r3, #1
 80066e0:	8008      	strh	r0, [r1, #0]
 80066e2:	21ec      	movs	r1, #236	; 0xec
 80066e4:	18d3      	adds	r3, r2, r3
 80066e6:	185b      	adds	r3, r3, r1
 80066e8:	2203      	movs	r2, #3
 80066ea:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dns;
 80066ec:	4b37      	ldr	r3, [pc, #220]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	1d3b      	adds	r3, r7, #4
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	1d39      	adds	r1, r7, #4
 80066f6:	1c58      	adds	r0, r3, #1
 80066f8:	8008      	strh	r0, [r1, #0]
 80066fa:	21ec      	movs	r1, #236	; 0xec
 80066fc:	18d3      	adds	r3, r2, r3
 80066fe:	185b      	adds	r3, r3, r1
 8006700:	2206      	movs	r2, #6
 8006702:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = domainName;
 8006704:	4b31      	ldr	r3, [pc, #196]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	1d39      	adds	r1, r7, #4
 800670e:	1c58      	adds	r0, r3, #1
 8006710:	8008      	strh	r0, [r1, #0]
 8006712:	21ec      	movs	r1, #236	; 0xec
 8006714:	18d3      	adds	r3, r2, r3
 8006716:	185b      	adds	r3, r3, r1
 8006718:	220f      	movs	r2, #15
 800671a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800671c:	4b2b      	ldr	r3, [pc, #172]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	1d39      	adds	r1, r7, #4
 8006726:	1c58      	adds	r0, r3, #1
 8006728:	8008      	strh	r0, [r1, #0]
 800672a:	21ec      	movs	r1, #236	; 0xec
 800672c:	18d3      	adds	r3, r2, r3
 800672e:	185b      	adds	r3, r3, r1
 8006730:	223a      	movs	r2, #58	; 0x3a
 8006732:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8006734:	4b25      	ldr	r3, [pc, #148]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	1d3b      	adds	r3, r7, #4
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	1d39      	adds	r1, r7, #4
 800673e:	1c58      	adds	r0, r3, #1
 8006740:	8008      	strh	r0, [r1, #0]
 8006742:	21ec      	movs	r1, #236	; 0xec
 8006744:	18d3      	adds	r3, r2, r3
 8006746:	185b      	adds	r3, r3, r1
 8006748:	223b      	movs	r2, #59	; 0x3b
 800674a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = endOption;
 800674c:	4b1f      	ldr	r3, [pc, #124]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	1d3b      	adds	r3, r7, #4
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	1d39      	adds	r1, r7, #4
 8006756:	1c58      	adds	r0, r3, #1
 8006758:	8008      	strh	r0, [r1, #0]
 800675a:	21ec      	movs	r1, #236	; 0xec
 800675c:	18d3      	adds	r3, r2, r3
 800675e:	185b      	adds	r3, r3, r1
 8006760:	22ff      	movs	r2, #255	; 0xff
 8006762:	701a      	strb	r2, [r3, #0]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8006764:	1dbb      	adds	r3, r7, #6
 8006766:	1d3a      	adds	r2, r7, #4
 8006768:	8812      	ldrh	r2, [r2, #0]
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e00d      	b.n	800678a <send_DHCP_DISCOVER+0x42a>
 800676e:	4b17      	ldr	r3, [pc, #92]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	1dbb      	adds	r3, r7, #6
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	21ec      	movs	r1, #236	; 0xec
 8006778:	18d3      	adds	r3, r2, r3
 800677a:	185b      	adds	r3, r3, r1
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	1dbb      	adds	r3, r7, #6
 8006782:	881a      	ldrh	r2, [r3, #0]
 8006784:	1dbb      	adds	r3, r7, #6
 8006786:	3201      	adds	r2, #1
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	1dbb      	adds	r3, r7, #6
 800678c:	881a      	ldrh	r2, [r3, #0]
 800678e:	239c      	movs	r3, #156	; 0x9c
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	429a      	cmp	r2, r3
 8006794:	d3eb      	bcc.n	800676e <send_DHCP_DISCOVER+0x40e>

	// send broadcasting packet
	ip[0] = 255;
 8006796:	003b      	movs	r3, r7
 8006798:	22ff      	movs	r2, #255	; 0xff
 800679a:	701a      	strb	r2, [r3, #0]
	ip[1] = 255;
 800679c:	003b      	movs	r3, r7
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	705a      	strb	r2, [r3, #1]
	ip[2] = 255;
 80067a2:	003b      	movs	r3, r7
 80067a4:	22ff      	movs	r2, #255	; 0xff
 80067a6:	709a      	strb	r2, [r3, #2]
	ip[3] = 255;
 80067a8:	003b      	movs	r3, r7
 80067aa:	22ff      	movs	r2, #255	; 0xff
 80067ac:	70da      	strb	r2, [r3, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <send_DHCP_DISCOVER+0x478>)
 80067b0:	7818      	ldrb	r0, [r3, #0]
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <send_DHCP_DISCOVER+0x46c>)
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	003b      	movs	r3, r7
 80067b8:	2289      	movs	r2, #137	; 0x89
 80067ba:	0092      	lsls	r2, r2, #2
 80067bc:	2443      	movs	r4, #67	; 0x43
 80067be:	9400      	str	r4, [sp, #0]
 80067c0:	f7fe fe08 	bl	80053d4 <sendto>
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bdb0      	pop	{r4, r5, r7, pc}
 80067cc:	200006ac 	.word	0x200006ac
 80067d0:	20000040 	.word	0x20000040
 80067d4:	200006b0 	.word	0x200006b0
 80067d8:	20000681 	.word	0x20000681

080067dc <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80067dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067de:	b087      	sub	sp, #28
 80067e0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80067e2:	230a      	movs	r3, #10
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	2200      	movs	r2, #0
 80067e8:	801a      	strh	r2, [r3, #0]

   makeDHCPMSG();
 80067ea:	f7ff fcab 	bl	8006144 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80067ee:	4bda      	ldr	r3, [pc, #872]	; (8006b58 <send_DHCP_REQUEST+0x37c>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b25b      	sxtb	r3, r3
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d004      	beq.n	8006802 <send_DHCP_REQUEST+0x26>
 80067f8:	4bd7      	ldr	r3, [pc, #860]	; (8006b58 <send_DHCP_REQUEST+0x37c>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	b25b      	sxtb	r3, r3
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d12f      	bne.n	8006862 <send_DHCP_REQUEST+0x86>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8006802:	4bd6      	ldr	r3, [pc, #856]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	330a      	adds	r3, #10
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800680c:	4bd3      	ldr	r3, [pc, #844]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330a      	adds	r3, #10
 8006812:	3301      	adds	r3, #1
 8006814:	2200      	movs	r2, #0
 8006816:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8006818:	4bd0      	ldr	r3, [pc, #832]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4ad0      	ldr	r2, [pc, #832]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8006822:	4bce      	ldr	r3, [pc, #824]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4ace      	ldr	r2, [pc, #824]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 8006828:	7852      	ldrb	r2, [r2, #1]
 800682a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800682c:	4bcb      	ldr	r3, [pc, #812]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4acb      	ldr	r2, [pc, #812]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 8006832:	7892      	ldrb	r2, [r2, #2]
 8006834:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8006836:	4bc9      	ldr	r3, [pc, #804]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4ac9      	ldr	r2, [pc, #804]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 800683c:	78d2      	ldrb	r2, [r2, #3]
 800683e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8006840:	4bc8      	ldr	r3, [pc, #800]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	1d3b      	adds	r3, r7, #4
 8006846:	701a      	strb	r2, [r3, #0]
   	ip[1] = DHCP_SIP[1];
 8006848:	4bc6      	ldr	r3, [pc, #792]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 800684a:	785a      	ldrb	r2, [r3, #1]
 800684c:	1d3b      	adds	r3, r7, #4
 800684e:	705a      	strb	r2, [r3, #1]
   	ip[2] = DHCP_SIP[2];
 8006850:	4bc4      	ldr	r3, [pc, #784]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 8006852:	789a      	ldrb	r2, [r3, #2]
 8006854:	1d3b      	adds	r3, r7, #4
 8006856:	709a      	strb	r2, [r3, #2]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8006858:	4bc2      	ldr	r3, [pc, #776]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 800685a:	78da      	ldrb	r2, [r3, #3]
 800685c:	1d3b      	adds	r3, r7, #4
 800685e:	70da      	strb	r2, [r3, #3]
 8006860:	e00b      	b.n	800687a <send_DHCP_REQUEST+0x9e>
   }
   else
   {
   	ip[0] = 255;
 8006862:	1d3b      	adds	r3, r7, #4
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	701a      	strb	r2, [r3, #0]
   	ip[1] = 255;
 8006868:	1d3b      	adds	r3, r7, #4
 800686a:	22ff      	movs	r2, #255	; 0xff
 800686c:	705a      	strb	r2, [r3, #1]
   	ip[2] = 255;
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	22ff      	movs	r2, #255	; 0xff
 8006872:	709a      	strb	r2, [r3, #2]
   	ip[3] = 255;   	   	   	
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	22ff      	movs	r2, #255	; 0xff
 8006878:	70da      	strb	r2, [r3, #3]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800687a:	250a      	movs	r5, #10
 800687c:	197b      	adds	r3, r7, r5
 800687e:	2204      	movs	r2, #4
 8006880:	801a      	strh	r2, [r3, #0]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8006882:	4bb6      	ldr	r3, [pc, #728]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	197b      	adds	r3, r7, r5
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	1979      	adds	r1, r7, r5
 800688c:	1c58      	adds	r0, r3, #1
 800688e:	8008      	strh	r0, [r1, #0]
 8006890:	21ec      	movs	r1, #236	; 0xec
 8006892:	18d3      	adds	r3, r2, r3
 8006894:	185b      	adds	r3, r3, r1
 8006896:	2235      	movs	r2, #53	; 0x35
 8006898:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 800689a:	4bb0      	ldr	r3, [pc, #704]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	197b      	adds	r3, r7, r5
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	1979      	adds	r1, r7, r5
 80068a4:	1c58      	adds	r0, r3, #1
 80068a6:	8008      	strh	r0, [r1, #0]
 80068a8:	21ec      	movs	r1, #236	; 0xec
 80068aa:	18d3      	adds	r3, r2, r3
 80068ac:	185b      	adds	r3, r3, r1
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80068b2:	4baa      	ldr	r3, [pc, #680]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	197b      	adds	r3, r7, r5
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	1979      	adds	r1, r7, r5
 80068bc:	1c58      	adds	r0, r3, #1
 80068be:	8008      	strh	r0, [r1, #0]
 80068c0:	21ec      	movs	r1, #236	; 0xec
 80068c2:	18d3      	adds	r3, r2, r3
 80068c4:	185b      	adds	r3, r3, r1
 80068c6:	2203      	movs	r2, #3
 80068c8:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80068ca:	4ba4      	ldr	r3, [pc, #656]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	197b      	adds	r3, r7, r5
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	1979      	adds	r1, r7, r5
 80068d4:	1c58      	adds	r0, r3, #1
 80068d6:	8008      	strh	r0, [r1, #0]
 80068d8:	21ec      	movs	r1, #236	; 0xec
 80068da:	18d3      	adds	r3, r2, r3
 80068dc:	185b      	adds	r3, r3, r1
 80068de:	223d      	movs	r2, #61	; 0x3d
 80068e0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 80068e2:	4b9e      	ldr	r3, [pc, #632]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	197b      	adds	r3, r7, r5
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	1979      	adds	r1, r7, r5
 80068ec:	1c58      	adds	r0, r3, #1
 80068ee:	8008      	strh	r0, [r1, #0]
 80068f0:	21ec      	movs	r1, #236	; 0xec
 80068f2:	18d3      	adds	r3, r2, r3
 80068f4:	185b      	adds	r3, r3, r1
 80068f6:	2207      	movs	r2, #7
 80068f8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 80068fa:	4b98      	ldr	r3, [pc, #608]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	197b      	adds	r3, r7, r5
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	1979      	adds	r1, r7, r5
 8006904:	1c58      	adds	r0, r3, #1
 8006906:	8008      	strh	r0, [r1, #0]
 8006908:	21ec      	movs	r1, #236	; 0xec
 800690a:	18d3      	adds	r3, r2, r3
 800690c:	185b      	adds	r3, r3, r1
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8006912:	4b92      	ldr	r3, [pc, #584]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	197b      	adds	r3, r7, r5
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	1979      	adds	r1, r7, r5
 800691c:	1c58      	adds	r0, r3, #1
 800691e:	8008      	strh	r0, [r1, #0]
 8006920:	001c      	movs	r4, r3
 8006922:	4b91      	ldr	r3, [pc, #580]	; (8006b68 <send_DHCP_REQUEST+0x38c>)
 8006924:	7818      	ldrb	r0, [r3, #0]
 8006926:	21ec      	movs	r1, #236	; 0xec
 8006928:	1913      	adds	r3, r2, r4
 800692a:	185b      	adds	r3, r3, r1
 800692c:	1c02      	adds	r2, r0, #0
 800692e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8006930:	4b8a      	ldr	r3, [pc, #552]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	197b      	adds	r3, r7, r5
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	1979      	adds	r1, r7, r5
 800693a:	1c58      	adds	r0, r3, #1
 800693c:	8008      	strh	r0, [r1, #0]
 800693e:	001c      	movs	r4, r3
 8006940:	4b89      	ldr	r3, [pc, #548]	; (8006b68 <send_DHCP_REQUEST+0x38c>)
 8006942:	7858      	ldrb	r0, [r3, #1]
 8006944:	21ec      	movs	r1, #236	; 0xec
 8006946:	1913      	adds	r3, r2, r4
 8006948:	185b      	adds	r3, r3, r1
 800694a:	1c02      	adds	r2, r0, #0
 800694c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800694e:	4b83      	ldr	r3, [pc, #524]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	197b      	adds	r3, r7, r5
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	1979      	adds	r1, r7, r5
 8006958:	1c58      	adds	r0, r3, #1
 800695a:	8008      	strh	r0, [r1, #0]
 800695c:	001c      	movs	r4, r3
 800695e:	4b82      	ldr	r3, [pc, #520]	; (8006b68 <send_DHCP_REQUEST+0x38c>)
 8006960:	7898      	ldrb	r0, [r3, #2]
 8006962:	21ec      	movs	r1, #236	; 0xec
 8006964:	1913      	adds	r3, r2, r4
 8006966:	185b      	adds	r3, r3, r1
 8006968:	1c02      	adds	r2, r0, #0
 800696a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800696c:	4b7b      	ldr	r3, [pc, #492]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	197b      	adds	r3, r7, r5
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	1979      	adds	r1, r7, r5
 8006976:	1c58      	adds	r0, r3, #1
 8006978:	8008      	strh	r0, [r1, #0]
 800697a:	001c      	movs	r4, r3
 800697c:	4b7a      	ldr	r3, [pc, #488]	; (8006b68 <send_DHCP_REQUEST+0x38c>)
 800697e:	78d8      	ldrb	r0, [r3, #3]
 8006980:	21ec      	movs	r1, #236	; 0xec
 8006982:	1913      	adds	r3, r2, r4
 8006984:	185b      	adds	r3, r3, r1
 8006986:	1c02      	adds	r2, r0, #0
 8006988:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800698a:	4b74      	ldr	r3, [pc, #464]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	197b      	adds	r3, r7, r5
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	1979      	adds	r1, r7, r5
 8006994:	1c58      	adds	r0, r3, #1
 8006996:	8008      	strh	r0, [r1, #0]
 8006998:	001c      	movs	r4, r3
 800699a:	4b73      	ldr	r3, [pc, #460]	; (8006b68 <send_DHCP_REQUEST+0x38c>)
 800699c:	7918      	ldrb	r0, [r3, #4]
 800699e:	21ec      	movs	r1, #236	; 0xec
 80069a0:	1913      	adds	r3, r2, r4
 80069a2:	185b      	adds	r3, r3, r1
 80069a4:	1c02      	adds	r2, r0, #0
 80069a6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80069a8:	4b6c      	ldr	r3, [pc, #432]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	197b      	adds	r3, r7, r5
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	1979      	adds	r1, r7, r5
 80069b2:	1c58      	adds	r0, r3, #1
 80069b4:	8008      	strh	r0, [r1, #0]
 80069b6:	001c      	movs	r4, r3
 80069b8:	4b6b      	ldr	r3, [pc, #428]	; (8006b68 <send_DHCP_REQUEST+0x38c>)
 80069ba:	7958      	ldrb	r0, [r3, #5]
 80069bc:	21ec      	movs	r1, #236	; 0xec
 80069be:	1913      	adds	r3, r2, r4
 80069c0:	185b      	adds	r3, r3, r1
 80069c2:	1c02      	adds	r2, r0, #0
 80069c4:	701a      	strb	r2, [r3, #0]

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	78db      	ldrb	r3, [r3, #3]
 80069ca:	2bff      	cmp	r3, #255	; 0xff
 80069cc:	d000      	beq.n	80069d0 <send_DHCP_REQUEST+0x1f4>
 80069ce:	e0a7      	b.n	8006b20 <send_DHCP_REQUEST+0x344>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80069d0:	4b62      	ldr	r3, [pc, #392]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	197b      	adds	r3, r7, r5
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	1979      	adds	r1, r7, r5
 80069da:	1c58      	adds	r0, r3, #1
 80069dc:	8008      	strh	r0, [r1, #0]
 80069de:	21ec      	movs	r1, #236	; 0xec
 80069e0:	18d3      	adds	r3, r2, r3
 80069e2:	185b      	adds	r3, r3, r1
 80069e4:	2232      	movs	r2, #50	; 0x32
 80069e6:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = 0x04;
 80069e8:	4b5c      	ldr	r3, [pc, #368]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	197b      	adds	r3, r7, r5
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	1979      	adds	r1, r7, r5
 80069f2:	1c58      	adds	r0, r3, #1
 80069f4:	8008      	strh	r0, [r1, #0]
 80069f6:	21ec      	movs	r1, #236	; 0xec
 80069f8:	18d3      	adds	r3, r2, r3
 80069fa:	185b      	adds	r3, r3, r1
 80069fc:	2204      	movs	r2, #4
 80069fe:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8006a00:	4b56      	ldr	r3, [pc, #344]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	197b      	adds	r3, r7, r5
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	1979      	adds	r1, r7, r5
 8006a0a:	1c58      	adds	r0, r3, #1
 8006a0c:	8008      	strh	r0, [r1, #0]
 8006a0e:	001c      	movs	r4, r3
 8006a10:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 8006a12:	7818      	ldrb	r0, [r3, #0]
 8006a14:	21ec      	movs	r1, #236	; 0xec
 8006a16:	1913      	adds	r3, r2, r4
 8006a18:	185b      	adds	r3, r3, r1
 8006a1a:	1c02      	adds	r2, r0, #0
 8006a1c:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8006a1e:	4b4f      	ldr	r3, [pc, #316]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	197b      	adds	r3, r7, r5
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	1979      	adds	r1, r7, r5
 8006a28:	1c58      	adds	r0, r3, #1
 8006a2a:	8008      	strh	r0, [r1, #0]
 8006a2c:	001c      	movs	r4, r3
 8006a2e:	4b4c      	ldr	r3, [pc, #304]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 8006a30:	7858      	ldrb	r0, [r3, #1]
 8006a32:	21ec      	movs	r1, #236	; 0xec
 8006a34:	1913      	adds	r3, r2, r4
 8006a36:	185b      	adds	r3, r3, r1
 8006a38:	1c02      	adds	r2, r0, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8006a3c:	4b47      	ldr	r3, [pc, #284]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	197b      	adds	r3, r7, r5
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	1979      	adds	r1, r7, r5
 8006a46:	1c58      	adds	r0, r3, #1
 8006a48:	8008      	strh	r0, [r1, #0]
 8006a4a:	001c      	movs	r4, r3
 8006a4c:	4b44      	ldr	r3, [pc, #272]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 8006a4e:	7898      	ldrb	r0, [r3, #2]
 8006a50:	21ec      	movs	r1, #236	; 0xec
 8006a52:	1913      	adds	r3, r2, r4
 8006a54:	185b      	adds	r3, r3, r1
 8006a56:	1c02      	adds	r2, r0, #0
 8006a58:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8006a5a:	4b40      	ldr	r3, [pc, #256]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	197b      	adds	r3, r7, r5
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	1979      	adds	r1, r7, r5
 8006a64:	1c58      	adds	r0, r3, #1
 8006a66:	8008      	strh	r0, [r1, #0]
 8006a68:	001c      	movs	r4, r3
 8006a6a:	4b3d      	ldr	r3, [pc, #244]	; (8006b60 <send_DHCP_REQUEST+0x384>)
 8006a6c:	78d8      	ldrb	r0, [r3, #3]
 8006a6e:	21ec      	movs	r1, #236	; 0xec
 8006a70:	1913      	adds	r3, r2, r4
 8006a72:	185b      	adds	r3, r3, r1
 8006a74:	1c02      	adds	r2, r0, #0
 8006a76:	701a      	strb	r2, [r3, #0]
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8006a78:	4b38      	ldr	r3, [pc, #224]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	197b      	adds	r3, r7, r5
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	1979      	adds	r1, r7, r5
 8006a82:	1c58      	adds	r0, r3, #1
 8006a84:	8008      	strh	r0, [r1, #0]
 8006a86:	21ec      	movs	r1, #236	; 0xec
 8006a88:	18d3      	adds	r3, r2, r3
 8006a8a:	185b      	adds	r3, r3, r1
 8006a8c:	2236      	movs	r2, #54	; 0x36
 8006a8e:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = 0x04;
 8006a90:	4b32      	ldr	r3, [pc, #200]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	197b      	adds	r3, r7, r5
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	1979      	adds	r1, r7, r5
 8006a9a:	1c58      	adds	r0, r3, #1
 8006a9c:	8008      	strh	r0, [r1, #0]
 8006a9e:	21ec      	movs	r1, #236	; 0xec
 8006aa0:	18d3      	adds	r3, r2, r3
 8006aa2:	185b      	adds	r3, r3, r1
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8006aa8:	4b2c      	ldr	r3, [pc, #176]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	197b      	adds	r3, r7, r5
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	1979      	adds	r1, r7, r5
 8006ab2:	1c58      	adds	r0, r3, #1
 8006ab4:	8008      	strh	r0, [r1, #0]
 8006ab6:	001c      	movs	r4, r3
 8006ab8:	4b2a      	ldr	r3, [pc, #168]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 8006aba:	7818      	ldrb	r0, [r3, #0]
 8006abc:	21ec      	movs	r1, #236	; 0xec
 8006abe:	1913      	adds	r3, r2, r4
 8006ac0:	185b      	adds	r3, r3, r1
 8006ac2:	1c02      	adds	r2, r0, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8006ac6:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	197b      	adds	r3, r7, r5
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	1979      	adds	r1, r7, r5
 8006ad0:	1c58      	adds	r0, r3, #1
 8006ad2:	8008      	strh	r0, [r1, #0]
 8006ad4:	001c      	movs	r4, r3
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 8006ad8:	7858      	ldrb	r0, [r3, #1]
 8006ada:	21ec      	movs	r1, #236	; 0xec
 8006adc:	1913      	adds	r3, r2, r4
 8006ade:	185b      	adds	r3, r3, r1
 8006ae0:	1c02      	adds	r2, r0, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	197b      	adds	r3, r7, r5
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	1979      	adds	r1, r7, r5
 8006aee:	1c58      	adds	r0, r3, #1
 8006af0:	8008      	strh	r0, [r1, #0]
 8006af2:	001c      	movs	r4, r3
 8006af4:	4b1b      	ldr	r3, [pc, #108]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 8006af6:	7898      	ldrb	r0, [r3, #2]
 8006af8:	21ec      	movs	r1, #236	; 0xec
 8006afa:	1913      	adds	r3, r2, r4
 8006afc:	185b      	adds	r3, r3, r1
 8006afe:	1c02      	adds	r2, r0, #0
 8006b00:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8006b02:	4b16      	ldr	r3, [pc, #88]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	197b      	adds	r3, r7, r5
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	1979      	adds	r1, r7, r5
 8006b0c:	1c58      	adds	r0, r3, #1
 8006b0e:	8008      	strh	r0, [r1, #0]
 8006b10:	001c      	movs	r4, r3
 8006b12:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <send_DHCP_REQUEST+0x388>)
 8006b14:	78d8      	ldrb	r0, [r3, #3]
 8006b16:	21ec      	movs	r1, #236	; 0xec
 8006b18:	1913      	adds	r3, r2, r4
 8006b1a:	185b      	adds	r3, r3, r1
 8006b1c:	1c02      	adds	r2, r0, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8006b20:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	240a      	movs	r4, #10
 8006b26:	193b      	adds	r3, r7, r4
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	1939      	adds	r1, r7, r4
 8006b2c:	1c58      	adds	r0, r3, #1
 8006b2e:	8008      	strh	r0, [r1, #0]
 8006b30:	21ec      	movs	r1, #236	; 0xec
 8006b32:	18d3      	adds	r3, r2, r3
 8006b34:	185b      	adds	r3, r3, r1
 8006b36:	220c      	movs	r2, #12
 8006b38:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8006b3a:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <send_DHCP_REQUEST+0x380>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	193b      	adds	r3, r7, r4
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	1939      	adds	r1, r7, r4
 8006b44:	1c58      	adds	r0, r3, #1
 8006b46:	8008      	strh	r0, [r1, #0]
 8006b48:	21ec      	movs	r1, #236	; 0xec
 8006b4a:	18d3      	adds	r3, r2, r3
 8006b4c:	185b      	adds	r3, r3, r1
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e01e      	b.n	8006b96 <send_DHCP_REQUEST+0x3ba>
 8006b58:	200006a0 	.word	0x200006a0
 8006b5c:	200006ac 	.word	0x200006ac
 8006b60:	20000690 	.word	0x20000690
 8006b64:	20000684 	.word	0x20000684
 8006b68:	200006b0 	.word	0x200006b0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8006b6c:	4ba8      	ldr	r3, [pc, #672]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	210a      	movs	r1, #10
 8006b72:	187b      	adds	r3, r7, r1
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	1879      	adds	r1, r7, r1
 8006b78:	1c58      	adds	r0, r3, #1
 8006b7a:	8008      	strh	r0, [r1, #0]
 8006b7c:	001c      	movs	r4, r3
 8006b7e:	49a5      	ldr	r1, [pc, #660]	; (8006e14 <send_DHCP_REQUEST+0x638>)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	18cb      	adds	r3, r1, r3
 8006b84:	7818      	ldrb	r0, [r3, #0]
 8006b86:	21ec      	movs	r1, #236	; 0xec
 8006b88:	1913      	adds	r3, r2, r4
 8006b8a:	185b      	adds	r3, r3, r1
 8006b8c:	1c02      	adds	r2, r0, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	4a9f      	ldr	r2, [pc, #636]	; (8006e14 <send_DHCP_REQUEST+0x638>)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	18d3      	adds	r3, r2, r3
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e4      	bne.n	8006b6c <send_DHCP_REQUEST+0x390>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8006ba2:	4b9d      	ldr	r3, [pc, #628]	; (8006e18 <send_DHCP_REQUEST+0x63c>)
 8006ba4:	78db      	ldrb	r3, [r3, #3]
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	b2d9      	uxtb	r1, r3
 8006baa:	4b99      	ldr	r3, [pc, #612]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006bac:	681c      	ldr	r4, [r3, #0]
 8006bae:	260a      	movs	r6, #10
 8006bb0:	19bb      	adds	r3, r7, r6
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	19ba      	adds	r2, r7, r6
 8006bb6:	1c58      	adds	r0, r3, #1
 8006bb8:	8010      	strh	r0, [r2, #0]
 8006bba:	001d      	movs	r5, r3
 8006bbc:	0008      	movs	r0, r1
 8006bbe:	f000 ffb5 	bl	8007b2c <NibbleToHex>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	22ec      	movs	r2, #236	; 0xec
 8006bc8:	1963      	adds	r3, r4, r5
 8006bca:	189b      	adds	r3, r3, r2
 8006bcc:	1c0a      	adds	r2, r1, #0
 8006bce:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8006bd0:	4b91      	ldr	r3, [pc, #580]	; (8006e18 <send_DHCP_REQUEST+0x63c>)
 8006bd2:	78d9      	ldrb	r1, [r3, #3]
 8006bd4:	4b8e      	ldr	r3, [pc, #568]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006bd6:	681c      	ldr	r4, [r3, #0]
 8006bd8:	19bb      	adds	r3, r7, r6
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	19ba      	adds	r2, r7, r6
 8006bde:	1c58      	adds	r0, r3, #1
 8006be0:	8010      	strh	r0, [r2, #0]
 8006be2:	001d      	movs	r5, r3
 8006be4:	0008      	movs	r0, r1
 8006be6:	f000 ffa1 	bl	8007b2c <NibbleToHex>
 8006bea:	0003      	movs	r3, r0
 8006bec:	0019      	movs	r1, r3
 8006bee:	22ec      	movs	r2, #236	; 0xec
 8006bf0:	1963      	adds	r3, r4, r5
 8006bf2:	189b      	adds	r3, r3, r2
 8006bf4:	1c0a      	adds	r2, r1, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8006bf8:	4b87      	ldr	r3, [pc, #540]	; (8006e18 <send_DHCP_REQUEST+0x63c>)
 8006bfa:	791b      	ldrb	r3, [r3, #4]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	b2d9      	uxtb	r1, r3
 8006c00:	4b83      	ldr	r3, [pc, #524]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006c02:	681c      	ldr	r4, [r3, #0]
 8006c04:	19bb      	adds	r3, r7, r6
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	19ba      	adds	r2, r7, r6
 8006c0a:	1c58      	adds	r0, r3, #1
 8006c0c:	8010      	strh	r0, [r2, #0]
 8006c0e:	001d      	movs	r5, r3
 8006c10:	0008      	movs	r0, r1
 8006c12:	f000 ff8b 	bl	8007b2c <NibbleToHex>
 8006c16:	0003      	movs	r3, r0
 8006c18:	0019      	movs	r1, r3
 8006c1a:	22ec      	movs	r2, #236	; 0xec
 8006c1c:	1963      	adds	r3, r4, r5
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	1c0a      	adds	r2, r1, #0
 8006c22:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8006c24:	4b7c      	ldr	r3, [pc, #496]	; (8006e18 <send_DHCP_REQUEST+0x63c>)
 8006c26:	7919      	ldrb	r1, [r3, #4]
 8006c28:	4b79      	ldr	r3, [pc, #484]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006c2a:	681c      	ldr	r4, [r3, #0]
 8006c2c:	19bb      	adds	r3, r7, r6
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	19ba      	adds	r2, r7, r6
 8006c32:	1c58      	adds	r0, r3, #1
 8006c34:	8010      	strh	r0, [r2, #0]
 8006c36:	001d      	movs	r5, r3
 8006c38:	0008      	movs	r0, r1
 8006c3a:	f000 ff77 	bl	8007b2c <NibbleToHex>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	0019      	movs	r1, r3
 8006c42:	22ec      	movs	r2, #236	; 0xec
 8006c44:	1963      	adds	r3, r4, r5
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	1c0a      	adds	r2, r1, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8006c4c:	4b72      	ldr	r3, [pc, #456]	; (8006e18 <send_DHCP_REQUEST+0x63c>)
 8006c4e:	795b      	ldrb	r3, [r3, #5]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	b2d9      	uxtb	r1, r3
 8006c54:	4b6e      	ldr	r3, [pc, #440]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006c56:	681c      	ldr	r4, [r3, #0]
 8006c58:	19bb      	adds	r3, r7, r6
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	19ba      	adds	r2, r7, r6
 8006c5e:	1c58      	adds	r0, r3, #1
 8006c60:	8010      	strh	r0, [r2, #0]
 8006c62:	001d      	movs	r5, r3
 8006c64:	0008      	movs	r0, r1
 8006c66:	f000 ff61 	bl	8007b2c <NibbleToHex>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	0019      	movs	r1, r3
 8006c6e:	22ec      	movs	r2, #236	; 0xec
 8006c70:	1963      	adds	r3, r4, r5
 8006c72:	189b      	adds	r3, r3, r2
 8006c74:	1c0a      	adds	r2, r1, #0
 8006c76:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8006c78:	4b67      	ldr	r3, [pc, #412]	; (8006e18 <send_DHCP_REQUEST+0x63c>)
 8006c7a:	7959      	ldrb	r1, [r3, #5]
 8006c7c:	4b64      	ldr	r3, [pc, #400]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006c7e:	681c      	ldr	r4, [r3, #0]
 8006c80:	19bb      	adds	r3, r7, r6
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	19ba      	adds	r2, r7, r6
 8006c86:	1c58      	adds	r0, r3, #1
 8006c88:	8010      	strh	r0, [r2, #0]
 8006c8a:	001d      	movs	r5, r3
 8006c8c:	0008      	movs	r0, r1
 8006c8e:	f000 ff4d 	bl	8007b2c <NibbleToHex>
 8006c92:	0003      	movs	r3, r0
 8006c94:	0019      	movs	r1, r3
 8006c96:	22ec      	movs	r2, #236	; 0xec
 8006c98:	1963      	adds	r3, r4, r5
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	1c0a      	adds	r2, r1, #0
 8006c9e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	b2d9      	uxtb	r1, r3
 8006ca4:	4b5a      	ldr	r3, [pc, #360]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	19bb      	adds	r3, r7, r6
 8006caa:	8818      	ldrh	r0, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3307      	adds	r3, #7
 8006cb0:	1ac3      	subs	r3, r0, r3
 8006cb2:	3106      	adds	r1, #6
 8006cb4:	b2c8      	uxtb	r0, r1
 8006cb6:	21ec      	movs	r1, #236	; 0xec
 8006cb8:	18d3      	adds	r3, r2, r3
 8006cba:	185b      	adds	r3, r3, r1
 8006cbc:	1c02      	adds	r2, r0, #0
 8006cbe:	701a      	strb	r2, [r3, #0]
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8006cc0:	4b53      	ldr	r3, [pc, #332]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	19bb      	adds	r3, r7, r6
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	19b9      	adds	r1, r7, r6
 8006cca:	1c58      	adds	r0, r3, #1
 8006ccc:	8008      	strh	r0, [r1, #0]
 8006cce:	21ec      	movs	r1, #236	; 0xec
 8006cd0:	18d3      	adds	r3, r2, r3
 8006cd2:	185b      	adds	r3, r3, r1
 8006cd4:	2237      	movs	r2, #55	; 0x37
 8006cd6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x08;
 8006cd8:	4b4d      	ldr	r3, [pc, #308]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	0034      	movs	r4, r6
 8006cde:	193b      	adds	r3, r7, r4
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	1939      	adds	r1, r7, r4
 8006ce4:	1c58      	adds	r0, r3, #1
 8006ce6:	8008      	strh	r0, [r1, #0]
 8006ce8:	21ec      	movs	r1, #236	; 0xec
 8006cea:	18d3      	adds	r3, r2, r3
 8006cec:	185b      	adds	r3, r3, r1
 8006cee:	2208      	movs	r2, #8
 8006cf0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = subnetMask;
 8006cf2:	4b47      	ldr	r3, [pc, #284]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	193b      	adds	r3, r7, r4
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	1939      	adds	r1, r7, r4
 8006cfc:	1c58      	adds	r0, r3, #1
 8006cfe:	8008      	strh	r0, [r1, #0]
 8006d00:	21ec      	movs	r1, #236	; 0xec
 8006d02:	18d3      	adds	r3, r2, r3
 8006d04:	185b      	adds	r3, r3, r1
 8006d06:	2201      	movs	r2, #1
 8006d08:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8006d0a:	4b41      	ldr	r3, [pc, #260]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	193b      	adds	r3, r7, r4
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	1939      	adds	r1, r7, r4
 8006d14:	1c58      	adds	r0, r3, #1
 8006d16:	8008      	strh	r0, [r1, #0]
 8006d18:	21ec      	movs	r1, #236	; 0xec
 8006d1a:	18d3      	adds	r3, r2, r3
 8006d1c:	185b      	adds	r3, r3, r1
 8006d1e:	2203      	movs	r2, #3
 8006d20:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dns;
 8006d22:	4b3b      	ldr	r3, [pc, #236]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	193b      	adds	r3, r7, r4
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	1939      	adds	r1, r7, r4
 8006d2c:	1c58      	adds	r0, r3, #1
 8006d2e:	8008      	strh	r0, [r1, #0]
 8006d30:	21ec      	movs	r1, #236	; 0xec
 8006d32:	18d3      	adds	r3, r2, r3
 8006d34:	185b      	adds	r3, r3, r1
 8006d36:	2206      	movs	r2, #6
 8006d38:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = domainName;
 8006d3a:	4b35      	ldr	r3, [pc, #212]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	193b      	adds	r3, r7, r4
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	1939      	adds	r1, r7, r4
 8006d44:	1c58      	adds	r0, r3, #1
 8006d46:	8008      	strh	r0, [r1, #0]
 8006d48:	21ec      	movs	r1, #236	; 0xec
 8006d4a:	18d3      	adds	r3, r2, r3
 8006d4c:	185b      	adds	r3, r3, r1
 8006d4e:	220f      	movs	r2, #15
 8006d50:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8006d52:	4b2f      	ldr	r3, [pc, #188]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	193b      	adds	r3, r7, r4
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	1939      	adds	r1, r7, r4
 8006d5c:	1c58      	adds	r0, r3, #1
 8006d5e:	8008      	strh	r0, [r1, #0]
 8006d60:	21ec      	movs	r1, #236	; 0xec
 8006d62:	18d3      	adds	r3, r2, r3
 8006d64:	185b      	adds	r3, r3, r1
 8006d66:	223a      	movs	r2, #58	; 0x3a
 8006d68:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8006d6a:	4b29      	ldr	r3, [pc, #164]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	193b      	adds	r3, r7, r4
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	1939      	adds	r1, r7, r4
 8006d74:	1c58      	adds	r0, r3, #1
 8006d76:	8008      	strh	r0, [r1, #0]
 8006d78:	21ec      	movs	r1, #236	; 0xec
 8006d7a:	18d3      	adds	r3, r2, r3
 8006d7c:	185b      	adds	r3, r3, r1
 8006d7e:	223b      	movs	r2, #59	; 0x3b
 8006d80:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	193b      	adds	r3, r7, r4
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	1939      	adds	r1, r7, r4
 8006d8c:	1c58      	adds	r0, r3, #1
 8006d8e:	8008      	strh	r0, [r1, #0]
 8006d90:	21ec      	movs	r1, #236	; 0xec
 8006d92:	18d3      	adds	r3, r2, r3
 8006d94:	185b      	adds	r3, r3, r1
 8006d96:	221f      	movs	r2, #31
 8006d98:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = staticRoute;
 8006d9a:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	193b      	adds	r3, r7, r4
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	1939      	adds	r1, r7, r4
 8006da4:	1c58      	adds	r0, r3, #1
 8006da6:	8008      	strh	r0, [r1, #0]
 8006da8:	21ec      	movs	r1, #236	; 0xec
 8006daa:	18d3      	adds	r3, r2, r3
 8006dac:	185b      	adds	r3, r3, r1
 8006dae:	2221      	movs	r2, #33	; 0x21
 8006db0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = endOption;
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	193b      	adds	r3, r7, r4
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	1939      	adds	r1, r7, r4
 8006dbc:	1c58      	adds	r0, r3, #1
 8006dbe:	8008      	strh	r0, [r1, #0]
 8006dc0:	21ec      	movs	r1, #236	; 0xec
 8006dc2:	18d3      	adds	r3, r2, r3
 8006dc4:	185b      	adds	r3, r3, r1
 8006dc6:	22ff      	movs	r2, #255	; 0xff
 8006dc8:	701a      	strb	r2, [r3, #0]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8006dca:	193b      	adds	r3, r7, r4
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	e00a      	b.n	8006de8 <send_DHCP_REQUEST+0x60c>
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	21ec      	movs	r1, #236	; 0xec
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	18d3      	adds	r3, r2, r3
 8006ddc:	185b      	adds	r3, r3, r1
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	239c      	movs	r3, #156	; 0x9c
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	429a      	cmp	r2, r3
 8006df0:	dbef      	blt.n	8006dd2 <send_DHCP_REQUEST+0x5f6>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <send_DHCP_REQUEST+0x640>)
 8006df4:	7818      	ldrb	r0, [r3, #0]
 8006df6:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <send_DHCP_REQUEST+0x634>)
 8006df8:	6819      	ldr	r1, [r3, #0]
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	2289      	movs	r2, #137	; 0x89
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	2443      	movs	r4, #67	; 0x43
 8006e02:	9400      	str	r4, [sp, #0]
 8006e04:	f7fe fae6 	bl	80053d4 <sendto>

}
 8006e08:	46c0      	nop			; (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b005      	add	sp, #20
 8006e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e10:	200006ac 	.word	0x200006ac
 8006e14:	20000040 	.word	0x20000040
 8006e18:	200006b0 	.word	0x200006b0
 8006e1c:	20000681 	.word	0x20000681

08006e20 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8006e20:	b5b0      	push	{r4, r5, r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8006e26:	240a      	movs	r4, #10
 8006e28:	193b      	adds	r3, r7, r4
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	801a      	strh	r2, [r3, #0]
	
	makeDHCPMSG();
 8006e2e:	f7ff f989 	bl	8006144 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8006e32:	0021      	movs	r1, r4
 8006e34:	187b      	adds	r3, r7, r1
 8006e36:	2204      	movs	r2, #4
 8006e38:	801a      	strh	r2, [r3, #0]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8006e3a:	4bc8      	ldr	r3, [pc, #800]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330a      	adds	r3, #10
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8006e44:	4bc5      	ldr	r3, [pc, #788]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330a      	adds	r3, #10
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8006e50:	4bc2      	ldr	r3, [pc, #776]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	000d      	movs	r5, r1
 8006e56:	197b      	adds	r3, r7, r5
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	1979      	adds	r1, r7, r5
 8006e5c:	1c58      	adds	r0, r3, #1
 8006e5e:	8008      	strh	r0, [r1, #0]
 8006e60:	21ec      	movs	r1, #236	; 0xec
 8006e62:	18d3      	adds	r3, r2, r3
 8006e64:	185b      	adds	r3, r3, r1
 8006e66:	2235      	movs	r2, #53	; 0x35
 8006e68:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 8006e6a:	4bbc      	ldr	r3, [pc, #752]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	197b      	adds	r3, r7, r5
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	1979      	adds	r1, r7, r5
 8006e74:	1c58      	adds	r0, r3, #1
 8006e76:	8008      	strh	r0, [r1, #0]
 8006e78:	21ec      	movs	r1, #236	; 0xec
 8006e7a:	18d3      	adds	r3, r2, r3
 8006e7c:	185b      	adds	r3, r3, r1
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8006e82:	4bb6      	ldr	r3, [pc, #728]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	197b      	adds	r3, r7, r5
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	1979      	adds	r1, r7, r5
 8006e8c:	1c58      	adds	r0, r3, #1
 8006e8e:	8008      	strh	r0, [r1, #0]
 8006e90:	21ec      	movs	r1, #236	; 0xec
 8006e92:	18d3      	adds	r3, r2, r3
 8006e94:	185b      	adds	r3, r3, r1
 8006e96:	2204      	movs	r2, #4
 8006e98:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8006e9a:	4bb0      	ldr	r3, [pc, #704]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	197b      	adds	r3, r7, r5
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	1979      	adds	r1, r7, r5
 8006ea4:	1c58      	adds	r0, r3, #1
 8006ea6:	8008      	strh	r0, [r1, #0]
 8006ea8:	21ec      	movs	r1, #236	; 0xec
 8006eaa:	18d3      	adds	r3, r2, r3
 8006eac:	185b      	adds	r3, r3, r1
 8006eae:	223d      	movs	r2, #61	; 0x3d
 8006eb0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 8006eb2:	4baa      	ldr	r3, [pc, #680]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	197b      	adds	r3, r7, r5
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	1979      	adds	r1, r7, r5
 8006ebc:	1c58      	adds	r0, r3, #1
 8006ebe:	8008      	strh	r0, [r1, #0]
 8006ec0:	21ec      	movs	r1, #236	; 0xec
 8006ec2:	18d3      	adds	r3, r2, r3
 8006ec4:	185b      	adds	r3, r3, r1
 8006ec6:	2207      	movs	r2, #7
 8006ec8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 8006eca:	4ba4      	ldr	r3, [pc, #656]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	197b      	adds	r3, r7, r5
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	1979      	adds	r1, r7, r5
 8006ed4:	1c58      	adds	r0, r3, #1
 8006ed6:	8008      	strh	r0, [r1, #0]
 8006ed8:	21ec      	movs	r1, #236	; 0xec
 8006eda:	18d3      	adds	r3, r2, r3
 8006edc:	185b      	adds	r3, r3, r1
 8006ede:	2201      	movs	r2, #1
 8006ee0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8006ee2:	4b9e      	ldr	r3, [pc, #632]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	197b      	adds	r3, r7, r5
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	1979      	adds	r1, r7, r5
 8006eec:	1c58      	adds	r0, r3, #1
 8006eee:	8008      	strh	r0, [r1, #0]
 8006ef0:	001c      	movs	r4, r3
 8006ef2:	4b9b      	ldr	r3, [pc, #620]	; (8007160 <send_DHCP_DECLINE+0x340>)
 8006ef4:	7818      	ldrb	r0, [r3, #0]
 8006ef6:	21ec      	movs	r1, #236	; 0xec
 8006ef8:	1913      	adds	r3, r2, r4
 8006efa:	185b      	adds	r3, r3, r1
 8006efc:	1c02      	adds	r2, r0, #0
 8006efe:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8006f00:	4b96      	ldr	r3, [pc, #600]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	197b      	adds	r3, r7, r5
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	1979      	adds	r1, r7, r5
 8006f0a:	1c58      	adds	r0, r3, #1
 8006f0c:	8008      	strh	r0, [r1, #0]
 8006f0e:	001c      	movs	r4, r3
 8006f10:	4b93      	ldr	r3, [pc, #588]	; (8007160 <send_DHCP_DECLINE+0x340>)
 8006f12:	7858      	ldrb	r0, [r3, #1]
 8006f14:	21ec      	movs	r1, #236	; 0xec
 8006f16:	1913      	adds	r3, r2, r4
 8006f18:	185b      	adds	r3, r3, r1
 8006f1a:	1c02      	adds	r2, r0, #0
 8006f1c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8006f1e:	4b8f      	ldr	r3, [pc, #572]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	197b      	adds	r3, r7, r5
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	1979      	adds	r1, r7, r5
 8006f28:	1c58      	adds	r0, r3, #1
 8006f2a:	8008      	strh	r0, [r1, #0]
 8006f2c:	001c      	movs	r4, r3
 8006f2e:	4b8c      	ldr	r3, [pc, #560]	; (8007160 <send_DHCP_DECLINE+0x340>)
 8006f30:	7898      	ldrb	r0, [r3, #2]
 8006f32:	21ec      	movs	r1, #236	; 0xec
 8006f34:	1913      	adds	r3, r2, r4
 8006f36:	185b      	adds	r3, r3, r1
 8006f38:	1c02      	adds	r2, r0, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8006f3c:	4b87      	ldr	r3, [pc, #540]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	197b      	adds	r3, r7, r5
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	1979      	adds	r1, r7, r5
 8006f46:	1c58      	adds	r0, r3, #1
 8006f48:	8008      	strh	r0, [r1, #0]
 8006f4a:	001c      	movs	r4, r3
 8006f4c:	4b84      	ldr	r3, [pc, #528]	; (8007160 <send_DHCP_DECLINE+0x340>)
 8006f4e:	78d8      	ldrb	r0, [r3, #3]
 8006f50:	21ec      	movs	r1, #236	; 0xec
 8006f52:	1913      	adds	r3, r2, r4
 8006f54:	185b      	adds	r3, r3, r1
 8006f56:	1c02      	adds	r2, r0, #0
 8006f58:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8006f5a:	4b80      	ldr	r3, [pc, #512]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	197b      	adds	r3, r7, r5
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	1979      	adds	r1, r7, r5
 8006f64:	1c58      	adds	r0, r3, #1
 8006f66:	8008      	strh	r0, [r1, #0]
 8006f68:	001c      	movs	r4, r3
 8006f6a:	4b7d      	ldr	r3, [pc, #500]	; (8007160 <send_DHCP_DECLINE+0x340>)
 8006f6c:	7918      	ldrb	r0, [r3, #4]
 8006f6e:	21ec      	movs	r1, #236	; 0xec
 8006f70:	1913      	adds	r3, r2, r4
 8006f72:	185b      	adds	r3, r3, r1
 8006f74:	1c02      	adds	r2, r0, #0
 8006f76:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8006f78:	4b78      	ldr	r3, [pc, #480]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	197b      	adds	r3, r7, r5
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	1979      	adds	r1, r7, r5
 8006f82:	1c58      	adds	r0, r3, #1
 8006f84:	8008      	strh	r0, [r1, #0]
 8006f86:	001c      	movs	r4, r3
 8006f88:	4b75      	ldr	r3, [pc, #468]	; (8007160 <send_DHCP_DECLINE+0x340>)
 8006f8a:	7958      	ldrb	r0, [r3, #5]
 8006f8c:	21ec      	movs	r1, #236	; 0xec
 8006f8e:	1913      	adds	r3, r2, r4
 8006f90:	185b      	adds	r3, r3, r1
 8006f92:	1c02      	adds	r2, r0, #0
 8006f94:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8006f96:	4b71      	ldr	r3, [pc, #452]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	197b      	adds	r3, r7, r5
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	1979      	adds	r1, r7, r5
 8006fa0:	1c58      	adds	r0, r3, #1
 8006fa2:	8008      	strh	r0, [r1, #0]
 8006fa4:	21ec      	movs	r1, #236	; 0xec
 8006fa6:	18d3      	adds	r3, r2, r3
 8006fa8:	185b      	adds	r3, r3, r1
 8006faa:	2232      	movs	r2, #50	; 0x32
 8006fac:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x04;
 8006fae:	4b6b      	ldr	r3, [pc, #428]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	197b      	adds	r3, r7, r5
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	1979      	adds	r1, r7, r5
 8006fb8:	1c58      	adds	r0, r3, #1
 8006fba:	8008      	strh	r0, [r1, #0]
 8006fbc:	21ec      	movs	r1, #236	; 0xec
 8006fbe:	18d3      	adds	r3, r2, r3
 8006fc0:	185b      	adds	r3, r3, r1
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8006fc6:	4b65      	ldr	r3, [pc, #404]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	197b      	adds	r3, r7, r5
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	1979      	adds	r1, r7, r5
 8006fd0:	1c58      	adds	r0, r3, #1
 8006fd2:	8008      	strh	r0, [r1, #0]
 8006fd4:	001c      	movs	r4, r3
 8006fd6:	4b63      	ldr	r3, [pc, #396]	; (8007164 <send_DHCP_DECLINE+0x344>)
 8006fd8:	7818      	ldrb	r0, [r3, #0]
 8006fda:	21ec      	movs	r1, #236	; 0xec
 8006fdc:	1913      	adds	r3, r2, r4
 8006fde:	185b      	adds	r3, r3, r1
 8006fe0:	1c02      	adds	r2, r0, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8006fe4:	4b5d      	ldr	r3, [pc, #372]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	197b      	adds	r3, r7, r5
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	1979      	adds	r1, r7, r5
 8006fee:	1c58      	adds	r0, r3, #1
 8006ff0:	8008      	strh	r0, [r1, #0]
 8006ff2:	001c      	movs	r4, r3
 8006ff4:	4b5b      	ldr	r3, [pc, #364]	; (8007164 <send_DHCP_DECLINE+0x344>)
 8006ff6:	7858      	ldrb	r0, [r3, #1]
 8006ff8:	21ec      	movs	r1, #236	; 0xec
 8006ffa:	1913      	adds	r3, r2, r4
 8006ffc:	185b      	adds	r3, r3, r1
 8006ffe:	1c02      	adds	r2, r0, #0
 8007000:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8007002:	4b56      	ldr	r3, [pc, #344]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	197b      	adds	r3, r7, r5
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	1979      	adds	r1, r7, r5
 800700c:	1c58      	adds	r0, r3, #1
 800700e:	8008      	strh	r0, [r1, #0]
 8007010:	001c      	movs	r4, r3
 8007012:	4b54      	ldr	r3, [pc, #336]	; (8007164 <send_DHCP_DECLINE+0x344>)
 8007014:	7898      	ldrb	r0, [r3, #2]
 8007016:	21ec      	movs	r1, #236	; 0xec
 8007018:	1913      	adds	r3, r2, r4
 800701a:	185b      	adds	r3, r3, r1
 800701c:	1c02      	adds	r2, r0, #0
 800701e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8007020:	4b4e      	ldr	r3, [pc, #312]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	197b      	adds	r3, r7, r5
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	1979      	adds	r1, r7, r5
 800702a:	1c58      	adds	r0, r3, #1
 800702c:	8008      	strh	r0, [r1, #0]
 800702e:	001c      	movs	r4, r3
 8007030:	4b4c      	ldr	r3, [pc, #304]	; (8007164 <send_DHCP_DECLINE+0x344>)
 8007032:	78d8      	ldrb	r0, [r3, #3]
 8007034:	21ec      	movs	r1, #236	; 0xec
 8007036:	1913      	adds	r3, r2, r4
 8007038:	185b      	adds	r3, r3, r1
 800703a:	1c02      	adds	r2, r0, #0
 800703c:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800703e:	4b47      	ldr	r3, [pc, #284]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	197b      	adds	r3, r7, r5
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	1979      	adds	r1, r7, r5
 8007048:	1c58      	adds	r0, r3, #1
 800704a:	8008      	strh	r0, [r1, #0]
 800704c:	21ec      	movs	r1, #236	; 0xec
 800704e:	18d3      	adds	r3, r2, r3
 8007050:	185b      	adds	r3, r3, r1
 8007052:	2236      	movs	r2, #54	; 0x36
 8007054:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x04;
 8007056:	4b41      	ldr	r3, [pc, #260]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	197b      	adds	r3, r7, r5
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	1979      	adds	r1, r7, r5
 8007060:	1c58      	adds	r0, r3, #1
 8007062:	8008      	strh	r0, [r1, #0]
 8007064:	21ec      	movs	r1, #236	; 0xec
 8007066:	18d3      	adds	r3, r2, r3
 8007068:	185b      	adds	r3, r3, r1
 800706a:	2204      	movs	r2, #4
 800706c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800706e:	4b3b      	ldr	r3, [pc, #236]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	197b      	adds	r3, r7, r5
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	1979      	adds	r1, r7, r5
 8007078:	1c58      	adds	r0, r3, #1
 800707a:	8008      	strh	r0, [r1, #0]
 800707c:	001c      	movs	r4, r3
 800707e:	4b3a      	ldr	r3, [pc, #232]	; (8007168 <send_DHCP_DECLINE+0x348>)
 8007080:	7818      	ldrb	r0, [r3, #0]
 8007082:	21ec      	movs	r1, #236	; 0xec
 8007084:	1913      	adds	r3, r2, r4
 8007086:	185b      	adds	r3, r3, r1
 8007088:	1c02      	adds	r2, r0, #0
 800708a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800708c:	4b33      	ldr	r3, [pc, #204]	; (800715c <send_DHCP_DECLINE+0x33c>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	197b      	adds	r3, r7, r5
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	1979      	adds	r1, r7, r5
 8007096:	1c58      	adds	r0, r3, #1
 8007098:	8008      	strh	r0, [r1, #0]
 800709a:	001c      	movs	r4, r3
 800709c:	4b32      	ldr	r3, [pc, #200]	; (8007168 <send_DHCP_DECLINE+0x348>)
 800709e:	7858      	ldrb	r0, [r3, #1]
 80070a0:	21ec      	movs	r1, #236	; 0xec
 80070a2:	1913      	adds	r3, r2, r4
 80070a4:	185b      	adds	r3, r3, r1
 80070a6:	1c02      	adds	r2, r0, #0
 80070a8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80070aa:	4b2c      	ldr	r3, [pc, #176]	; (800715c <send_DHCP_DECLINE+0x33c>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	197b      	adds	r3, r7, r5
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	1979      	adds	r1, r7, r5
 80070b4:	1c58      	adds	r0, r3, #1
 80070b6:	8008      	strh	r0, [r1, #0]
 80070b8:	001c      	movs	r4, r3
 80070ba:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <send_DHCP_DECLINE+0x348>)
 80070bc:	7898      	ldrb	r0, [r3, #2]
 80070be:	21ec      	movs	r1, #236	; 0xec
 80070c0:	1913      	adds	r3, r2, r4
 80070c2:	185b      	adds	r3, r3, r1
 80070c4:	1c02      	adds	r2, r0, #0
 80070c6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80070c8:	4b24      	ldr	r3, [pc, #144]	; (800715c <send_DHCP_DECLINE+0x33c>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	197b      	adds	r3, r7, r5
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	1979      	adds	r1, r7, r5
 80070d2:	1c58      	adds	r0, r3, #1
 80070d4:	8008      	strh	r0, [r1, #0]
 80070d6:	001c      	movs	r4, r3
 80070d8:	4b23      	ldr	r3, [pc, #140]	; (8007168 <send_DHCP_DECLINE+0x348>)
 80070da:	78d8      	ldrb	r0, [r3, #3]
 80070dc:	21ec      	movs	r1, #236	; 0xec
 80070de:	1913      	adds	r3, r2, r4
 80070e0:	185b      	adds	r3, r3, r1
 80070e2:	1c02      	adds	r2, r0, #0
 80070e4:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = endOption;
 80070e6:	4b1d      	ldr	r3, [pc, #116]	; (800715c <send_DHCP_DECLINE+0x33c>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	197b      	adds	r3, r7, r5
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	1979      	adds	r1, r7, r5
 80070f0:	1c58      	adds	r0, r3, #1
 80070f2:	8008      	strh	r0, [r1, #0]
 80070f4:	21ec      	movs	r1, #236	; 0xec
 80070f6:	18d3      	adds	r3, r2, r3
 80070f8:	185b      	adds	r3, r3, r1
 80070fa:	22ff      	movs	r2, #255	; 0xff
 80070fc:	701a      	strb	r2, [r3, #0]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80070fe:	197b      	adds	r3, r7, r5
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e00a      	b.n	800711c <send_DHCP_DECLINE+0x2fc>
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	21ec      	movs	r1, #236	; 0xec
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	18d3      	adds	r3, r2, r3
 8007110:	185b      	adds	r3, r3, r1
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	239c      	movs	r3, #156	; 0x9c
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	429a      	cmp	r2, r3
 8007124:	dbef      	blt.n	8007106 <send_DHCP_DECLINE+0x2e6>

	//send broadcasting packet
	ip[0] = 0xFF;
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	22ff      	movs	r2, #255	; 0xff
 800712a:	701a      	strb	r2, [r3, #0]
	ip[1] = 0xFF;
 800712c:	1d3b      	adds	r3, r7, #4
 800712e:	22ff      	movs	r2, #255	; 0xff
 8007130:	705a      	strb	r2, [r3, #1]
	ip[2] = 0xFF;
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	709a      	strb	r2, [r3, #2]
	ip[3] = 0xFF;
 8007138:	1d3b      	adds	r3, r7, #4
 800713a:	22ff      	movs	r2, #255	; 0xff
 800713c:	70da      	strb	r2, [r3, #3]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <send_DHCP_DECLINE+0x34c>)
 8007140:	7818      	ldrb	r0, [r3, #0]
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <send_DHCP_DECLINE+0x33c>)
 8007144:	6819      	ldr	r1, [r3, #0]
 8007146:	1d3b      	adds	r3, r7, #4
 8007148:	2289      	movs	r2, #137	; 0x89
 800714a:	0092      	lsls	r2, r2, #2
 800714c:	2443      	movs	r4, #67	; 0x43
 800714e:	9400      	str	r4, [sp, #0]
 8007150:	f7fe f940 	bl	80053d4 <sendto>
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	46bd      	mov	sp, r7
 8007158:	b004      	add	sp, #16
 800715a:	bdb0      	pop	{r4, r5, r7, pc}
 800715c:	200006ac 	.word	0x200006ac
 8007160:	200006b0 	.word	0x200006b0
 8007164:	20000690 	.word	0x20000690
 8007168:	20000684 	.word	0x20000684
 800716c:	20000681 	.word	0x20000681

08007170 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8007170:	b5b0      	push	{r4, r5, r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8007176:	2313      	movs	r3, #19
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800717e:	4bcf      	ldr	r3, [pc, #828]	; (80074bc <parseDHCPMSG+0x34c>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2510      	movs	r5, #16
 8007184:	197c      	adds	r4, r7, r5
 8007186:	0018      	movs	r0, r3
 8007188:	f7fd fdb6 	bl	8004cf8 <getSn_RX_RSR>
 800718c:	0003      	movs	r3, r0
 800718e:	8023      	strh	r3, [r4, #0]
 8007190:	002a      	movs	r2, r5
 8007192:	18bb      	adds	r3, r7, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d015      	beq.n	80071c6 <parseDHCPMSG+0x56>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800719a:	4bc8      	ldr	r3, [pc, #800]	; (80074bc <parseDHCPMSG+0x34c>)
 800719c:	7818      	ldrb	r0, [r3, #0]
 800719e:	4bc8      	ldr	r3, [pc, #800]	; (80074c0 <parseDHCPMSG+0x350>)
 80071a0:	6819      	ldr	r1, [r3, #0]
 80071a2:	1d3c      	adds	r4, r7, #4
 80071a4:	0015      	movs	r5, r2
 80071a6:	18bb      	adds	r3, r7, r2
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	1cbb      	adds	r3, r7, #2
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	0023      	movs	r3, r4
 80071b0:	f7fe faa4 	bl	80056fc <recvfrom>
 80071b4:	0002      	movs	r2, r0
 80071b6:	197b      	adds	r3, r7, r5
 80071b8:	801a      	strh	r2, [r3, #0]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80071ba:	1cbb      	adds	r3, r7, #2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	2b43      	cmp	r3, #67	; 0x43
 80071c0:	d000      	beq.n	80071c4 <parseDHCPMSG+0x54>
 80071c2:	e1a4      	b.n	800750e <parseDHCPMSG+0x39e>
 80071c4:	e001      	b.n	80071ca <parseDHCPMSG+0x5a>
   else return 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e1a5      	b.n	8007516 <parseDHCPMSG+0x3a6>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80071ca:	4bbd      	ldr	r3, [pc, #756]	; (80074c0 <parseDHCPMSG+0x350>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	7f1a      	ldrb	r2, [r3, #28]
 80071d0:	4bbc      	ldr	r3, [pc, #752]	; (80074c4 <parseDHCPMSG+0x354>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d124      	bne.n	8007222 <parseDHCPMSG+0xb2>
 80071d8:	4bb9      	ldr	r3, [pc, #740]	; (80074c0 <parseDHCPMSG+0x350>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	7f5a      	ldrb	r2, [r3, #29]
 80071de:	4bb9      	ldr	r3, [pc, #740]	; (80074c4 <parseDHCPMSG+0x354>)
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d11d      	bne.n	8007222 <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80071e6:	4bb6      	ldr	r3, [pc, #728]	; (80074c0 <parseDHCPMSG+0x350>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	7f9a      	ldrb	r2, [r3, #30]
 80071ec:	4bb5      	ldr	r3, [pc, #724]	; (80074c4 <parseDHCPMSG+0x354>)
 80071ee:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d116      	bne.n	8007222 <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80071f4:	4bb2      	ldr	r3, [pc, #712]	; (80074c0 <parseDHCPMSG+0x350>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	7fda      	ldrb	r2, [r3, #31]
 80071fa:	4bb2      	ldr	r3, [pc, #712]	; (80074c4 <parseDHCPMSG+0x354>)
 80071fc:	78db      	ldrb	r3, [r3, #3]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d10f      	bne.n	8007222 <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8007202:	4baf      	ldr	r3, [pc, #700]	; (80074c0 <parseDHCPMSG+0x350>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2220      	movs	r2, #32
 8007208:	5c9a      	ldrb	r2, [r3, r2]
 800720a:	4bae      	ldr	r3, [pc, #696]	; (80074c4 <parseDHCPMSG+0x354>)
 800720c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800720e:	429a      	cmp	r2, r3
 8007210:	d107      	bne.n	8007222 <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8007212:	4bab      	ldr	r3, [pc, #684]	; (80074c0 <parseDHCPMSG+0x350>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2221      	movs	r2, #33	; 0x21
 8007218:	5c9a      	ldrb	r2, [r3, r2]
 800721a:	4baa      	ldr	r3, [pc, #680]	; (80074c4 <parseDHCPMSG+0x354>)
 800721c:	795b      	ldrb	r3, [r3, #5]
 800721e:	429a      	cmp	r2, r3
 8007220:	d001      	beq.n	8007226 <parseDHCPMSG+0xb6>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8007222:	2300      	movs	r3, #0
 8007224:	e177      	b.n	8007516 <parseDHCPMSG+0x3a6>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8007226:	4ba8      	ldr	r3, [pc, #672]	; (80074c8 <parseDHCPMSG+0x358>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <parseDHCPMSG+0xd6>
 800722e:	4ba6      	ldr	r3, [pc, #664]	; (80074c8 <parseDHCPMSG+0x358>)
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d107      	bne.n	8007246 <parseDHCPMSG+0xd6>
 8007236:	4ba4      	ldr	r3, [pc, #656]	; (80074c8 <parseDHCPMSG+0x358>)
 8007238:	789b      	ldrb	r3, [r3, #2]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d103      	bne.n	8007246 <parseDHCPMSG+0xd6>
 800723e:	4ba2      	ldr	r3, [pc, #648]	; (80074c8 <parseDHCPMSG+0x358>)
 8007240:	78db      	ldrb	r3, [r3, #3]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d031      	beq.n	80072aa <parseDHCPMSG+0x13a>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8007246:	1d3b      	adds	r3, r7, #4
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	4b9f      	ldr	r3, [pc, #636]	; (80074c8 <parseDHCPMSG+0x358>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d111      	bne.n	8007276 <parseDHCPMSG+0x106>
 8007252:	1d3b      	adds	r3, r7, #4
 8007254:	785a      	ldrb	r2, [r3, #1]
 8007256:	4b9c      	ldr	r3, [pc, #624]	; (80074c8 <parseDHCPMSG+0x358>)
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	429a      	cmp	r2, r3
 800725c:	d10b      	bne.n	8007276 <parseDHCPMSG+0x106>
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	789a      	ldrb	r2, [r3, #2]
 8007262:	4b99      	ldr	r3, [pc, #612]	; (80074c8 <parseDHCPMSG+0x358>)
 8007264:	789b      	ldrb	r3, [r3, #2]
 8007266:	429a      	cmp	r2, r3
 8007268:	d105      	bne.n	8007276 <parseDHCPMSG+0x106>
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	78da      	ldrb	r2, [r3, #3]
 800726e:	4b96      	ldr	r3, [pc, #600]	; (80074c8 <parseDHCPMSG+0x358>)
 8007270:	78db      	ldrb	r3, [r3, #3]
 8007272:	429a      	cmp	r2, r3
 8007274:	d019      	beq.n	80072aa <parseDHCPMSG+0x13a>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8007276:	1d3b      	adds	r3, r7, #4
 8007278:	781a      	ldrb	r2, [r3, #0]
 800727a:	4b94      	ldr	r3, [pc, #592]	; (80074cc <parseDHCPMSG+0x35c>)
 800727c:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800727e:	429a      	cmp	r2, r3
 8007280:	d111      	bne.n	80072a6 <parseDHCPMSG+0x136>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	785a      	ldrb	r2, [r3, #1]
 8007286:	4b91      	ldr	r3, [pc, #580]	; (80074cc <parseDHCPMSG+0x35c>)
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	429a      	cmp	r2, r3
 800728c:	d10b      	bne.n	80072a6 <parseDHCPMSG+0x136>
 800728e:	1d3b      	adds	r3, r7, #4
 8007290:	789a      	ldrb	r2, [r3, #2]
 8007292:	4b8e      	ldr	r3, [pc, #568]	; (80074cc <parseDHCPMSG+0x35c>)
 8007294:	789b      	ldrb	r3, [r3, #2]
 8007296:	429a      	cmp	r2, r3
 8007298:	d105      	bne.n	80072a6 <parseDHCPMSG+0x136>
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	78da      	ldrb	r2, [r3, #3]
 800729e:	4b8b      	ldr	r3, [pc, #556]	; (80074cc <parseDHCPMSG+0x35c>)
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d001      	beq.n	80072aa <parseDHCPMSG+0x13a>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e135      	b.n	8007516 <parseDHCPMSG+0x3a6>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80072aa:	4b85      	ldr	r3, [pc, #532]	; (80074c0 <parseDHCPMSG+0x350>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	33f0      	adds	r3, #240	; 0xf0
 80072b4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80072b6:	2310      	movs	r3, #16
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	3bf0      	subs	r3, #240	; 0xf0
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	18d3      	adds	r3, r2, r3
 80072c2:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80072c4:	e11e      	b.n	8007504 <parseDHCPMSG+0x394>

			switch ( *p ) {
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b36      	cmp	r3, #54	; 0x36
 80072cc:	dc0a      	bgt.n	80072e4 <parseDHCPMSG+0x174>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da00      	bge.n	80072d4 <parseDHCPMSG+0x164>
 80072d2:	e107      	b.n	80074e4 <parseDHCPMSG+0x374>
 80072d4:	2b36      	cmp	r3, #54	; 0x36
 80072d6:	d900      	bls.n	80072da <parseDHCPMSG+0x16a>
 80072d8:	e104      	b.n	80074e4 <parseDHCPMSG+0x374>
 80072da:	009a      	lsls	r2, r3, #2
 80072dc:	4b7c      	ldr	r3, [pc, #496]	; (80074d0 <parseDHCPMSG+0x360>)
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	469f      	mov	pc, r3
 80072e4:	2bff      	cmp	r3, #255	; 0xff
 80072e6:	d000      	beq.n	80072ea <parseDHCPMSG+0x17a>
 80072e8:	e0fc      	b.n	80074e4 <parseDHCPMSG+0x374>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	617b      	str	r3, [r7, #20]
   				break;
 80072ee:	e109      	b.n	8007504 <parseDHCPMSG+0x394>
            case padOption :
   				p++;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3301      	adds	r3, #1
 80072f4:	617b      	str	r3, [r7, #20]
   				break;
 80072f6:	e105      	b.n	8007504 <parseDHCPMSG+0x394>
   			case dhcpMessageType :
   				p++;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3301      	adds	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
   				p++;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3301      	adds	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	617a      	str	r2, [r7, #20]
 800730a:	2213      	movs	r2, #19
 800730c:	18ba      	adds	r2, r7, r2
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	7013      	strb	r3, [r2, #0]
   				break;
 8007312:	e0f7      	b.n	8007504 <parseDHCPMSG+0x394>
   			case subnetMask :
   				p++;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	3301      	adds	r3, #1
 8007318:	617b      	str	r3, [r7, #20]
   				p++;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	3301      	adds	r3, #1
 800731e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	617a      	str	r2, [r7, #20]
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	4b6a      	ldr	r3, [pc, #424]	; (80074d4 <parseDHCPMSG+0x364>)
 800732a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	617a      	str	r2, [r7, #20]
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	4b67      	ldr	r3, [pc, #412]	; (80074d4 <parseDHCPMSG+0x364>)
 8007336:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	617a      	str	r2, [r7, #20]
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	4b64      	ldr	r3, [pc, #400]	; (80074d4 <parseDHCPMSG+0x364>)
 8007342:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	617a      	str	r2, [r7, #20]
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	4b61      	ldr	r3, [pc, #388]	; (80074d4 <parseDHCPMSG+0x364>)
 800734e:	70da      	strb	r2, [r3, #3]
   				break;
 8007350:	e0d8      	b.n	8007504 <parseDHCPMSG+0x394>
   			case routersOnSubnet :
   				p++;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	3301      	adds	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	617a      	str	r2, [r7, #20]
 800735e:	210b      	movs	r1, #11
 8007360:	187a      	adds	r2, r7, r1
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	7013      	strb	r3, [r2, #0]
   				DHCP_allocated_gw[0] = *p++;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	617a      	str	r2, [r7, #20]
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	4b5a      	ldr	r3, [pc, #360]	; (80074d8 <parseDHCPMSG+0x368>)
 8007370:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	617a      	str	r2, [r7, #20]
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	4b57      	ldr	r3, [pc, #348]	; (80074d8 <parseDHCPMSG+0x368>)
 800737c:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	617a      	str	r2, [r7, #20]
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	4b54      	ldr	r3, [pc, #336]	; (80074d8 <parseDHCPMSG+0x368>)
 8007388:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	617a      	str	r2, [r7, #20]
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	4b51      	ldr	r3, [pc, #324]	; (80074d8 <parseDHCPMSG+0x368>)
 8007394:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8007396:	187b      	adds	r3, r7, r1
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	3b04      	subs	r3, #4
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	18d3      	adds	r3, r2, r3
 80073a0:	617b      	str	r3, [r7, #20]
   				break;
 80073a2:	e0af      	b.n	8007504 <parseDHCPMSG+0x394>
   			case dns :
   				p++;                  
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	3301      	adds	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	617a      	str	r2, [r7, #20]
 80073b0:	210b      	movs	r1, #11
 80073b2:	187a      	adds	r2, r7, r1
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	7013      	strb	r3, [r2, #0]
   				DHCP_allocated_dns[0] = *p++;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	617a      	str	r2, [r7, #20]
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	4b46      	ldr	r3, [pc, #280]	; (80074dc <parseDHCPMSG+0x36c>)
 80073c2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	617a      	str	r2, [r7, #20]
 80073ca:	781a      	ldrb	r2, [r3, #0]
 80073cc:	4b43      	ldr	r3, [pc, #268]	; (80074dc <parseDHCPMSG+0x36c>)
 80073ce:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	617a      	str	r2, [r7, #20]
 80073d6:	781a      	ldrb	r2, [r3, #0]
 80073d8:	4b40      	ldr	r3, [pc, #256]	; (80074dc <parseDHCPMSG+0x36c>)
 80073da:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	617a      	str	r2, [r7, #20]
 80073e2:	781a      	ldrb	r2, [r3, #0]
 80073e4:	4b3d      	ldr	r3, [pc, #244]	; (80074dc <parseDHCPMSG+0x36c>)
 80073e6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80073e8:	187b      	adds	r3, r7, r1
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	3b04      	subs	r3, #4
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	18d3      	adds	r3, r2, r3
 80073f2:	617b      	str	r3, [r7, #20]
   				break;
 80073f4:	e086      	b.n	8007504 <parseDHCPMSG+0x394>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	3301      	adds	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	617a      	str	r2, [r7, #20]
 8007402:	220b      	movs	r2, #11
 8007404:	18ba      	adds	r2, r7, r2
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	7013      	strb	r3, [r2, #0]
   				dhcp_lease_time  = *p++;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	617a      	str	r2, [r7, #20]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	001a      	movs	r2, r3
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <parseDHCPMSG+0x370>)
 8007416:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8007418:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <parseDHCPMSG+0x370>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	021a      	lsls	r2, r3, #8
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	1c59      	adds	r1, r3, #1
 8007422:	6179      	str	r1, [r7, #20]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	18d2      	adds	r2, r2, r3
 8007428:	4b2d      	ldr	r3, [pc, #180]	; (80074e0 <parseDHCPMSG+0x370>)
 800742a:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800742c:	4b2c      	ldr	r3, [pc, #176]	; (80074e0 <parseDHCPMSG+0x370>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	021a      	lsls	r2, r3, #8
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	1c59      	adds	r1, r3, #1
 8007436:	6179      	str	r1, [r7, #20]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	18d2      	adds	r2, r2, r3
 800743c:	4b28      	ldr	r3, [pc, #160]	; (80074e0 <parseDHCPMSG+0x370>)
 800743e:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8007440:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <parseDHCPMSG+0x370>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	021a      	lsls	r2, r3, #8
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	1c59      	adds	r1, r3, #1
 800744a:	6179      	str	r1, [r7, #20]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	18d2      	adds	r2, r2, r3
 8007450:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <parseDHCPMSG+0x370>)
 8007452:	601a      	str	r2, [r3, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8007454:	e056      	b.n	8007504 <parseDHCPMSG+0x394>
   			case dhcpServerIdentifier :
   				p++;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	3301      	adds	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	617a      	str	r2, [r7, #20]
 8007462:	220b      	movs	r2, #11
 8007464:	18ba      	adds	r2, r7, r2
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	7013      	strb	r3, [r2, #0]
   				DHCP_SIP[0] = *p++;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	617a      	str	r2, [r7, #20]
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <parseDHCPMSG+0x358>)
 8007474:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	617a      	str	r2, [r7, #20]
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <parseDHCPMSG+0x358>)
 8007480:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	617a      	str	r2, [r7, #20]
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <parseDHCPMSG+0x358>)
 800748c:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	617a      	str	r2, [r7, #20]
 8007494:	781a      	ldrb	r2, [r3, #0]
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <parseDHCPMSG+0x358>)
 8007498:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	781a      	ldrb	r2, [r3, #0]
 800749e:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <parseDHCPMSG+0x35c>)
 80074a0:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	785a      	ldrb	r2, [r3, #1]
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <parseDHCPMSG+0x35c>)
 80074a8:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80074aa:	1d3b      	adds	r3, r7, #4
 80074ac:	789a      	ldrb	r2, [r3, #2]
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <parseDHCPMSG+0x35c>)
 80074b0:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80074b2:	1d3b      	adds	r3, r7, #4
 80074b4:	78da      	ldrb	r2, [r3, #3]
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <parseDHCPMSG+0x35c>)
 80074b8:	70da      	strb	r2, [r3, #3]
   				break;
 80074ba:	e023      	b.n	8007504 <parseDHCPMSG+0x394>
 80074bc:	20000681 	.word	0x20000681
 80074c0:	200006ac 	.word	0x200006ac
 80074c4:	200006b0 	.word	0x200006b0
 80074c8:	20000684 	.word	0x20000684
 80074cc:	20000688 	.word	0x20000688
 80074d0:	08008ea8 	.word	0x08008ea8
 80074d4:	20000698 	.word	0x20000698
 80074d8:	20000694 	.word	0x20000694
 80074dc:	2000069c 	.word	0x2000069c
 80074e0:	20000038 	.word	0x20000038
   			default :
   				p++;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	3301      	adds	r3, #1
 80074e8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	617a      	str	r2, [r7, #20]
 80074f0:	210b      	movs	r1, #11
 80074f2:	187a      	adds	r2, r7, r1
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	7013      	strb	r3, [r2, #0]
   				p += opt_len;
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	18d3      	adds	r3, r2, r3
 8007500:	617b      	str	r3, [r7, #20]
   				break;
 8007502:	46c0      	nop			; (mov r8, r8)
		while ( p < e ) {
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	429a      	cmp	r2, r3
 800750a:	d200      	bcs.n	800750e <parseDHCPMSG+0x39e>
 800750c:	e6db      	b.n	80072c6 <parseDHCPMSG+0x156>
			} // switch
		} // while
	} // if
	return	type;
 800750e:	2313      	movs	r3, #19
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b25b      	sxtb	r3, r3
}
 8007516:	0018      	movs	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	b006      	add	sp, #24
 800751c:	bdb0      	pop	{r4, r5, r7, pc}
 800751e:	46c0      	nop			; (mov r8, r8)

08007520 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8007520:	b590      	push	{r4, r7, lr}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8007526:	4b83      	ldr	r3, [pc, #524]	; (8007734 <DHCP_run+0x214>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b25b      	sxtb	r3, r3
 800752c:	2b06      	cmp	r3, #6
 800752e:	d101      	bne.n	8007534 <DHCP_run+0x14>
 8007530:	2305      	movs	r3, #5
 8007532:	e0fa      	b.n	800772a <DHCP_run+0x20a>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8007534:	4b80      	ldr	r3, [pc, #512]	; (8007738 <DHCP_run+0x218>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	3301      	adds	r3, #1
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	22c0      	movs	r2, #192	; 0xc0
 8007540:	0092      	lsls	r2, r2, #2
 8007542:	4694      	mov	ip, r2
 8007544:	4463      	add	r3, ip
 8007546:	0018      	movs	r0, r3
 8007548:	f7fd f9e6 	bl	8004918 <WIZCHIP_READ>
 800754c:	0003      	movs	r3, r0
 800754e:	2b22      	cmp	r3, #34	; 0x22
 8007550:	d006      	beq.n	8007560 <DHCP_run+0x40>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8007552:	4b79      	ldr	r3, [pc, #484]	; (8007738 <DHCP_run+0x218>)
 8007554:	7818      	ldrb	r0, [r3, #0]
 8007556:	2300      	movs	r3, #0
 8007558:	2244      	movs	r2, #68	; 0x44
 800755a:	2102      	movs	r1, #2
 800755c:	f7fd fd86 	bl	800506c <socket>

	ret = DHCP_RUNNING;
 8007560:	1dfb      	adds	r3, r7, #7
 8007562:	2201      	movs	r2, #1
 8007564:	701a      	strb	r2, [r3, #0]
	type = parseDHCPMSG();
 8007566:	f7ff fe03 	bl	8007170 <parseDHCPMSG>
 800756a:	0003      	movs	r3, r0
 800756c:	001a      	movs	r2, r3
 800756e:	1dbb      	adds	r3, r7, #6
 8007570:	701a      	strb	r2, [r3, #0]

	switch ( dhcp_state ) {
 8007572:	4b70      	ldr	r3, [pc, #448]	; (8007734 <DHCP_run+0x214>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b25b      	sxtb	r3, r3
 8007578:	2b04      	cmp	r3, #4
 800757a:	d900      	bls.n	800757e <DHCP_run+0x5e>
 800757c:	e0d0      	b.n	8007720 <DHCP_run+0x200>
 800757e:	009a      	lsls	r2, r3, #2
 8007580:	4b6e      	ldr	r3, [pc, #440]	; (800773c <DHCP_run+0x21c>)
 8007582:	18d3      	adds	r3, r2, r3
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	469f      	mov	pc, r3
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8007588:	4b6d      	ldr	r3, [pc, #436]	; (8007740 <DHCP_run+0x220>)
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800758e:	4b6c      	ldr	r3, [pc, #432]	; (8007740 <DHCP_run+0x220>)
 8007590:	2200      	movs	r2, #0
 8007592:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8007594:	4b6a      	ldr	r3, [pc, #424]	; (8007740 <DHCP_run+0x220>)
 8007596:	2200      	movs	r2, #0
 8007598:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800759a:	4b69      	ldr	r3, [pc, #420]	; (8007740 <DHCP_run+0x220>)
 800759c:	2200      	movs	r2, #0
 800759e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80075a0:	f7fe fede 	bl	8006360 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80075a4:	4b63      	ldr	r3, [pc, #396]	; (8007734 <DHCP_run+0x214>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	701a      	strb	r2, [r3, #0]
   		break;
 80075aa:	e0bc      	b.n	8007726 <DHCP_run+0x206>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80075ac:	1dbb      	adds	r3, r7, #6
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d119      	bne.n	80075e8 <DHCP_run+0xc8>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80075b4:	4b63      	ldr	r3, [pc, #396]	; (8007744 <DHCP_run+0x224>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	7c1a      	ldrb	r2, [r3, #16]
 80075ba:	4b61      	ldr	r3, [pc, #388]	; (8007740 <DHCP_run+0x220>)
 80075bc:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80075be:	4b61      	ldr	r3, [pc, #388]	; (8007744 <DHCP_run+0x224>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	7c5a      	ldrb	r2, [r3, #17]
 80075c4:	4b5e      	ldr	r3, [pc, #376]	; (8007740 <DHCP_run+0x220>)
 80075c6:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80075c8:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <DHCP_run+0x224>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	7c9a      	ldrb	r2, [r3, #18]
 80075ce:	4b5c      	ldr	r3, [pc, #368]	; (8007740 <DHCP_run+0x220>)
 80075d0:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80075d2:	4b5c      	ldr	r3, [pc, #368]	; (8007744 <DHCP_run+0x224>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	7cda      	ldrb	r2, [r3, #19]
 80075d8:	4b59      	ldr	r3, [pc, #356]	; (8007740 <DHCP_run+0x220>)
 80075da:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80075dc:	f7ff f8fe 	bl	80067dc <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80075e0:	4b54      	ldr	r3, [pc, #336]	; (8007734 <DHCP_run+0x214>)
 80075e2:	2202      	movs	r2, #2
 80075e4:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80075e6:	e09e      	b.n	8007726 <DHCP_run+0x206>
			} else ret = check_DHCP_timeout();
 80075e8:	1dfc      	adds	r4, r7, #7
 80075ea:	f000 f8bd 	bl	8007768 <check_DHCP_timeout>
 80075ee:	0003      	movs	r3, r0
 80075f0:	7023      	strb	r3, [r4, #0]
         break;
 80075f2:	e098      	b.n	8007726 <DHCP_run+0x206>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80075f4:	1dbb      	adds	r3, r7, #6
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b05      	cmp	r3, #5
 80075fa:	d115      	bne.n	8007628 <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80075fc:	f000 f916 	bl	800782c <check_DHCP_leasedIP>
 8007600:	1e03      	subs	r3, r0, #0
 8007602:	d008      	beq.n	8007616 <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8007604:	4b50      	ldr	r3, [pc, #320]	; (8007748 <DHCP_run+0x228>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4798      	blx	r3
					reset_DHCP_timeout();
 800760a:	f000 f9ed 	bl	80079e8 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800760e:	4b49      	ldr	r3, [pc, #292]	; (8007734 <DHCP_run+0x214>)
 8007610:	2203      	movs	r2, #3
 8007612:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8007614:	e087      	b.n	8007726 <DHCP_run+0x206>
					reset_DHCP_timeout();
 8007616:	f000 f9e7 	bl	80079e8 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800761a:	4b4c      	ldr	r3, [pc, #304]	; (800774c <DHCP_run+0x22c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8007620:	4b44      	ldr	r3, [pc, #272]	; (8007734 <DHCP_run+0x214>)
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
		break;
 8007626:	e07e      	b.n	8007726 <DHCP_run+0x206>
			} else if (type == DHCP_NAK) {
 8007628:	1dbb      	adds	r3, r7, #6
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b06      	cmp	r3, #6
 800762e:	d105      	bne.n	800763c <DHCP_run+0x11c>
				reset_DHCP_timeout();
 8007630:	f000 f9da 	bl	80079e8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8007634:	4b3f      	ldr	r3, [pc, #252]	; (8007734 <DHCP_run+0x214>)
 8007636:	2201      	movs	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
		break;
 800763a:	e074      	b.n	8007726 <DHCP_run+0x206>
			} else ret = check_DHCP_timeout();
 800763c:	1dfc      	adds	r4, r7, #7
 800763e:	f000 f893 	bl	8007768 <check_DHCP_timeout>
 8007642:	0003      	movs	r3, r0
 8007644:	7023      	strb	r3, [r4, #0]
		break;
 8007646:	e06e      	b.n	8007726 <DHCP_run+0x206>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8007648:	1dfb      	adds	r3, r7, #7
 800764a:	2204      	movs	r2, #4
 800764c:	701a      	strb	r2, [r3, #0]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800764e:	4b40      	ldr	r3, [pc, #256]	; (8007750 <DHCP_run+0x230>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	d066      	beq.n	8007724 <DHCP_run+0x204>
 8007656:	4b3e      	ldr	r3, [pc, #248]	; (8007750 <DHCP_run+0x230>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	085a      	lsrs	r2, r3, #1
 800765c:	4b3d      	ldr	r3, [pc, #244]	; (8007754 <DHCP_run+0x234>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d25f      	bcs.n	8007724 <DHCP_run+0x204>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8007664:	1dbb      	adds	r3, r7, #6
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800766a:	4b35      	ldr	r3, [pc, #212]	; (8007740 <DHCP_run+0x220>)
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	4b3a      	ldr	r3, [pc, #232]	; (8007758 <DHCP_run+0x238>)
 8007670:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8007672:	4b33      	ldr	r3, [pc, #204]	; (8007740 <DHCP_run+0x220>)
 8007674:	785a      	ldrb	r2, [r3, #1]
 8007676:	4b38      	ldr	r3, [pc, #224]	; (8007758 <DHCP_run+0x238>)
 8007678:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800767a:	4b31      	ldr	r3, [pc, #196]	; (8007740 <DHCP_run+0x220>)
 800767c:	789a      	ldrb	r2, [r3, #2]
 800767e:	4b36      	ldr	r3, [pc, #216]	; (8007758 <DHCP_run+0x238>)
 8007680:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8007682:	4b2f      	ldr	r3, [pc, #188]	; (8007740 <DHCP_run+0x220>)
 8007684:	78da      	ldrb	r2, [r3, #3]
 8007686:	4b34      	ldr	r3, [pc, #208]	; (8007758 <DHCP_run+0x238>)
 8007688:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 800768a:	4b34      	ldr	r3, [pc, #208]	; (800775c <DHCP_run+0x23c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	4b32      	ldr	r3, [pc, #200]	; (800775c <DHCP_run+0x23c>)
 8007692:	601a      	str	r2, [r3, #0]

				send_DHCP_REQUEST();
 8007694:	f7ff f8a2 	bl	80067dc <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8007698:	f000 f9a6 	bl	80079e8 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <DHCP_run+0x214>)
 800769e:	2204      	movs	r2, #4
 80076a0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80076a2:	e03f      	b.n	8007724 <DHCP_run+0x204>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80076a4:	1dfb      	adds	r3, r7, #7
 80076a6:	2204      	movs	r2, #4
 80076a8:	701a      	strb	r2, [r3, #0]
			if (type == DHCP_ACK) {
 80076aa:	1dbb      	adds	r3, r7, #6
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	d126      	bne.n	8007700 <DHCP_run+0x1e0>
				dhcp_retry_count = 0;
 80076b2:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <DHCP_run+0x240>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80076b8:	4b27      	ldr	r3, [pc, #156]	; (8007758 <DHCP_run+0x238>)
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <DHCP_run+0x220>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d111      	bne.n	80076e8 <DHCP_run+0x1c8>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80076c4:	4b24      	ldr	r3, [pc, #144]	; (8007758 <DHCP_run+0x238>)
 80076c6:	785a      	ldrb	r2, [r3, #1]
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <DHCP_run+0x220>)
 80076ca:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d10b      	bne.n	80076e8 <DHCP_run+0x1c8>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80076d0:	4b21      	ldr	r3, [pc, #132]	; (8007758 <DHCP_run+0x238>)
 80076d2:	789a      	ldrb	r2, [r3, #2]
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <DHCP_run+0x220>)
 80076d6:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80076d8:	429a      	cmp	r2, r3
 80076da:	d105      	bne.n	80076e8 <DHCP_run+0x1c8>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <DHCP_run+0x238>)
 80076de:	78da      	ldrb	r2, [r3, #3]
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <DHCP_run+0x220>)
 80076e2:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d005      	beq.n	80076f4 <DHCP_run+0x1d4>
				{
					ret = DHCP_IP_CHANGED;
 80076e8:	1dfb      	adds	r3, r7, #7
 80076ea:	2203      	movs	r2, #3
 80076ec:	701a      	strb	r2, [r3, #0]
					dhcp_ip_update();
 80076ee:	4b1d      	ldr	r3, [pc, #116]	; (8007764 <DHCP_run+0x244>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80076f4:	f000 f978 	bl	80079e8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80076f8:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <DHCP_run+0x214>)
 80076fa:	2203      	movs	r2, #3
 80076fc:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80076fe:	e012      	b.n	8007726 <DHCP_run+0x206>
			} else if (type == DHCP_NAK) {
 8007700:	1dbb      	adds	r3, r7, #6
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b06      	cmp	r3, #6
 8007706:	d105      	bne.n	8007714 <DHCP_run+0x1f4>
				reset_DHCP_timeout();
 8007708:	f000 f96e 	bl	80079e8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800770c:	4b09      	ldr	r3, [pc, #36]	; (8007734 <DHCP_run+0x214>)
 800770e:	2201      	movs	r2, #1
 8007710:	701a      	strb	r2, [r3, #0]
	   	break;
 8007712:	e008      	b.n	8007726 <DHCP_run+0x206>
			} else ret = check_DHCP_timeout();
 8007714:	1dfc      	adds	r4, r7, #7
 8007716:	f000 f827 	bl	8007768 <check_DHCP_timeout>
 800771a:	0003      	movs	r3, r0
 800771c:	7023      	strb	r3, [r4, #0]
	   	break;
 800771e:	e002      	b.n	8007726 <DHCP_run+0x206>
		default :
   		break;
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	e000      	b.n	8007726 <DHCP_run+0x206>
		break;
 8007724:	46c0      	nop			; (mov r8, r8)
	}

	return ret;
 8007726:	1dfb      	adds	r3, r7, #7
 8007728:	781b      	ldrb	r3, [r3, #0]
}
 800772a:	0018      	movs	r0, r3
 800772c:	46bd      	mov	sp, r7
 800772e:	b003      	add	sp, #12
 8007730:	bd90      	pop	{r4, r7, pc}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	200006a0 	.word	0x200006a0
 8007738:	20000681 	.word	0x20000681
 800773c:	08008f84 	.word	0x08008f84
 8007740:	20000690 	.word	0x20000690
 8007744:	200006ac 	.word	0x200006ac
 8007748:	20000048 	.word	0x20000048
 800774c:	20000050 	.word	0x20000050
 8007750:	20000038 	.word	0x20000038
 8007754:	200006a4 	.word	0x200006a4
 8007758:	2000068c 	.word	0x2000068c
 800775c:	200006a8 	.word	0x200006a8
 8007760:	200006a1 	.word	0x200006a1
 8007764:	2000004c 	.word	0x2000004c

08007768 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800776e:	1dfb      	adds	r3, r7, #7
 8007770:	2201      	movs	r2, #1
 8007772:	701a      	strb	r2, [r3, #0]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8007774:	4b29      	ldr	r3, [pc, #164]	; (800781c <check_DHCP_timeout+0xb4>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	b25b      	sxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	dc2d      	bgt.n	80077da <check_DHCP_timeout+0x72>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800777e:	4b28      	ldr	r3, [pc, #160]	; (8007820 <check_DHCP_timeout+0xb8>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b28      	ldr	r3, [pc, #160]	; (8007824 <check_DHCP_timeout+0xbc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d242      	bcs.n	8007810 <check_DHCP_timeout+0xa8>

			switch ( dhcp_state ) {
 800778a:	4b27      	ldr	r3, [pc, #156]	; (8007828 <check_DHCP_timeout+0xc0>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b25b      	sxtb	r3, r3
 8007790:	2b04      	cmp	r3, #4
 8007792:	d00b      	beq.n	80077ac <check_DHCP_timeout+0x44>
 8007794:	dc0d      	bgt.n	80077b2 <check_DHCP_timeout+0x4a>
 8007796:	2b01      	cmp	r3, #1
 8007798:	d002      	beq.n	80077a0 <check_DHCP_timeout+0x38>
 800779a:	2b02      	cmp	r3, #2
 800779c:	d003      	beq.n	80077a6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800779e:	e008      	b.n	80077b2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80077a0:	f7fe fdde 	bl	8006360 <send_DHCP_DISCOVER>
				break;
 80077a4:	e006      	b.n	80077b4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80077a6:	f7ff f819 	bl	80067dc <send_DHCP_REQUEST>
				break;
 80077aa:	e003      	b.n	80077b4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80077ac:	f7ff f816 	bl	80067dc <send_DHCP_REQUEST>
				break;
 80077b0:	e000      	b.n	80077b4 <check_DHCP_timeout+0x4c>
				break;
 80077b2:	46c0      	nop			; (mov r8, r8)
			}

			dhcp_tick_1s = 0;
 80077b4:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <check_DHCP_timeout+0xbc>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80077ba:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <check_DHCP_timeout+0xbc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	330a      	adds	r3, #10
 80077c0:	001a      	movs	r2, r3
 80077c2:	4b17      	ldr	r3, [pc, #92]	; (8007820 <check_DHCP_timeout+0xb8>)
 80077c4:	601a      	str	r2, [r3, #0]
			dhcp_retry_count++;
 80077c6:	4b15      	ldr	r3, [pc, #84]	; (800781c <check_DHCP_timeout+0xb4>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	3301      	adds	r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	b25a      	sxtb	r2, r3
 80077d4:	4b11      	ldr	r3, [pc, #68]	; (800781c <check_DHCP_timeout+0xb4>)
 80077d6:	701a      	strb	r2, [r3, #0]
 80077d8:	e01a      	b.n	8007810 <check_DHCP_timeout+0xa8>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80077da:	4b13      	ldr	r3, [pc, #76]	; (8007828 <check_DHCP_timeout+0xc0>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	b25b      	sxtb	r3, r3
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d00c      	beq.n	80077fe <check_DHCP_timeout+0x96>
 80077e4:	dc11      	bgt.n	800780a <check_DHCP_timeout+0xa2>
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d002      	beq.n	80077f0 <check_DHCP_timeout+0x88>
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d007      	beq.n	80077fe <check_DHCP_timeout+0x96>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80077ee:	e00c      	b.n	800780a <check_DHCP_timeout+0xa2>
				dhcp_state = STATE_DHCP_INIT;
 80077f0:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <check_DHCP_timeout+0xc0>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80077f6:	1dfb      	adds	r3, r7, #7
 80077f8:	2200      	movs	r2, #0
 80077fa:	701a      	strb	r2, [r3, #0]
				break;
 80077fc:	e006      	b.n	800780c <check_DHCP_timeout+0xa4>
				send_DHCP_DISCOVER();
 80077fe:	f7fe fdaf 	bl	8006360 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <check_DHCP_timeout+0xc0>)
 8007804:	2201      	movs	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
				break;
 8007808:	e000      	b.n	800780c <check_DHCP_timeout+0xa4>
				break;
 800780a:	46c0      	nop			; (mov r8, r8)
		}
		reset_DHCP_timeout();
 800780c:	f000 f8ec 	bl	80079e8 <reset_DHCP_timeout>
	}
	return ret;
 8007810:	1dfb      	adds	r3, r7, #7
 8007812:	781b      	ldrb	r3, [r3, #0]
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b002      	add	sp, #8
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200006a1 	.word	0x200006a1
 8007820:	2000003c 	.word	0x2000003c
 8007824:	200006a4 	.word	0x200006a4
 8007828:	200006a0 	.word	0x200006a0

0800782c <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b085      	sub	sp, #20
 8007830:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8007832:	1dfc      	adds	r4, r7, #7
 8007834:	23d8      	movs	r3, #216	; 0xd8
 8007836:	015b      	lsls	r3, r3, #5
 8007838:	0018      	movs	r0, r3
 800783a:	f7fd f86d 	bl	8004918 <WIZCHIP_READ>
 800783e:	0003      	movs	r3, r0
 8007840:	7023      	strb	r3, [r4, #0]
	setRCR(0x03);
 8007842:	23d8      	movs	r3, #216	; 0xd8
 8007844:	015b      	lsls	r3, r3, #5
 8007846:	2103      	movs	r1, #3
 8007848:	0018      	movs	r0, r3
 800784a:	f7fd f8b7 	bl	80049bc <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800784e:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <check_DHCP_leasedIP+0x74>)
 8007850:	7818      	ldrb	r0, [r3, #0]
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <check_DHCP_leasedIP+0x78>)
 8007854:	4914      	ldr	r1, [pc, #80]	; (80078a8 <check_DHCP_leasedIP+0x7c>)
 8007856:	4a15      	ldr	r2, [pc, #84]	; (80078ac <check_DHCP_leasedIP+0x80>)
 8007858:	9200      	str	r2, [sp, #0]
 800785a:	2211      	movs	r2, #17
 800785c:	f7fd fdba 	bl	80053d4 <sendto>
 8007860:	0003      	movs	r3, r0
 8007862:	603b      	str	r3, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8007864:	1dfb      	adds	r3, r7, #7
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	23d8      	movs	r3, #216	; 0xd8
 800786a:	015b      	lsls	r3, r3, #5
 800786c:	0011      	movs	r1, r2
 800786e:	0018      	movs	r0, r3
 8007870:	f7fd f8a4 	bl	80049bc <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	330d      	adds	r3, #13
 8007878:	d101      	bne.n	800787e <check_DHCP_leasedIP+0x52>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800787a:	2301      	movs	r3, #1
 800787c:	e00c      	b.n	8007898 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800787e:	f7ff facf 	bl	8006e20 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8007882:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <check_DHCP_leasedIP+0x84>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8007888:	46c0      	nop			; (mov r8, r8)
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <check_DHCP_leasedIP+0x84>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d9f9      	bls.n	800788a <check_DHCP_leasedIP+0x5e>

		return 0;
 8007896:	2300      	movs	r3, #0
	}
}	
 8007898:	0018      	movs	r0, r3
 800789a:	46bd      	mov	sp, r7
 800789c:	b003      	add	sp, #12
 800789e:	bd90      	pop	{r4, r7, pc}
 80078a0:	20000681 	.word	0x20000681
 80078a4:	20000690 	.word	0x20000690
 80078a8:	08008e7c 	.word	0x08008e7c
 80078ac:	00001388 	.word	0x00001388
 80078b0:	200006a4 	.word	0x200006a4

080078b4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	0002      	movs	r2, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	1dfb      	adds	r3, r7, #7
 80078c0:	701a      	strb	r2, [r3, #0]
   uint8_t zeroip[4] = {0,0,0,0};
 80078c2:	230c      	movs	r3, #12
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
   getSHAR(DHCP_CHADDR);
 80078ca:	4941      	ldr	r1, [pc, #260]	; (80079d0 <DHCP_init+0x11c>)
 80078cc:	2390      	movs	r3, #144	; 0x90
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	2206      	movs	r2, #6
 80078d2:	0018      	movs	r0, r3
 80078d4:	f7fd f8c8 	bl	8004a68 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80078d8:	4b3d      	ldr	r3, [pc, #244]	; (80079d0 <DHCP_init+0x11c>)
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	4b3c      	ldr	r3, [pc, #240]	; (80079d0 <DHCP_init+0x11c>)
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	4b3a      	ldr	r3, [pc, #232]	; (80079d0 <DHCP_init+0x11c>)
 80078e6:	789b      	ldrb	r3, [r3, #2]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	4b38      	ldr	r3, [pc, #224]	; (80079d0 <DHCP_init+0x11c>)
 80078ee:	78db      	ldrb	r3, [r3, #3]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <DHCP_init+0x11c>)
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	4b34      	ldr	r3, [pc, #208]	; (80079d0 <DHCP_init+0x11c>)
 80078fe:	795b      	ldrb	r3, [r3, #5]
 8007900:	4313      	orrs	r3, r2
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d118      	bne.n	800793a <DHCP_init+0x86>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8007908:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <DHCP_init+0x11c>)
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800790e:	4b30      	ldr	r3, [pc, #192]	; (80079d0 <DHCP_init+0x11c>)
 8007910:	2208      	movs	r2, #8
 8007912:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8007914:	4b2e      	ldr	r3, [pc, #184]	; (80079d0 <DHCP_init+0x11c>)
 8007916:	22dc      	movs	r2, #220	; 0xdc
 8007918:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800791a:	4b2d      	ldr	r3, [pc, #180]	; (80079d0 <DHCP_init+0x11c>)
 800791c:	2200      	movs	r2, #0
 800791e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <DHCP_init+0x11c>)
 8007922:	2200      	movs	r2, #0
 8007924:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8007926:	4b2a      	ldr	r3, [pc, #168]	; (80079d0 <DHCP_init+0x11c>)
 8007928:	2200      	movs	r2, #0
 800792a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800792c:	4928      	ldr	r1, [pc, #160]	; (80079d0 <DHCP_init+0x11c>)
 800792e:	2390      	movs	r3, #144	; 0x90
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	2206      	movs	r2, #6
 8007934:	0018      	movs	r0, r3
 8007936:	f7fd f905 	bl	8004b44 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 800793a:	4b26      	ldr	r3, [pc, #152]	; (80079d4 <DHCP_init+0x120>)
 800793c:	1dfa      	adds	r2, r7, #7
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8007942:	4b25      	ldr	r3, [pc, #148]	; (80079d8 <DHCP_init+0x124>)
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	601a      	str	r2, [r3, #0]
	DHCP_XID = 0x12345678;
 8007948:	4b24      	ldr	r3, [pc, #144]	; (80079dc <DHCP_init+0x128>)
 800794a:	4a25      	ldr	r2, [pc, #148]	; (80079e0 <DHCP_init+0x12c>)
 800794c:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800794e:	4b20      	ldr	r3, [pc, #128]	; (80079d0 <DHCP_init+0x11c>)
 8007950:	78db      	ldrb	r3, [r3, #3]
 8007952:	001a      	movs	r2, r3
 8007954:	4b21      	ldr	r3, [pc, #132]	; (80079dc <DHCP_init+0x128>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	18d2      	adds	r2, r2, r3
 800795a:	4b20      	ldr	r3, [pc, #128]	; (80079dc <DHCP_init+0x128>)
 800795c:	601a      	str	r2, [r3, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800795e:	4b1c      	ldr	r3, [pc, #112]	; (80079d0 <DHCP_init+0x11c>)
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	001a      	movs	r2, r3
 8007964:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <DHCP_init+0x128>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	18d2      	adds	r2, r2, r3
 800796a:	4b1c      	ldr	r3, [pc, #112]	; (80079dc <DHCP_init+0x128>)
 800796c:	601a      	str	r2, [r3, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <DHCP_init+0x11c>)
 8007970:	795b      	ldrb	r3, [r3, #5]
 8007972:	001a      	movs	r2, r3
 8007974:	4b19      	ldr	r3, [pc, #100]	; (80079dc <DHCP_init+0x128>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	18d2      	adds	r2, r2, r3
 800797a:	4b18      	ldr	r3, [pc, #96]	; (80079dc <DHCP_init+0x128>)
 800797c:	601a      	str	r2, [r3, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800797e:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <DHCP_init+0x11c>)
 8007980:	78da      	ldrb	r2, [r3, #3]
 8007982:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <DHCP_init+0x11c>)
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	4053      	eors	r3, r2
 8007988:	b2da      	uxtb	r2, r3
 800798a:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <DHCP_init+0x11c>)
 800798c:	795b      	ldrb	r3, [r3, #5]
 800798e:	4053      	eors	r3, r2
 8007990:	b2db      	uxtb	r3, r3
 8007992:	001a      	movs	r2, r3
 8007994:	4b11      	ldr	r3, [pc, #68]	; (80079dc <DHCP_init+0x128>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	18d2      	adds	r2, r2, r3
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <DHCP_init+0x128>)
 800799c:	601a      	str	r2, [r3, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800799e:	240c      	movs	r4, #12
 80079a0:	1939      	adds	r1, r7, r4
 80079a2:	23f0      	movs	r3, #240	; 0xf0
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	2204      	movs	r2, #4
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7fd f8cb 	bl	8004b44 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80079ae:	1939      	adds	r1, r7, r4
 80079b0:	2380      	movs	r3, #128	; 0x80
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	2204      	movs	r2, #4
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7fd f8c4 	bl	8004b44 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80079bc:	f000 f814 	bl	80079e8 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <DHCP_init+0x130>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	46bd      	mov	sp, r7
 80079ca:	b005      	add	sp, #20
 80079cc:	bd90      	pop	{r4, r7, pc}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	200006b0 	.word	0x200006b0
 80079d4:	20000681 	.word	0x20000681
 80079d8:	200006ac 	.word	0x200006ac
 80079dc:	200006a8 	.word	0x200006a8
 80079e0:	12345678 	.word	0x12345678
 80079e4:	200006a0 	.word	0x200006a0

080079e8 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <reset_DHCP_timeout+0x1c>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <reset_DHCP_timeout+0x20>)
 80079f4:	220a      	movs	r2, #10
 80079f6:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <reset_DHCP_timeout+0x24>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
}
 80079fe:	46c0      	nop			; (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	200006a4 	.word	0x200006a4
 8007a08:	2000003c 	.word	0x2000003c
 8007a0c:	200006a1 	.word	0x200006a1

08007a10 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <DHCP_time_handler+0x14>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	4b02      	ldr	r3, [pc, #8]	; (8007a24 <DHCP_time_handler+0x14>)
 8007a1c:	601a      	str	r2, [r3, #0]
}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200006a4 	.word	0x200006a4

08007a28 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <getIPfromDHCP+0x38>)
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	4a08      	ldr	r2, [pc, #32]	; (8007a60 <getIPfromDHCP+0x38>)
 8007a3e:	7852      	ldrb	r2, [r2, #1]
 8007a40:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3302      	adds	r3, #2
 8007a46:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <getIPfromDHCP+0x38>)
 8007a48:	7892      	ldrb	r2, [r2, #2]
 8007a4a:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3303      	adds	r3, #3
 8007a50:	4a03      	ldr	r2, [pc, #12]	; (8007a60 <getIPfromDHCP+0x38>)
 8007a52:	78d2      	ldrb	r2, [r2, #3]
 8007a54:	701a      	strb	r2, [r3, #0]
}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b002      	add	sp, #8
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	20000690 	.word	0x20000690

08007a64 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <getGWfromDHCP+0x38>)
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3301      	adds	r3, #1
 8007a78:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <getGWfromDHCP+0x38>)
 8007a7a:	7852      	ldrb	r2, [r2, #1]
 8007a7c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3302      	adds	r3, #2
 8007a82:	4a06      	ldr	r2, [pc, #24]	; (8007a9c <getGWfromDHCP+0x38>)
 8007a84:	7892      	ldrb	r2, [r2, #2]
 8007a86:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3303      	adds	r3, #3
 8007a8c:	4a03      	ldr	r2, [pc, #12]	; (8007a9c <getGWfromDHCP+0x38>)
 8007a8e:	78d2      	ldrb	r2, [r2, #3]
 8007a90:	701a      	strb	r2, [r3, #0]
}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b002      	add	sp, #8
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	20000694 	.word	0x20000694

08007aa0 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <getSNfromDHCP+0x38>)
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	4a08      	ldr	r2, [pc, #32]	; (8007ad8 <getSNfromDHCP+0x38>)
 8007ab6:	7852      	ldrb	r2, [r2, #1]
 8007ab8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3302      	adds	r3, #2
 8007abe:	4a06      	ldr	r2, [pc, #24]	; (8007ad8 <getSNfromDHCP+0x38>)
 8007ac0:	7892      	ldrb	r2, [r2, #2]
 8007ac2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3303      	adds	r3, #3
 8007ac8:	4a03      	ldr	r2, [pc, #12]	; (8007ad8 <getSNfromDHCP+0x38>)
 8007aca:	78d2      	ldrb	r2, [r2, #3]
 8007acc:	701a      	strb	r2, [r3, #0]
}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b002      	add	sp, #8
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	20000698 	.word	0x20000698

08007adc <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <getDNSfromDHCP+0x38>)
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <getDNSfromDHCP+0x38>)
 8007af2:	7852      	ldrb	r2, [r2, #1]
 8007af4:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3302      	adds	r3, #2
 8007afa:	4a06      	ldr	r2, [pc, #24]	; (8007b14 <getDNSfromDHCP+0x38>)
 8007afc:	7892      	ldrb	r2, [r2, #2]
 8007afe:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3303      	adds	r3, #3
 8007b04:	4a03      	ldr	r2, [pc, #12]	; (8007b14 <getDNSfromDHCP+0x38>)
 8007b06:	78d2      	ldrb	r2, [r2, #3]
 8007b08:	701a      	strb	r2, [r3, #0]
}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b002      	add	sp, #8
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	2000069c 	.word	0x2000069c

08007b18 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 8007b1c:	4b02      	ldr	r3, [pc, #8]	; (8007b28 <getDHCPLeasetime+0x10>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
}
 8007b20:	0018      	movs	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	20000038 	.word	0x20000038

08007b2c <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	0002      	movs	r2, r0
 8007b34:	1dfb      	adds	r3, r7, #7
 8007b36:	701a      	strb	r2, [r3, #0]
  nibble &= 0x0F;
 8007b38:	1dfb      	adds	r3, r7, #7
 8007b3a:	1dfa      	adds	r2, r7, #7
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	210f      	movs	r1, #15
 8007b40:	400a      	ands	r2, r1
 8007b42:	701a      	strb	r2, [r3, #0]
  if (nibble <= 9)
 8007b44:	1dfb      	adds	r3, r7, #7
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b09      	cmp	r3, #9
 8007b4a:	d804      	bhi.n	8007b56 <NibbleToHex+0x2a>
    return nibble + '0';
 8007b4c:	1dfb      	adds	r3, r7, #7
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	3330      	adds	r3, #48	; 0x30
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	e003      	b.n	8007b5e <NibbleToHex+0x32>
  else 
    return nibble + ('A'-0x0A);
 8007b56:	1dfb      	adds	r3, r7, #7
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	3337      	adds	r3, #55	; 0x37
 8007b5c:	b2db      	uxtb	r3, r3
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b002      	add	sp, #8
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <__errno>:
 8007b68:	4b01      	ldr	r3, [pc, #4]	; (8007b70 <__errno+0x8>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	4770      	bx	lr
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	20000054 	.word	0x20000054

08007b74 <__libc_init_array>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	2600      	movs	r6, #0
 8007b78:	4d0c      	ldr	r5, [pc, #48]	; (8007bac <__libc_init_array+0x38>)
 8007b7a:	4c0d      	ldr	r4, [pc, #52]	; (8007bb0 <__libc_init_array+0x3c>)
 8007b7c:	1b64      	subs	r4, r4, r5
 8007b7e:	10a4      	asrs	r4, r4, #2
 8007b80:	42a6      	cmp	r6, r4
 8007b82:	d109      	bne.n	8007b98 <__libc_init_array+0x24>
 8007b84:	2600      	movs	r6, #0
 8007b86:	f001 f875 	bl	8008c74 <_init>
 8007b8a:	4d0a      	ldr	r5, [pc, #40]	; (8007bb4 <__libc_init_array+0x40>)
 8007b8c:	4c0a      	ldr	r4, [pc, #40]	; (8007bb8 <__libc_init_array+0x44>)
 8007b8e:	1b64      	subs	r4, r4, r5
 8007b90:	10a4      	asrs	r4, r4, #2
 8007b92:	42a6      	cmp	r6, r4
 8007b94:	d105      	bne.n	8007ba2 <__libc_init_array+0x2e>
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	00b3      	lsls	r3, r6, #2
 8007b9a:	58eb      	ldr	r3, [r5, r3]
 8007b9c:	4798      	blx	r3
 8007b9e:	3601      	adds	r6, #1
 8007ba0:	e7ee      	b.n	8007b80 <__libc_init_array+0xc>
 8007ba2:	00b3      	lsls	r3, r6, #2
 8007ba4:	58eb      	ldr	r3, [r5, r3]
 8007ba6:	4798      	blx	r3
 8007ba8:	3601      	adds	r6, #1
 8007baa:	e7f2      	b.n	8007b92 <__libc_init_array+0x1e>
 8007bac:	08009030 	.word	0x08009030
 8007bb0:	08009030 	.word	0x08009030
 8007bb4:	08009030 	.word	0x08009030
 8007bb8:	08009034 	.word	0x08009034

08007bbc <memset>:
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	1882      	adds	r2, r0, r2
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d100      	bne.n	8007bc6 <memset+0xa>
 8007bc4:	4770      	bx	lr
 8007bc6:	7019      	strb	r1, [r3, #0]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	e7f9      	b.n	8007bc0 <memset+0x4>

08007bcc <iprintf>:
 8007bcc:	b40f      	push	{r0, r1, r2, r3}
 8007bce:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <iprintf+0x30>)
 8007bd0:	b513      	push	{r0, r1, r4, lr}
 8007bd2:	681c      	ldr	r4, [r3, #0]
 8007bd4:	2c00      	cmp	r4, #0
 8007bd6:	d005      	beq.n	8007be4 <iprintf+0x18>
 8007bd8:	69a3      	ldr	r3, [r4, #24]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <iprintf+0x18>
 8007bde:	0020      	movs	r0, r4
 8007be0:	f000 fa86 	bl	80080f0 <__sinit>
 8007be4:	ab05      	add	r3, sp, #20
 8007be6:	0020      	movs	r0, r4
 8007be8:	9a04      	ldr	r2, [sp, #16]
 8007bea:	68a1      	ldr	r1, [r4, #8]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	f000 fc99 	bl	8008524 <_vfiprintf_r>
 8007bf2:	bc16      	pop	{r1, r2, r4}
 8007bf4:	bc08      	pop	{r3}
 8007bf6:	b004      	add	sp, #16
 8007bf8:	4718      	bx	r3
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	20000054 	.word	0x20000054

08007c00 <_puts_r>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	0005      	movs	r5, r0
 8007c04:	000e      	movs	r6, r1
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d004      	beq.n	8007c14 <_puts_r+0x14>
 8007c0a:	6983      	ldr	r3, [r0, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <_puts_r+0x14>
 8007c10:	f000 fa6e 	bl	80080f0 <__sinit>
 8007c14:	69ab      	ldr	r3, [r5, #24]
 8007c16:	68ac      	ldr	r4, [r5, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <_puts_r+0x22>
 8007c1c:	0028      	movs	r0, r5
 8007c1e:	f000 fa67 	bl	80080f0 <__sinit>
 8007c22:	4b2d      	ldr	r3, [pc, #180]	; (8007cd8 <_puts_r+0xd8>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d122      	bne.n	8007c6e <_puts_r+0x6e>
 8007c28:	686c      	ldr	r4, [r5, #4]
 8007c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c2c:	07db      	lsls	r3, r3, #31
 8007c2e:	d405      	bmi.n	8007c3c <_puts_r+0x3c>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	059b      	lsls	r3, r3, #22
 8007c34:	d402      	bmi.n	8007c3c <_puts_r+0x3c>
 8007c36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c38:	f000 fafb 	bl	8008232 <__retarget_lock_acquire_recursive>
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	071b      	lsls	r3, r3, #28
 8007c40:	d502      	bpl.n	8007c48 <_puts_r+0x48>
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d129      	bne.n	8007c9c <_puts_r+0x9c>
 8007c48:	0021      	movs	r1, r4
 8007c4a:	0028      	movs	r0, r5
 8007c4c:	f000 f8aa 	bl	8007da4 <__swsetup_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d023      	beq.n	8007c9c <_puts_r+0x9c>
 8007c54:	2501      	movs	r5, #1
 8007c56:	426d      	negs	r5, r5
 8007c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	d405      	bmi.n	8007c6a <_puts_r+0x6a>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	059b      	lsls	r3, r3, #22
 8007c62:	d402      	bmi.n	8007c6a <_puts_r+0x6a>
 8007c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c66:	f000 fae5 	bl	8008234 <__retarget_lock_release_recursive>
 8007c6a:	0028      	movs	r0, r5
 8007c6c:	bd70      	pop	{r4, r5, r6, pc}
 8007c6e:	4b1b      	ldr	r3, [pc, #108]	; (8007cdc <_puts_r+0xdc>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d101      	bne.n	8007c78 <_puts_r+0x78>
 8007c74:	68ac      	ldr	r4, [r5, #8]
 8007c76:	e7d8      	b.n	8007c2a <_puts_r+0x2a>
 8007c78:	4b19      	ldr	r3, [pc, #100]	; (8007ce0 <_puts_r+0xe0>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d1d5      	bne.n	8007c2a <_puts_r+0x2a>
 8007c7e:	68ec      	ldr	r4, [r5, #12]
 8007c80:	e7d3      	b.n	8007c2a <_puts_r+0x2a>
 8007c82:	3601      	adds	r6, #1
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da04      	bge.n	8007c94 <_puts_r+0x94>
 8007c8a:	69a2      	ldr	r2, [r4, #24]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	dc16      	bgt.n	8007cbe <_puts_r+0xbe>
 8007c90:	290a      	cmp	r1, #10
 8007c92:	d014      	beq.n	8007cbe <_puts_r+0xbe>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	7019      	strb	r1, [r3, #0]
 8007c9c:	68a3      	ldr	r3, [r4, #8]
 8007c9e:	7831      	ldrb	r1, [r6, #0]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	2900      	cmp	r1, #0
 8007ca4:	d1ed      	bne.n	8007c82 <_puts_r+0x82>
 8007ca6:	60a3      	str	r3, [r4, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	da0f      	bge.n	8007ccc <_puts_r+0xcc>
 8007cac:	0028      	movs	r0, r5
 8007cae:	0022      	movs	r2, r4
 8007cb0:	310a      	adds	r1, #10
 8007cb2:	f000 f821 	bl	8007cf8 <__swbuf_r>
 8007cb6:	250a      	movs	r5, #10
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d1cd      	bne.n	8007c58 <_puts_r+0x58>
 8007cbc:	e7ca      	b.n	8007c54 <_puts_r+0x54>
 8007cbe:	0022      	movs	r2, r4
 8007cc0:	0028      	movs	r0, r5
 8007cc2:	f000 f819 	bl	8007cf8 <__swbuf_r>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	d1e8      	bne.n	8007c9c <_puts_r+0x9c>
 8007cca:	e7c3      	b.n	8007c54 <_puts_r+0x54>
 8007ccc:	250a      	movs	r5, #10
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	6022      	str	r2, [r4, #0]
 8007cd4:	701d      	strb	r5, [r3, #0]
 8007cd6:	e7bf      	b.n	8007c58 <_puts_r+0x58>
 8007cd8:	08008fbc 	.word	0x08008fbc
 8007cdc:	08008fdc 	.word	0x08008fdc
 8007ce0:	08008f9c 	.word	0x08008f9c

08007ce4 <puts>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <puts+0x10>)
 8007ce8:	0001      	movs	r1, r0
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	f7ff ff88 	bl	8007c00 <_puts_r>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	20000054 	.word	0x20000054

08007cf8 <__swbuf_r>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	0005      	movs	r5, r0
 8007cfc:	000e      	movs	r6, r1
 8007cfe:	0014      	movs	r4, r2
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d004      	beq.n	8007d0e <__swbuf_r+0x16>
 8007d04:	6983      	ldr	r3, [r0, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <__swbuf_r+0x16>
 8007d0a:	f000 f9f1 	bl	80080f0 <__sinit>
 8007d0e:	4b22      	ldr	r3, [pc, #136]	; (8007d98 <__swbuf_r+0xa0>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	d12e      	bne.n	8007d72 <__swbuf_r+0x7a>
 8007d14:	686c      	ldr	r4, [r5, #4]
 8007d16:	69a3      	ldr	r3, [r4, #24]
 8007d18:	60a3      	str	r3, [r4, #8]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	071b      	lsls	r3, r3, #28
 8007d1e:	d532      	bpl.n	8007d86 <__swbuf_r+0x8e>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d02f      	beq.n	8007d86 <__swbuf_r+0x8e>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6922      	ldr	r2, [r4, #16]
 8007d2a:	b2f7      	uxtb	r7, r6
 8007d2c:	1a98      	subs	r0, r3, r2
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	b2f6      	uxtb	r6, r6
 8007d32:	4283      	cmp	r3, r0
 8007d34:	dc05      	bgt.n	8007d42 <__swbuf_r+0x4a>
 8007d36:	0021      	movs	r1, r4
 8007d38:	0028      	movs	r0, r5
 8007d3a:	f000 f937 	bl	8007fac <_fflush_r>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d127      	bne.n	8007d92 <__swbuf_r+0x9a>
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	3001      	adds	r0, #1
 8007d46:	3b01      	subs	r3, #1
 8007d48:	60a3      	str	r3, [r4, #8]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	6022      	str	r2, [r4, #0]
 8007d50:	701f      	strb	r7, [r3, #0]
 8007d52:	6963      	ldr	r3, [r4, #20]
 8007d54:	4283      	cmp	r3, r0
 8007d56:	d004      	beq.n	8007d62 <__swbuf_r+0x6a>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d507      	bpl.n	8007d6e <__swbuf_r+0x76>
 8007d5e:	2e0a      	cmp	r6, #10
 8007d60:	d105      	bne.n	8007d6e <__swbuf_r+0x76>
 8007d62:	0021      	movs	r1, r4
 8007d64:	0028      	movs	r0, r5
 8007d66:	f000 f921 	bl	8007fac <_fflush_r>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d111      	bne.n	8007d92 <__swbuf_r+0x9a>
 8007d6e:	0030      	movs	r0, r6
 8007d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d72:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <__swbuf_r+0xa4>)
 8007d74:	429c      	cmp	r4, r3
 8007d76:	d101      	bne.n	8007d7c <__swbuf_r+0x84>
 8007d78:	68ac      	ldr	r4, [r5, #8]
 8007d7a:	e7cc      	b.n	8007d16 <__swbuf_r+0x1e>
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <__swbuf_r+0xa8>)
 8007d7e:	429c      	cmp	r4, r3
 8007d80:	d1c9      	bne.n	8007d16 <__swbuf_r+0x1e>
 8007d82:	68ec      	ldr	r4, [r5, #12]
 8007d84:	e7c7      	b.n	8007d16 <__swbuf_r+0x1e>
 8007d86:	0021      	movs	r1, r4
 8007d88:	0028      	movs	r0, r5
 8007d8a:	f000 f80b 	bl	8007da4 <__swsetup_r>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d0c9      	beq.n	8007d26 <__swbuf_r+0x2e>
 8007d92:	2601      	movs	r6, #1
 8007d94:	4276      	negs	r6, r6
 8007d96:	e7ea      	b.n	8007d6e <__swbuf_r+0x76>
 8007d98:	08008fbc 	.word	0x08008fbc
 8007d9c:	08008fdc 	.word	0x08008fdc
 8007da0:	08008f9c 	.word	0x08008f9c

08007da4 <__swsetup_r>:
 8007da4:	4b37      	ldr	r3, [pc, #220]	; (8007e84 <__swsetup_r+0xe0>)
 8007da6:	b570      	push	{r4, r5, r6, lr}
 8007da8:	681d      	ldr	r5, [r3, #0]
 8007daa:	0006      	movs	r6, r0
 8007dac:	000c      	movs	r4, r1
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	d005      	beq.n	8007dbe <__swsetup_r+0x1a>
 8007db2:	69ab      	ldr	r3, [r5, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <__swsetup_r+0x1a>
 8007db8:	0028      	movs	r0, r5
 8007dba:	f000 f999 	bl	80080f0 <__sinit>
 8007dbe:	4b32      	ldr	r3, [pc, #200]	; (8007e88 <__swsetup_r+0xe4>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d10f      	bne.n	8007de4 <__swsetup_r+0x40>
 8007dc4:	686c      	ldr	r4, [r5, #4]
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	5ee2      	ldrsh	r2, [r4, r3]
 8007dca:	b293      	uxth	r3, r2
 8007dcc:	0711      	lsls	r1, r2, #28
 8007dce:	d42d      	bmi.n	8007e2c <__swsetup_r+0x88>
 8007dd0:	06d9      	lsls	r1, r3, #27
 8007dd2:	d411      	bmi.n	8007df8 <__swsetup_r+0x54>
 8007dd4:	2309      	movs	r3, #9
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	6033      	str	r3, [r6, #0]
 8007dda:	3337      	adds	r3, #55	; 0x37
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	4240      	negs	r0, r0
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	4b29      	ldr	r3, [pc, #164]	; (8007e8c <__swsetup_r+0xe8>)
 8007de6:	429c      	cmp	r4, r3
 8007de8:	d101      	bne.n	8007dee <__swsetup_r+0x4a>
 8007dea:	68ac      	ldr	r4, [r5, #8]
 8007dec:	e7eb      	b.n	8007dc6 <__swsetup_r+0x22>
 8007dee:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <__swsetup_r+0xec>)
 8007df0:	429c      	cmp	r4, r3
 8007df2:	d1e8      	bne.n	8007dc6 <__swsetup_r+0x22>
 8007df4:	68ec      	ldr	r4, [r5, #12]
 8007df6:	e7e6      	b.n	8007dc6 <__swsetup_r+0x22>
 8007df8:	075b      	lsls	r3, r3, #29
 8007dfa:	d513      	bpl.n	8007e24 <__swsetup_r+0x80>
 8007dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	d008      	beq.n	8007e14 <__swsetup_r+0x70>
 8007e02:	0023      	movs	r3, r4
 8007e04:	3344      	adds	r3, #68	; 0x44
 8007e06:	4299      	cmp	r1, r3
 8007e08:	d002      	beq.n	8007e10 <__swsetup_r+0x6c>
 8007e0a:	0030      	movs	r0, r6
 8007e0c:	f000 fa80 	bl	8008310 <_free_r>
 8007e10:	2300      	movs	r3, #0
 8007e12:	6363      	str	r3, [r4, #52]	; 0x34
 8007e14:	2224      	movs	r2, #36	; 0x24
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	4393      	bics	r3, r2
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6063      	str	r3, [r4, #4]
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	2308      	movs	r3, #8
 8007e26:	89a2      	ldrh	r2, [r4, #12]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10b      	bne.n	8007e4a <__swsetup_r+0xa6>
 8007e32:	21a0      	movs	r1, #160	; 0xa0
 8007e34:	2280      	movs	r2, #128	; 0x80
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	0089      	lsls	r1, r1, #2
 8007e3a:	0092      	lsls	r2, r2, #2
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d003      	beq.n	8007e4a <__swsetup_r+0xa6>
 8007e42:	0021      	movs	r1, r4
 8007e44:	0030      	movs	r0, r6
 8007e46:	f000 fa1f 	bl	8008288 <__smakebuf_r>
 8007e4a:	220c      	movs	r2, #12
 8007e4c:	5ea3      	ldrsh	r3, [r4, r2]
 8007e4e:	2001      	movs	r0, #1
 8007e50:	001a      	movs	r2, r3
 8007e52:	b299      	uxth	r1, r3
 8007e54:	4002      	ands	r2, r0
 8007e56:	4203      	tst	r3, r0
 8007e58:	d00f      	beq.n	8007e7a <__swsetup_r+0xd6>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	60a2      	str	r2, [r4, #8]
 8007e5e:	6962      	ldr	r2, [r4, #20]
 8007e60:	4252      	negs	r2, r2
 8007e62:	61a2      	str	r2, [r4, #24]
 8007e64:	2000      	movs	r0, #0
 8007e66:	6922      	ldr	r2, [r4, #16]
 8007e68:	4282      	cmp	r2, r0
 8007e6a:	d1ba      	bne.n	8007de2 <__swsetup_r+0x3e>
 8007e6c:	060a      	lsls	r2, r1, #24
 8007e6e:	d5b8      	bpl.n	8007de2 <__swsetup_r+0x3e>
 8007e70:	2240      	movs	r2, #64	; 0x40
 8007e72:	4313      	orrs	r3, r2
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	3801      	subs	r0, #1
 8007e78:	e7b3      	b.n	8007de2 <__swsetup_r+0x3e>
 8007e7a:	0788      	lsls	r0, r1, #30
 8007e7c:	d400      	bmi.n	8007e80 <__swsetup_r+0xdc>
 8007e7e:	6962      	ldr	r2, [r4, #20]
 8007e80:	60a2      	str	r2, [r4, #8]
 8007e82:	e7ef      	b.n	8007e64 <__swsetup_r+0xc0>
 8007e84:	20000054 	.word	0x20000054
 8007e88:	08008fbc 	.word	0x08008fbc
 8007e8c:	08008fdc 	.word	0x08008fdc
 8007e90:	08008f9c 	.word	0x08008f9c

08007e94 <__sflush_r>:
 8007e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e96:	898b      	ldrh	r3, [r1, #12]
 8007e98:	0005      	movs	r5, r0
 8007e9a:	000c      	movs	r4, r1
 8007e9c:	071a      	lsls	r2, r3, #28
 8007e9e:	d45f      	bmi.n	8007f60 <__sflush_r+0xcc>
 8007ea0:	684a      	ldr	r2, [r1, #4]
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	dc04      	bgt.n	8007eb0 <__sflush_r+0x1c>
 8007ea6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007ea8:	2a00      	cmp	r2, #0
 8007eaa:	dc01      	bgt.n	8007eb0 <__sflush_r+0x1c>
 8007eac:	2000      	movs	r0, #0
 8007eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007eb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007eb2:	2f00      	cmp	r7, #0
 8007eb4:	d0fa      	beq.n	8007eac <__sflush_r+0x18>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2180      	movs	r1, #128	; 0x80
 8007eba:	682e      	ldr	r6, [r5, #0]
 8007ebc:	602a      	str	r2, [r5, #0]
 8007ebe:	001a      	movs	r2, r3
 8007ec0:	0149      	lsls	r1, r1, #5
 8007ec2:	400a      	ands	r2, r1
 8007ec4:	420b      	tst	r3, r1
 8007ec6:	d034      	beq.n	8007f32 <__sflush_r+0x9e>
 8007ec8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	075b      	lsls	r3, r3, #29
 8007ece:	d506      	bpl.n	8007ede <__sflush_r+0x4a>
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	1ac0      	subs	r0, r0, r3
 8007ed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <__sflush_r+0x4a>
 8007eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007edc:	1ac0      	subs	r0, r0, r3
 8007ede:	0002      	movs	r2, r0
 8007ee0:	6a21      	ldr	r1, [r4, #32]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	0028      	movs	r0, r5
 8007ee6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007ee8:	47b8      	blx	r7
 8007eea:	89a1      	ldrh	r1, [r4, #12]
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d106      	bne.n	8007efe <__sflush_r+0x6a>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	2b1d      	cmp	r3, #29
 8007ef4:	d831      	bhi.n	8007f5a <__sflush_r+0xc6>
 8007ef6:	4a2c      	ldr	r2, [pc, #176]	; (8007fa8 <__sflush_r+0x114>)
 8007ef8:	40da      	lsrs	r2, r3
 8007efa:	07d3      	lsls	r3, r2, #31
 8007efc:	d52d      	bpl.n	8007f5a <__sflush_r+0xc6>
 8007efe:	2300      	movs	r3, #0
 8007f00:	6063      	str	r3, [r4, #4]
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	04cb      	lsls	r3, r1, #19
 8007f08:	d505      	bpl.n	8007f16 <__sflush_r+0x82>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d102      	bne.n	8007f14 <__sflush_r+0x80>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d100      	bne.n	8007f16 <__sflush_r+0x82>
 8007f14:	6560      	str	r0, [r4, #84]	; 0x54
 8007f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f18:	602e      	str	r6, [r5, #0]
 8007f1a:	2900      	cmp	r1, #0
 8007f1c:	d0c6      	beq.n	8007eac <__sflush_r+0x18>
 8007f1e:	0023      	movs	r3, r4
 8007f20:	3344      	adds	r3, #68	; 0x44
 8007f22:	4299      	cmp	r1, r3
 8007f24:	d002      	beq.n	8007f2c <__sflush_r+0x98>
 8007f26:	0028      	movs	r0, r5
 8007f28:	f000 f9f2 	bl	8008310 <_free_r>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	6360      	str	r0, [r4, #52]	; 0x34
 8007f30:	e7bd      	b.n	8007eae <__sflush_r+0x1a>
 8007f32:	2301      	movs	r3, #1
 8007f34:	0028      	movs	r0, r5
 8007f36:	6a21      	ldr	r1, [r4, #32]
 8007f38:	47b8      	blx	r7
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	d1c5      	bne.n	8007eca <__sflush_r+0x36>
 8007f3e:	682b      	ldr	r3, [r5, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0c2      	beq.n	8007eca <__sflush_r+0x36>
 8007f44:	2b1d      	cmp	r3, #29
 8007f46:	d001      	beq.n	8007f4c <__sflush_r+0xb8>
 8007f48:	2b16      	cmp	r3, #22
 8007f4a:	d101      	bne.n	8007f50 <__sflush_r+0xbc>
 8007f4c:	602e      	str	r6, [r5, #0]
 8007f4e:	e7ad      	b.n	8007eac <__sflush_r+0x18>
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	89a2      	ldrh	r2, [r4, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	81a3      	strh	r3, [r4, #12]
 8007f58:	e7a9      	b.n	8007eae <__sflush_r+0x1a>
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	e7fa      	b.n	8007f56 <__sflush_r+0xc2>
 8007f60:	690f      	ldr	r7, [r1, #16]
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	d0a2      	beq.n	8007eac <__sflush_r+0x18>
 8007f66:	680a      	ldr	r2, [r1, #0]
 8007f68:	600f      	str	r7, [r1, #0]
 8007f6a:	1bd2      	subs	r2, r2, r7
 8007f6c:	9201      	str	r2, [sp, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	079b      	lsls	r3, r3, #30
 8007f72:	d100      	bne.n	8007f76 <__sflush_r+0xe2>
 8007f74:	694a      	ldr	r2, [r1, #20]
 8007f76:	60a2      	str	r2, [r4, #8]
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	dc00      	bgt.n	8007f80 <__sflush_r+0xec>
 8007f7e:	e795      	b.n	8007eac <__sflush_r+0x18>
 8007f80:	003a      	movs	r2, r7
 8007f82:	0028      	movs	r0, r5
 8007f84:	9b01      	ldr	r3, [sp, #4]
 8007f86:	6a21      	ldr	r1, [r4, #32]
 8007f88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f8a:	47b0      	blx	r6
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	dc06      	bgt.n	8007f9e <__sflush_r+0x10a>
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	2001      	movs	r0, #1
 8007f94:	89a2      	ldrh	r2, [r4, #12]
 8007f96:	4240      	negs	r0, r0
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	e787      	b.n	8007eae <__sflush_r+0x1a>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	183f      	adds	r7, r7, r0
 8007fa2:	1a1b      	subs	r3, r3, r0
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	e7e7      	b.n	8007f78 <__sflush_r+0xe4>
 8007fa8:	20400001 	.word	0x20400001

08007fac <_fflush_r>:
 8007fac:	690b      	ldr	r3, [r1, #16]
 8007fae:	b570      	push	{r4, r5, r6, lr}
 8007fb0:	0005      	movs	r5, r0
 8007fb2:	000c      	movs	r4, r1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <_fflush_r+0x12>
 8007fb8:	2500      	movs	r5, #0
 8007fba:	0028      	movs	r0, r5
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d004      	beq.n	8007fcc <_fflush_r+0x20>
 8007fc2:	6983      	ldr	r3, [r0, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <_fflush_r+0x20>
 8007fc8:	f000 f892 	bl	80080f0 <__sinit>
 8007fcc:	4b14      	ldr	r3, [pc, #80]	; (8008020 <_fflush_r+0x74>)
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d11b      	bne.n	800800a <_fflush_r+0x5e>
 8007fd2:	686c      	ldr	r4, [r5, #4]
 8007fd4:	220c      	movs	r2, #12
 8007fd6:	5ea3      	ldrsh	r3, [r4, r2]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d0ed      	beq.n	8007fb8 <_fflush_r+0xc>
 8007fdc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fde:	07d2      	lsls	r2, r2, #31
 8007fe0:	d404      	bmi.n	8007fec <_fflush_r+0x40>
 8007fe2:	059b      	lsls	r3, r3, #22
 8007fe4:	d402      	bmi.n	8007fec <_fflush_r+0x40>
 8007fe6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe8:	f000 f923 	bl	8008232 <__retarget_lock_acquire_recursive>
 8007fec:	0028      	movs	r0, r5
 8007fee:	0021      	movs	r1, r4
 8007ff0:	f7ff ff50 	bl	8007e94 <__sflush_r>
 8007ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff6:	0005      	movs	r5, r0
 8007ff8:	07db      	lsls	r3, r3, #31
 8007ffa:	d4de      	bmi.n	8007fba <_fflush_r+0xe>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	059b      	lsls	r3, r3, #22
 8008000:	d4db      	bmi.n	8007fba <_fflush_r+0xe>
 8008002:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008004:	f000 f916 	bl	8008234 <__retarget_lock_release_recursive>
 8008008:	e7d7      	b.n	8007fba <_fflush_r+0xe>
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <_fflush_r+0x78>)
 800800c:	429c      	cmp	r4, r3
 800800e:	d101      	bne.n	8008014 <_fflush_r+0x68>
 8008010:	68ac      	ldr	r4, [r5, #8]
 8008012:	e7df      	b.n	8007fd4 <_fflush_r+0x28>
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <_fflush_r+0x7c>)
 8008016:	429c      	cmp	r4, r3
 8008018:	d1dc      	bne.n	8007fd4 <_fflush_r+0x28>
 800801a:	68ec      	ldr	r4, [r5, #12]
 800801c:	e7da      	b.n	8007fd4 <_fflush_r+0x28>
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	08008fbc 	.word	0x08008fbc
 8008024:	08008fdc 	.word	0x08008fdc
 8008028:	08008f9c 	.word	0x08008f9c

0800802c <std>:
 800802c:	2300      	movs	r3, #0
 800802e:	b510      	push	{r4, lr}
 8008030:	0004      	movs	r4, r0
 8008032:	6003      	str	r3, [r0, #0]
 8008034:	6043      	str	r3, [r0, #4]
 8008036:	6083      	str	r3, [r0, #8]
 8008038:	8181      	strh	r1, [r0, #12]
 800803a:	6643      	str	r3, [r0, #100]	; 0x64
 800803c:	0019      	movs	r1, r3
 800803e:	81c2      	strh	r2, [r0, #14]
 8008040:	6103      	str	r3, [r0, #16]
 8008042:	6143      	str	r3, [r0, #20]
 8008044:	6183      	str	r3, [r0, #24]
 8008046:	2208      	movs	r2, #8
 8008048:	305c      	adds	r0, #92	; 0x5c
 800804a:	f7ff fdb7 	bl	8007bbc <memset>
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <std+0x38>)
 8008050:	6224      	str	r4, [r4, #32]
 8008052:	6263      	str	r3, [r4, #36]	; 0x24
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <std+0x3c>)
 8008056:	62a3      	str	r3, [r4, #40]	; 0x28
 8008058:	4b04      	ldr	r3, [pc, #16]	; (800806c <std+0x40>)
 800805a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800805c:	4b04      	ldr	r3, [pc, #16]	; (8008070 <std+0x44>)
 800805e:	6323      	str	r3, [r4, #48]	; 0x30
 8008060:	bd10      	pop	{r4, pc}
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	08008ac1 	.word	0x08008ac1
 8008068:	08008ae9 	.word	0x08008ae9
 800806c:	08008b21 	.word	0x08008b21
 8008070:	08008b4d 	.word	0x08008b4d

08008074 <_cleanup_r>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4902      	ldr	r1, [pc, #8]	; (8008080 <_cleanup_r+0xc>)
 8008078:	f000 f8ba 	bl	80081f0 <_fwalk_reent>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	08007fad 	.word	0x08007fad

08008084 <__sfmoreglue>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	2568      	movs	r5, #104	; 0x68
 8008088:	1e4a      	subs	r2, r1, #1
 800808a:	4355      	muls	r5, r2
 800808c:	000e      	movs	r6, r1
 800808e:	0029      	movs	r1, r5
 8008090:	3174      	adds	r1, #116	; 0x74
 8008092:	f000 f9a9 	bl	80083e8 <_malloc_r>
 8008096:	1e04      	subs	r4, r0, #0
 8008098:	d008      	beq.n	80080ac <__sfmoreglue+0x28>
 800809a:	2100      	movs	r1, #0
 800809c:	002a      	movs	r2, r5
 800809e:	6001      	str	r1, [r0, #0]
 80080a0:	6046      	str	r6, [r0, #4]
 80080a2:	300c      	adds	r0, #12
 80080a4:	60a0      	str	r0, [r4, #8]
 80080a6:	3268      	adds	r2, #104	; 0x68
 80080a8:	f7ff fd88 	bl	8007bbc <memset>
 80080ac:	0020      	movs	r0, r4
 80080ae:	bd70      	pop	{r4, r5, r6, pc}

080080b0 <__sfp_lock_acquire>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	4802      	ldr	r0, [pc, #8]	; (80080bc <__sfp_lock_acquire+0xc>)
 80080b4:	f000 f8bd 	bl	8008232 <__retarget_lock_acquire_recursive>
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	46c0      	nop			; (mov r8, r8)
 80080bc:	200006b7 	.word	0x200006b7

080080c0 <__sfp_lock_release>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4802      	ldr	r0, [pc, #8]	; (80080cc <__sfp_lock_release+0xc>)
 80080c4:	f000 f8b6 	bl	8008234 <__retarget_lock_release_recursive>
 80080c8:	bd10      	pop	{r4, pc}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	200006b7 	.word	0x200006b7

080080d0 <__sinit_lock_acquire>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	4802      	ldr	r0, [pc, #8]	; (80080dc <__sinit_lock_acquire+0xc>)
 80080d4:	f000 f8ad 	bl	8008232 <__retarget_lock_acquire_recursive>
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	200006b8 	.word	0x200006b8

080080e0 <__sinit_lock_release>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	4802      	ldr	r0, [pc, #8]	; (80080ec <__sinit_lock_release+0xc>)
 80080e4:	f000 f8a6 	bl	8008234 <__retarget_lock_release_recursive>
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	200006b8 	.word	0x200006b8

080080f0 <__sinit>:
 80080f0:	b513      	push	{r0, r1, r4, lr}
 80080f2:	0004      	movs	r4, r0
 80080f4:	f7ff ffec 	bl	80080d0 <__sinit_lock_acquire>
 80080f8:	69a3      	ldr	r3, [r4, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <__sinit+0x14>
 80080fe:	f7ff ffef 	bl	80080e0 <__sinit_lock_release>
 8008102:	bd13      	pop	{r0, r1, r4, pc}
 8008104:	64a3      	str	r3, [r4, #72]	; 0x48
 8008106:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008108:	6523      	str	r3, [r4, #80]	; 0x50
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <__sinit+0x68>)
 800810c:	4a13      	ldr	r2, [pc, #76]	; (800815c <__sinit+0x6c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	62a2      	str	r2, [r4, #40]	; 0x28
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	42a3      	cmp	r3, r4
 8008116:	d101      	bne.n	800811c <__sinit+0x2c>
 8008118:	2301      	movs	r3, #1
 800811a:	61a3      	str	r3, [r4, #24]
 800811c:	0020      	movs	r0, r4
 800811e:	f000 f81f 	bl	8008160 <__sfp>
 8008122:	6060      	str	r0, [r4, #4]
 8008124:	0020      	movs	r0, r4
 8008126:	f000 f81b 	bl	8008160 <__sfp>
 800812a:	60a0      	str	r0, [r4, #8]
 800812c:	0020      	movs	r0, r4
 800812e:	f000 f817 	bl	8008160 <__sfp>
 8008132:	2200      	movs	r2, #0
 8008134:	2104      	movs	r1, #4
 8008136:	60e0      	str	r0, [r4, #12]
 8008138:	6860      	ldr	r0, [r4, #4]
 800813a:	f7ff ff77 	bl	800802c <std>
 800813e:	2201      	movs	r2, #1
 8008140:	2109      	movs	r1, #9
 8008142:	68a0      	ldr	r0, [r4, #8]
 8008144:	f7ff ff72 	bl	800802c <std>
 8008148:	2202      	movs	r2, #2
 800814a:	2112      	movs	r1, #18
 800814c:	68e0      	ldr	r0, [r4, #12]
 800814e:	f7ff ff6d 	bl	800802c <std>
 8008152:	2301      	movs	r3, #1
 8008154:	61a3      	str	r3, [r4, #24]
 8008156:	e7d2      	b.n	80080fe <__sinit+0xe>
 8008158:	08008f98 	.word	0x08008f98
 800815c:	08008075 	.word	0x08008075

08008160 <__sfp>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	0007      	movs	r7, r0
 8008164:	f7ff ffa4 	bl	80080b0 <__sfp_lock_acquire>
 8008168:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <__sfp+0x88>)
 800816a:	681e      	ldr	r6, [r3, #0]
 800816c:	69b3      	ldr	r3, [r6, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <__sfp+0x18>
 8008172:	0030      	movs	r0, r6
 8008174:	f7ff ffbc 	bl	80080f0 <__sinit>
 8008178:	3648      	adds	r6, #72	; 0x48
 800817a:	68b4      	ldr	r4, [r6, #8]
 800817c:	6873      	ldr	r3, [r6, #4]
 800817e:	3b01      	subs	r3, #1
 8008180:	d504      	bpl.n	800818c <__sfp+0x2c>
 8008182:	6833      	ldr	r3, [r6, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d022      	beq.n	80081ce <__sfp+0x6e>
 8008188:	6836      	ldr	r6, [r6, #0]
 800818a:	e7f6      	b.n	800817a <__sfp+0x1a>
 800818c:	220c      	movs	r2, #12
 800818e:	5ea5      	ldrsh	r5, [r4, r2]
 8008190:	2d00      	cmp	r5, #0
 8008192:	d11a      	bne.n	80081ca <__sfp+0x6a>
 8008194:	0020      	movs	r0, r4
 8008196:	4b15      	ldr	r3, [pc, #84]	; (80081ec <__sfp+0x8c>)
 8008198:	3058      	adds	r0, #88	; 0x58
 800819a:	60e3      	str	r3, [r4, #12]
 800819c:	6665      	str	r5, [r4, #100]	; 0x64
 800819e:	f000 f847 	bl	8008230 <__retarget_lock_init_recursive>
 80081a2:	f7ff ff8d 	bl	80080c0 <__sfp_lock_release>
 80081a6:	0020      	movs	r0, r4
 80081a8:	2208      	movs	r2, #8
 80081aa:	0029      	movs	r1, r5
 80081ac:	6025      	str	r5, [r4, #0]
 80081ae:	60a5      	str	r5, [r4, #8]
 80081b0:	6065      	str	r5, [r4, #4]
 80081b2:	6125      	str	r5, [r4, #16]
 80081b4:	6165      	str	r5, [r4, #20]
 80081b6:	61a5      	str	r5, [r4, #24]
 80081b8:	305c      	adds	r0, #92	; 0x5c
 80081ba:	f7ff fcff 	bl	8007bbc <memset>
 80081be:	6365      	str	r5, [r4, #52]	; 0x34
 80081c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80081c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80081c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80081c6:	0020      	movs	r0, r4
 80081c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ca:	3468      	adds	r4, #104	; 0x68
 80081cc:	e7d7      	b.n	800817e <__sfp+0x1e>
 80081ce:	2104      	movs	r1, #4
 80081d0:	0038      	movs	r0, r7
 80081d2:	f7ff ff57 	bl	8008084 <__sfmoreglue>
 80081d6:	1e04      	subs	r4, r0, #0
 80081d8:	6030      	str	r0, [r6, #0]
 80081da:	d1d5      	bne.n	8008188 <__sfp+0x28>
 80081dc:	f7ff ff70 	bl	80080c0 <__sfp_lock_release>
 80081e0:	230c      	movs	r3, #12
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	e7ef      	b.n	80081c6 <__sfp+0x66>
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	08008f98 	.word	0x08008f98
 80081ec:	ffff0001 	.word	0xffff0001

080081f0 <_fwalk_reent>:
 80081f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081f2:	0004      	movs	r4, r0
 80081f4:	0006      	movs	r6, r0
 80081f6:	2700      	movs	r7, #0
 80081f8:	9101      	str	r1, [sp, #4]
 80081fa:	3448      	adds	r4, #72	; 0x48
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	68a5      	ldr	r5, [r4, #8]
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	3b01      	subs	r3, #1
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	d504      	bpl.n	8008214 <_fwalk_reent+0x24>
 800820a:	6824      	ldr	r4, [r4, #0]
 800820c:	2c00      	cmp	r4, #0
 800820e:	d1f5      	bne.n	80081fc <_fwalk_reent+0xc>
 8008210:	0038      	movs	r0, r7
 8008212:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008214:	89ab      	ldrh	r3, [r5, #12]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d908      	bls.n	800822c <_fwalk_reent+0x3c>
 800821a:	220e      	movs	r2, #14
 800821c:	5eab      	ldrsh	r3, [r5, r2]
 800821e:	3301      	adds	r3, #1
 8008220:	d004      	beq.n	800822c <_fwalk_reent+0x3c>
 8008222:	0029      	movs	r1, r5
 8008224:	0030      	movs	r0, r6
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	4798      	blx	r3
 800822a:	4307      	orrs	r7, r0
 800822c:	3568      	adds	r5, #104	; 0x68
 800822e:	e7e8      	b.n	8008202 <_fwalk_reent+0x12>

08008230 <__retarget_lock_init_recursive>:
 8008230:	4770      	bx	lr

08008232 <__retarget_lock_acquire_recursive>:
 8008232:	4770      	bx	lr

08008234 <__retarget_lock_release_recursive>:
 8008234:	4770      	bx	lr
	...

08008238 <__swhatbuf_r>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	000e      	movs	r6, r1
 800823c:	001d      	movs	r5, r3
 800823e:	230e      	movs	r3, #14
 8008240:	5ec9      	ldrsh	r1, [r1, r3]
 8008242:	0014      	movs	r4, r2
 8008244:	b096      	sub	sp, #88	; 0x58
 8008246:	2900      	cmp	r1, #0
 8008248:	da08      	bge.n	800825c <__swhatbuf_r+0x24>
 800824a:	220c      	movs	r2, #12
 800824c:	5eb3      	ldrsh	r3, [r6, r2]
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	061b      	lsls	r3, r3, #24
 8008254:	d411      	bmi.n	800827a <__swhatbuf_r+0x42>
 8008256:	2380      	movs	r3, #128	; 0x80
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	e00f      	b.n	800827c <__swhatbuf_r+0x44>
 800825c:	466a      	mov	r2, sp
 800825e:	f000 fca1 	bl	8008ba4 <_fstat_r>
 8008262:	2800      	cmp	r0, #0
 8008264:	dbf1      	blt.n	800824a <__swhatbuf_r+0x12>
 8008266:	23f0      	movs	r3, #240	; 0xf0
 8008268:	9901      	ldr	r1, [sp, #4]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	4019      	ands	r1, r3
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <__swhatbuf_r+0x4c>)
 8008270:	18c9      	adds	r1, r1, r3
 8008272:	424b      	negs	r3, r1
 8008274:	4159      	adcs	r1, r3
 8008276:	6029      	str	r1, [r5, #0]
 8008278:	e7ed      	b.n	8008256 <__swhatbuf_r+0x1e>
 800827a:	2340      	movs	r3, #64	; 0x40
 800827c:	2000      	movs	r0, #0
 800827e:	6023      	str	r3, [r4, #0]
 8008280:	b016      	add	sp, #88	; 0x58
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	ffffe000 	.word	0xffffe000

08008288 <__smakebuf_r>:
 8008288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800828a:	2602      	movs	r6, #2
 800828c:	898b      	ldrh	r3, [r1, #12]
 800828e:	0005      	movs	r5, r0
 8008290:	000c      	movs	r4, r1
 8008292:	4233      	tst	r3, r6
 8008294:	d006      	beq.n	80082a4 <__smakebuf_r+0x1c>
 8008296:	0023      	movs	r3, r4
 8008298:	3347      	adds	r3, #71	; 0x47
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	2301      	movs	r3, #1
 80082a0:	6163      	str	r3, [r4, #20]
 80082a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80082a4:	466a      	mov	r2, sp
 80082a6:	ab01      	add	r3, sp, #4
 80082a8:	f7ff ffc6 	bl	8008238 <__swhatbuf_r>
 80082ac:	9900      	ldr	r1, [sp, #0]
 80082ae:	0007      	movs	r7, r0
 80082b0:	0028      	movs	r0, r5
 80082b2:	f000 f899 	bl	80083e8 <_malloc_r>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d108      	bne.n	80082cc <__smakebuf_r+0x44>
 80082ba:	220c      	movs	r2, #12
 80082bc:	5ea3      	ldrsh	r3, [r4, r2]
 80082be:	059a      	lsls	r2, r3, #22
 80082c0:	d4ef      	bmi.n	80082a2 <__smakebuf_r+0x1a>
 80082c2:	2203      	movs	r2, #3
 80082c4:	4393      	bics	r3, r2
 80082c6:	431e      	orrs	r6, r3
 80082c8:	81a6      	strh	r6, [r4, #12]
 80082ca:	e7e4      	b.n	8008296 <__smakebuf_r+0xe>
 80082cc:	4b0f      	ldr	r3, [pc, #60]	; (800830c <__smakebuf_r+0x84>)
 80082ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80082d0:	2380      	movs	r3, #128	; 0x80
 80082d2:	89a2      	ldrh	r2, [r4, #12]
 80082d4:	6020      	str	r0, [r4, #0]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	6120      	str	r0, [r4, #16]
 80082de:	6163      	str	r3, [r4, #20]
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <__smakebuf_r+0x7a>
 80082e6:	0028      	movs	r0, r5
 80082e8:	230e      	movs	r3, #14
 80082ea:	5ee1      	ldrsh	r1, [r4, r3]
 80082ec:	f000 fc6c 	bl	8008bc8 <_isatty_r>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d006      	beq.n	8008302 <__smakebuf_r+0x7a>
 80082f4:	2203      	movs	r2, #3
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	4393      	bics	r3, r2
 80082fa:	001a      	movs	r2, r3
 80082fc:	2301      	movs	r3, #1
 80082fe:	4313      	orrs	r3, r2
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	89a0      	ldrh	r0, [r4, #12]
 8008304:	4307      	orrs	r7, r0
 8008306:	81a7      	strh	r7, [r4, #12]
 8008308:	e7cb      	b.n	80082a2 <__smakebuf_r+0x1a>
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	08008075 	.word	0x08008075

08008310 <_free_r>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	0005      	movs	r5, r0
 8008314:	2900      	cmp	r1, #0
 8008316:	d010      	beq.n	800833a <_free_r+0x2a>
 8008318:	1f0c      	subs	r4, r1, #4
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	da00      	bge.n	8008322 <_free_r+0x12>
 8008320:	18e4      	adds	r4, r4, r3
 8008322:	0028      	movs	r0, r5
 8008324:	f000 fc82 	bl	8008c2c <__malloc_lock>
 8008328:	4a1d      	ldr	r2, [pc, #116]	; (80083a0 <_free_r+0x90>)
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d105      	bne.n	800833c <_free_r+0x2c>
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	6014      	str	r4, [r2, #0]
 8008334:	0028      	movs	r0, r5
 8008336:	f000 fc81 	bl	8008c3c <__malloc_unlock>
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	42a3      	cmp	r3, r4
 800833e:	d908      	bls.n	8008352 <_free_r+0x42>
 8008340:	6821      	ldr	r1, [r4, #0]
 8008342:	1860      	adds	r0, r4, r1
 8008344:	4283      	cmp	r3, r0
 8008346:	d1f3      	bne.n	8008330 <_free_r+0x20>
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	1841      	adds	r1, r0, r1
 800834e:	6021      	str	r1, [r4, #0]
 8008350:	e7ee      	b.n	8008330 <_free_r+0x20>
 8008352:	001a      	movs	r2, r3
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <_free_r+0x4e>
 800835a:	42a3      	cmp	r3, r4
 800835c:	d9f9      	bls.n	8008352 <_free_r+0x42>
 800835e:	6811      	ldr	r1, [r2, #0]
 8008360:	1850      	adds	r0, r2, r1
 8008362:	42a0      	cmp	r0, r4
 8008364:	d10b      	bne.n	800837e <_free_r+0x6e>
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	1809      	adds	r1, r1, r0
 800836a:	1850      	adds	r0, r2, r1
 800836c:	6011      	str	r1, [r2, #0]
 800836e:	4283      	cmp	r3, r0
 8008370:	d1e0      	bne.n	8008334 <_free_r+0x24>
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	1841      	adds	r1, r0, r1
 8008378:	6011      	str	r1, [r2, #0]
 800837a:	6053      	str	r3, [r2, #4]
 800837c:	e7da      	b.n	8008334 <_free_r+0x24>
 800837e:	42a0      	cmp	r0, r4
 8008380:	d902      	bls.n	8008388 <_free_r+0x78>
 8008382:	230c      	movs	r3, #12
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	e7d5      	b.n	8008334 <_free_r+0x24>
 8008388:	6821      	ldr	r1, [r4, #0]
 800838a:	1860      	adds	r0, r4, r1
 800838c:	4283      	cmp	r3, r0
 800838e:	d103      	bne.n	8008398 <_free_r+0x88>
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	1841      	adds	r1, r0, r1
 8008396:	6021      	str	r1, [r4, #0]
 8008398:	6063      	str	r3, [r4, #4]
 800839a:	6054      	str	r4, [r2, #4]
 800839c:	e7ca      	b.n	8008334 <_free_r+0x24>
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	200006bc 	.word	0x200006bc

080083a4 <sbrk_aligned>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	4e0f      	ldr	r6, [pc, #60]	; (80083e4 <sbrk_aligned+0x40>)
 80083a8:	000d      	movs	r5, r1
 80083aa:	6831      	ldr	r1, [r6, #0]
 80083ac:	0004      	movs	r4, r0
 80083ae:	2900      	cmp	r1, #0
 80083b0:	d102      	bne.n	80083b8 <sbrk_aligned+0x14>
 80083b2:	f000 fb73 	bl	8008a9c <_sbrk_r>
 80083b6:	6030      	str	r0, [r6, #0]
 80083b8:	0029      	movs	r1, r5
 80083ba:	0020      	movs	r0, r4
 80083bc:	f000 fb6e 	bl	8008a9c <_sbrk_r>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d00a      	beq.n	80083da <sbrk_aligned+0x36>
 80083c4:	2303      	movs	r3, #3
 80083c6:	1cc5      	adds	r5, r0, #3
 80083c8:	439d      	bics	r5, r3
 80083ca:	42a8      	cmp	r0, r5
 80083cc:	d007      	beq.n	80083de <sbrk_aligned+0x3a>
 80083ce:	1a29      	subs	r1, r5, r0
 80083d0:	0020      	movs	r0, r4
 80083d2:	f000 fb63 	bl	8008a9c <_sbrk_r>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d101      	bne.n	80083de <sbrk_aligned+0x3a>
 80083da:	2501      	movs	r5, #1
 80083dc:	426d      	negs	r5, r5
 80083de:	0028      	movs	r0, r5
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	200006c0 	.word	0x200006c0

080083e8 <_malloc_r>:
 80083e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ea:	2203      	movs	r2, #3
 80083ec:	1ccb      	adds	r3, r1, #3
 80083ee:	4393      	bics	r3, r2
 80083f0:	3308      	adds	r3, #8
 80083f2:	0006      	movs	r6, r0
 80083f4:	001f      	movs	r7, r3
 80083f6:	2b0c      	cmp	r3, #12
 80083f8:	d232      	bcs.n	8008460 <_malloc_r+0x78>
 80083fa:	270c      	movs	r7, #12
 80083fc:	42b9      	cmp	r1, r7
 80083fe:	d831      	bhi.n	8008464 <_malloc_r+0x7c>
 8008400:	0030      	movs	r0, r6
 8008402:	f000 fc13 	bl	8008c2c <__malloc_lock>
 8008406:	4d32      	ldr	r5, [pc, #200]	; (80084d0 <_malloc_r+0xe8>)
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	001c      	movs	r4, r3
 800840c:	2c00      	cmp	r4, #0
 800840e:	d12e      	bne.n	800846e <_malloc_r+0x86>
 8008410:	0039      	movs	r1, r7
 8008412:	0030      	movs	r0, r6
 8008414:	f7ff ffc6 	bl	80083a4 <sbrk_aligned>
 8008418:	0004      	movs	r4, r0
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	d11e      	bne.n	800845c <_malloc_r+0x74>
 800841e:	682c      	ldr	r4, [r5, #0]
 8008420:	0025      	movs	r5, r4
 8008422:	2d00      	cmp	r5, #0
 8008424:	d14a      	bne.n	80084bc <_malloc_r+0xd4>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	0029      	movs	r1, r5
 800842a:	18e3      	adds	r3, r4, r3
 800842c:	0030      	movs	r0, r6
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	f000 fb34 	bl	8008a9c <_sbrk_r>
 8008434:	9b01      	ldr	r3, [sp, #4]
 8008436:	4283      	cmp	r3, r0
 8008438:	d143      	bne.n	80084c2 <_malloc_r+0xda>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	3703      	adds	r7, #3
 800843e:	1aff      	subs	r7, r7, r3
 8008440:	2303      	movs	r3, #3
 8008442:	439f      	bics	r7, r3
 8008444:	3708      	adds	r7, #8
 8008446:	2f0c      	cmp	r7, #12
 8008448:	d200      	bcs.n	800844c <_malloc_r+0x64>
 800844a:	270c      	movs	r7, #12
 800844c:	0039      	movs	r1, r7
 800844e:	0030      	movs	r0, r6
 8008450:	f7ff ffa8 	bl	80083a4 <sbrk_aligned>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d034      	beq.n	80084c2 <_malloc_r+0xda>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	19df      	adds	r7, r3, r7
 800845c:	6027      	str	r7, [r4, #0]
 800845e:	e013      	b.n	8008488 <_malloc_r+0xa0>
 8008460:	2b00      	cmp	r3, #0
 8008462:	dacb      	bge.n	80083fc <_malloc_r+0x14>
 8008464:	230c      	movs	r3, #12
 8008466:	2500      	movs	r5, #0
 8008468:	6033      	str	r3, [r6, #0]
 800846a:	0028      	movs	r0, r5
 800846c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	1bd1      	subs	r1, r2, r7
 8008472:	d420      	bmi.n	80084b6 <_malloc_r+0xce>
 8008474:	290b      	cmp	r1, #11
 8008476:	d917      	bls.n	80084a8 <_malloc_r+0xc0>
 8008478:	19e2      	adds	r2, r4, r7
 800847a:	6027      	str	r7, [r4, #0]
 800847c:	42a3      	cmp	r3, r4
 800847e:	d111      	bne.n	80084a4 <_malloc_r+0xbc>
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	6863      	ldr	r3, [r4, #4]
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	6053      	str	r3, [r2, #4]
 8008488:	0030      	movs	r0, r6
 800848a:	0025      	movs	r5, r4
 800848c:	f000 fbd6 	bl	8008c3c <__malloc_unlock>
 8008490:	2207      	movs	r2, #7
 8008492:	350b      	adds	r5, #11
 8008494:	1d23      	adds	r3, r4, #4
 8008496:	4395      	bics	r5, r2
 8008498:	1aea      	subs	r2, r5, r3
 800849a:	429d      	cmp	r5, r3
 800849c:	d0e5      	beq.n	800846a <_malloc_r+0x82>
 800849e:	1b5b      	subs	r3, r3, r5
 80084a0:	50a3      	str	r3, [r4, r2]
 80084a2:	e7e2      	b.n	800846a <_malloc_r+0x82>
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	e7ec      	b.n	8008482 <_malloc_r+0x9a>
 80084a8:	6862      	ldr	r2, [r4, #4]
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	d101      	bne.n	80084b2 <_malloc_r+0xca>
 80084ae:	602a      	str	r2, [r5, #0]
 80084b0:	e7ea      	b.n	8008488 <_malloc_r+0xa0>
 80084b2:	605a      	str	r2, [r3, #4]
 80084b4:	e7e8      	b.n	8008488 <_malloc_r+0xa0>
 80084b6:	0023      	movs	r3, r4
 80084b8:	6864      	ldr	r4, [r4, #4]
 80084ba:	e7a7      	b.n	800840c <_malloc_r+0x24>
 80084bc:	002c      	movs	r4, r5
 80084be:	686d      	ldr	r5, [r5, #4]
 80084c0:	e7af      	b.n	8008422 <_malloc_r+0x3a>
 80084c2:	230c      	movs	r3, #12
 80084c4:	0030      	movs	r0, r6
 80084c6:	6033      	str	r3, [r6, #0]
 80084c8:	f000 fbb8 	bl	8008c3c <__malloc_unlock>
 80084cc:	e7cd      	b.n	800846a <_malloc_r+0x82>
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	200006bc 	.word	0x200006bc

080084d4 <__sfputc_r>:
 80084d4:	6893      	ldr	r3, [r2, #8]
 80084d6:	b510      	push	{r4, lr}
 80084d8:	3b01      	subs	r3, #1
 80084da:	6093      	str	r3, [r2, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da04      	bge.n	80084ea <__sfputc_r+0x16>
 80084e0:	6994      	ldr	r4, [r2, #24]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	db07      	blt.n	80084f6 <__sfputc_r+0x22>
 80084e6:	290a      	cmp	r1, #10
 80084e8:	d005      	beq.n	80084f6 <__sfputc_r+0x22>
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	1c58      	adds	r0, r3, #1
 80084ee:	6010      	str	r0, [r2, #0]
 80084f0:	7019      	strb	r1, [r3, #0]
 80084f2:	0008      	movs	r0, r1
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	f7ff fbff 	bl	8007cf8 <__swbuf_r>
 80084fa:	0001      	movs	r1, r0
 80084fc:	e7f9      	b.n	80084f2 <__sfputc_r+0x1e>

080084fe <__sfputs_r>:
 80084fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008500:	0006      	movs	r6, r0
 8008502:	000f      	movs	r7, r1
 8008504:	0014      	movs	r4, r2
 8008506:	18d5      	adds	r5, r2, r3
 8008508:	42ac      	cmp	r4, r5
 800850a:	d101      	bne.n	8008510 <__sfputs_r+0x12>
 800850c:	2000      	movs	r0, #0
 800850e:	e007      	b.n	8008520 <__sfputs_r+0x22>
 8008510:	7821      	ldrb	r1, [r4, #0]
 8008512:	003a      	movs	r2, r7
 8008514:	0030      	movs	r0, r6
 8008516:	f7ff ffdd 	bl	80084d4 <__sfputc_r>
 800851a:	3401      	adds	r4, #1
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d1f3      	bne.n	8008508 <__sfputs_r+0xa>
 8008520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008524 <_vfiprintf_r>:
 8008524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008526:	b0a1      	sub	sp, #132	; 0x84
 8008528:	0006      	movs	r6, r0
 800852a:	000c      	movs	r4, r1
 800852c:	001f      	movs	r7, r3
 800852e:	9203      	str	r2, [sp, #12]
 8008530:	2800      	cmp	r0, #0
 8008532:	d004      	beq.n	800853e <_vfiprintf_r+0x1a>
 8008534:	6983      	ldr	r3, [r0, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <_vfiprintf_r+0x1a>
 800853a:	f7ff fdd9 	bl	80080f0 <__sinit>
 800853e:	4b8e      	ldr	r3, [pc, #568]	; (8008778 <_vfiprintf_r+0x254>)
 8008540:	429c      	cmp	r4, r3
 8008542:	d11c      	bne.n	800857e <_vfiprintf_r+0x5a>
 8008544:	6874      	ldr	r4, [r6, #4]
 8008546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008548:	07db      	lsls	r3, r3, #31
 800854a:	d405      	bmi.n	8008558 <_vfiprintf_r+0x34>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	059b      	lsls	r3, r3, #22
 8008550:	d402      	bmi.n	8008558 <_vfiprintf_r+0x34>
 8008552:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008554:	f7ff fe6d 	bl	8008232 <__retarget_lock_acquire_recursive>
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	071b      	lsls	r3, r3, #28
 800855c:	d502      	bpl.n	8008564 <_vfiprintf_r+0x40>
 800855e:	6923      	ldr	r3, [r4, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11d      	bne.n	80085a0 <_vfiprintf_r+0x7c>
 8008564:	0021      	movs	r1, r4
 8008566:	0030      	movs	r0, r6
 8008568:	f7ff fc1c 	bl	8007da4 <__swsetup_r>
 800856c:	2800      	cmp	r0, #0
 800856e:	d017      	beq.n	80085a0 <_vfiprintf_r+0x7c>
 8008570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008572:	07db      	lsls	r3, r3, #31
 8008574:	d50d      	bpl.n	8008592 <_vfiprintf_r+0x6e>
 8008576:	2001      	movs	r0, #1
 8008578:	4240      	negs	r0, r0
 800857a:	b021      	add	sp, #132	; 0x84
 800857c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800857e:	4b7f      	ldr	r3, [pc, #508]	; (800877c <_vfiprintf_r+0x258>)
 8008580:	429c      	cmp	r4, r3
 8008582:	d101      	bne.n	8008588 <_vfiprintf_r+0x64>
 8008584:	68b4      	ldr	r4, [r6, #8]
 8008586:	e7de      	b.n	8008546 <_vfiprintf_r+0x22>
 8008588:	4b7d      	ldr	r3, [pc, #500]	; (8008780 <_vfiprintf_r+0x25c>)
 800858a:	429c      	cmp	r4, r3
 800858c:	d1db      	bne.n	8008546 <_vfiprintf_r+0x22>
 800858e:	68f4      	ldr	r4, [r6, #12]
 8008590:	e7d9      	b.n	8008546 <_vfiprintf_r+0x22>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	059b      	lsls	r3, r3, #22
 8008596:	d4ee      	bmi.n	8008576 <_vfiprintf_r+0x52>
 8008598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800859a:	f7ff fe4b 	bl	8008234 <__retarget_lock_release_recursive>
 800859e:	e7ea      	b.n	8008576 <_vfiprintf_r+0x52>
 80085a0:	2300      	movs	r3, #0
 80085a2:	ad08      	add	r5, sp, #32
 80085a4:	616b      	str	r3, [r5, #20]
 80085a6:	3320      	adds	r3, #32
 80085a8:	766b      	strb	r3, [r5, #25]
 80085aa:	3310      	adds	r3, #16
 80085ac:	76ab      	strb	r3, [r5, #26]
 80085ae:	9707      	str	r7, [sp, #28]
 80085b0:	9f03      	ldr	r7, [sp, #12]
 80085b2:	783b      	ldrb	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <_vfiprintf_r+0x98>
 80085b8:	2b25      	cmp	r3, #37	; 0x25
 80085ba:	d14e      	bne.n	800865a <_vfiprintf_r+0x136>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	1afb      	subs	r3, r7, r3
 80085c0:	9305      	str	r3, [sp, #20]
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	429f      	cmp	r7, r3
 80085c6:	d00d      	beq.n	80085e4 <_vfiprintf_r+0xc0>
 80085c8:	9b05      	ldr	r3, [sp, #20]
 80085ca:	0021      	movs	r1, r4
 80085cc:	0030      	movs	r0, r6
 80085ce:	9a03      	ldr	r2, [sp, #12]
 80085d0:	f7ff ff95 	bl	80084fe <__sfputs_r>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d100      	bne.n	80085da <_vfiprintf_r+0xb6>
 80085d8:	e0b5      	b.n	8008746 <_vfiprintf_r+0x222>
 80085da:	696a      	ldr	r2, [r5, #20]
 80085dc:	9b05      	ldr	r3, [sp, #20]
 80085de:	4694      	mov	ip, r2
 80085e0:	4463      	add	r3, ip
 80085e2:	616b      	str	r3, [r5, #20]
 80085e4:	783b      	ldrb	r3, [r7, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d100      	bne.n	80085ec <_vfiprintf_r+0xc8>
 80085ea:	e0ac      	b.n	8008746 <_vfiprintf_r+0x222>
 80085ec:	2201      	movs	r2, #1
 80085ee:	1c7b      	adds	r3, r7, #1
 80085f0:	9303      	str	r3, [sp, #12]
 80085f2:	2300      	movs	r3, #0
 80085f4:	4252      	negs	r2, r2
 80085f6:	606a      	str	r2, [r5, #4]
 80085f8:	a904      	add	r1, sp, #16
 80085fa:	3254      	adds	r2, #84	; 0x54
 80085fc:	1852      	adds	r2, r2, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	60eb      	str	r3, [r5, #12]
 8008602:	60ab      	str	r3, [r5, #8]
 8008604:	7013      	strb	r3, [r2, #0]
 8008606:	65ab      	str	r3, [r5, #88]	; 0x58
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	2205      	movs	r2, #5
 800860c:	7819      	ldrb	r1, [r3, #0]
 800860e:	485d      	ldr	r0, [pc, #372]	; (8008784 <_vfiprintf_r+0x260>)
 8008610:	f000 fb00 	bl	8008c14 <memchr>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	1c5f      	adds	r7, r3, #1
 8008618:	2800      	cmp	r0, #0
 800861a:	d120      	bne.n	800865e <_vfiprintf_r+0x13a>
 800861c:	682a      	ldr	r2, [r5, #0]
 800861e:	06d3      	lsls	r3, r2, #27
 8008620:	d504      	bpl.n	800862c <_vfiprintf_r+0x108>
 8008622:	2353      	movs	r3, #83	; 0x53
 8008624:	a904      	add	r1, sp, #16
 8008626:	185b      	adds	r3, r3, r1
 8008628:	2120      	movs	r1, #32
 800862a:	7019      	strb	r1, [r3, #0]
 800862c:	0713      	lsls	r3, r2, #28
 800862e:	d504      	bpl.n	800863a <_vfiprintf_r+0x116>
 8008630:	2353      	movs	r3, #83	; 0x53
 8008632:	a904      	add	r1, sp, #16
 8008634:	185b      	adds	r3, r3, r1
 8008636:	212b      	movs	r1, #43	; 0x2b
 8008638:	7019      	strb	r1, [r3, #0]
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b2a      	cmp	r3, #42	; 0x2a
 8008640:	d016      	beq.n	8008670 <_vfiprintf_r+0x14c>
 8008642:	2100      	movs	r1, #0
 8008644:	68eb      	ldr	r3, [r5, #12]
 8008646:	9f03      	ldr	r7, [sp, #12]
 8008648:	783a      	ldrb	r2, [r7, #0]
 800864a:	1c78      	adds	r0, r7, #1
 800864c:	3a30      	subs	r2, #48	; 0x30
 800864e:	4684      	mov	ip, r0
 8008650:	2a09      	cmp	r2, #9
 8008652:	d94f      	bls.n	80086f4 <_vfiprintf_r+0x1d0>
 8008654:	2900      	cmp	r1, #0
 8008656:	d111      	bne.n	800867c <_vfiprintf_r+0x158>
 8008658:	e017      	b.n	800868a <_vfiprintf_r+0x166>
 800865a:	3701      	adds	r7, #1
 800865c:	e7a9      	b.n	80085b2 <_vfiprintf_r+0x8e>
 800865e:	4b49      	ldr	r3, [pc, #292]	; (8008784 <_vfiprintf_r+0x260>)
 8008660:	682a      	ldr	r2, [r5, #0]
 8008662:	1ac0      	subs	r0, r0, r3
 8008664:	2301      	movs	r3, #1
 8008666:	4083      	lsls	r3, r0
 8008668:	4313      	orrs	r3, r2
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	9703      	str	r7, [sp, #12]
 800866e:	e7cb      	b.n	8008608 <_vfiprintf_r+0xe4>
 8008670:	9b07      	ldr	r3, [sp, #28]
 8008672:	1d19      	adds	r1, r3, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	9107      	str	r1, [sp, #28]
 8008678:	2b00      	cmp	r3, #0
 800867a:	db01      	blt.n	8008680 <_vfiprintf_r+0x15c>
 800867c:	930b      	str	r3, [sp, #44]	; 0x2c
 800867e:	e004      	b.n	800868a <_vfiprintf_r+0x166>
 8008680:	425b      	negs	r3, r3
 8008682:	60eb      	str	r3, [r5, #12]
 8008684:	2302      	movs	r3, #2
 8008686:	4313      	orrs	r3, r2
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	783b      	ldrb	r3, [r7, #0]
 800868c:	2b2e      	cmp	r3, #46	; 0x2e
 800868e:	d10a      	bne.n	80086a6 <_vfiprintf_r+0x182>
 8008690:	787b      	ldrb	r3, [r7, #1]
 8008692:	2b2a      	cmp	r3, #42	; 0x2a
 8008694:	d137      	bne.n	8008706 <_vfiprintf_r+0x1e2>
 8008696:	9b07      	ldr	r3, [sp, #28]
 8008698:	3702      	adds	r7, #2
 800869a:	1d1a      	adds	r2, r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	9207      	str	r2, [sp, #28]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	db2d      	blt.n	8008700 <_vfiprintf_r+0x1dc>
 80086a4:	9309      	str	r3, [sp, #36]	; 0x24
 80086a6:	2203      	movs	r2, #3
 80086a8:	7839      	ldrb	r1, [r7, #0]
 80086aa:	4837      	ldr	r0, [pc, #220]	; (8008788 <_vfiprintf_r+0x264>)
 80086ac:	f000 fab2 	bl	8008c14 <memchr>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d007      	beq.n	80086c4 <_vfiprintf_r+0x1a0>
 80086b4:	4b34      	ldr	r3, [pc, #208]	; (8008788 <_vfiprintf_r+0x264>)
 80086b6:	682a      	ldr	r2, [r5, #0]
 80086b8:	1ac0      	subs	r0, r0, r3
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	4083      	lsls	r3, r0
 80086be:	4313      	orrs	r3, r2
 80086c0:	3701      	adds	r7, #1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	7839      	ldrb	r1, [r7, #0]
 80086c6:	1c7b      	adds	r3, r7, #1
 80086c8:	2206      	movs	r2, #6
 80086ca:	4830      	ldr	r0, [pc, #192]	; (800878c <_vfiprintf_r+0x268>)
 80086cc:	9303      	str	r3, [sp, #12]
 80086ce:	7629      	strb	r1, [r5, #24]
 80086d0:	f000 faa0 	bl	8008c14 <memchr>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d045      	beq.n	8008764 <_vfiprintf_r+0x240>
 80086d8:	4b2d      	ldr	r3, [pc, #180]	; (8008790 <_vfiprintf_r+0x26c>)
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d127      	bne.n	800872e <_vfiprintf_r+0x20a>
 80086de:	2207      	movs	r2, #7
 80086e0:	9b07      	ldr	r3, [sp, #28]
 80086e2:	3307      	adds	r3, #7
 80086e4:	4393      	bics	r3, r2
 80086e6:	3308      	adds	r3, #8
 80086e8:	9307      	str	r3, [sp, #28]
 80086ea:	696b      	ldr	r3, [r5, #20]
 80086ec:	9a04      	ldr	r2, [sp, #16]
 80086ee:	189b      	adds	r3, r3, r2
 80086f0:	616b      	str	r3, [r5, #20]
 80086f2:	e75d      	b.n	80085b0 <_vfiprintf_r+0x8c>
 80086f4:	210a      	movs	r1, #10
 80086f6:	434b      	muls	r3, r1
 80086f8:	4667      	mov	r7, ip
 80086fa:	189b      	adds	r3, r3, r2
 80086fc:	3909      	subs	r1, #9
 80086fe:	e7a3      	b.n	8008648 <_vfiprintf_r+0x124>
 8008700:	2301      	movs	r3, #1
 8008702:	425b      	negs	r3, r3
 8008704:	e7ce      	b.n	80086a4 <_vfiprintf_r+0x180>
 8008706:	2300      	movs	r3, #0
 8008708:	001a      	movs	r2, r3
 800870a:	3701      	adds	r7, #1
 800870c:	606b      	str	r3, [r5, #4]
 800870e:	7839      	ldrb	r1, [r7, #0]
 8008710:	1c78      	adds	r0, r7, #1
 8008712:	3930      	subs	r1, #48	; 0x30
 8008714:	4684      	mov	ip, r0
 8008716:	2909      	cmp	r1, #9
 8008718:	d903      	bls.n	8008722 <_vfiprintf_r+0x1fe>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0c3      	beq.n	80086a6 <_vfiprintf_r+0x182>
 800871e:	9209      	str	r2, [sp, #36]	; 0x24
 8008720:	e7c1      	b.n	80086a6 <_vfiprintf_r+0x182>
 8008722:	230a      	movs	r3, #10
 8008724:	435a      	muls	r2, r3
 8008726:	4667      	mov	r7, ip
 8008728:	1852      	adds	r2, r2, r1
 800872a:	3b09      	subs	r3, #9
 800872c:	e7ef      	b.n	800870e <_vfiprintf_r+0x1ea>
 800872e:	ab07      	add	r3, sp, #28
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	0022      	movs	r2, r4
 8008734:	0029      	movs	r1, r5
 8008736:	0030      	movs	r0, r6
 8008738:	4b16      	ldr	r3, [pc, #88]	; (8008794 <_vfiprintf_r+0x270>)
 800873a:	e000      	b.n	800873e <_vfiprintf_r+0x21a>
 800873c:	bf00      	nop
 800873e:	9004      	str	r0, [sp, #16]
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	3301      	adds	r3, #1
 8008744:	d1d1      	bne.n	80086ea <_vfiprintf_r+0x1c6>
 8008746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008748:	07db      	lsls	r3, r3, #31
 800874a:	d405      	bmi.n	8008758 <_vfiprintf_r+0x234>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	059b      	lsls	r3, r3, #22
 8008750:	d402      	bmi.n	8008758 <_vfiprintf_r+0x234>
 8008752:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008754:	f7ff fd6e 	bl	8008234 <__retarget_lock_release_recursive>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	065b      	lsls	r3, r3, #25
 800875c:	d500      	bpl.n	8008760 <_vfiprintf_r+0x23c>
 800875e:	e70a      	b.n	8008576 <_vfiprintf_r+0x52>
 8008760:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008762:	e70a      	b.n	800857a <_vfiprintf_r+0x56>
 8008764:	ab07      	add	r3, sp, #28
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	0022      	movs	r2, r4
 800876a:	0029      	movs	r1, r5
 800876c:	0030      	movs	r0, r6
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <_vfiprintf_r+0x270>)
 8008770:	f000 f882 	bl	8008878 <_printf_i>
 8008774:	e7e3      	b.n	800873e <_vfiprintf_r+0x21a>
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	08008fbc 	.word	0x08008fbc
 800877c:	08008fdc 	.word	0x08008fdc
 8008780:	08008f9c 	.word	0x08008f9c
 8008784:	08008ffc 	.word	0x08008ffc
 8008788:	08009002 	.word	0x08009002
 800878c:	08009006 	.word	0x08009006
 8008790:	00000000 	.word	0x00000000
 8008794:	080084ff 	.word	0x080084ff

08008798 <_printf_common>:
 8008798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800879a:	0015      	movs	r5, r2
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	688a      	ldr	r2, [r1, #8]
 80087a0:	690b      	ldr	r3, [r1, #16]
 80087a2:	000c      	movs	r4, r1
 80087a4:	9000      	str	r0, [sp, #0]
 80087a6:	4293      	cmp	r3, r2
 80087a8:	da00      	bge.n	80087ac <_printf_common+0x14>
 80087aa:	0013      	movs	r3, r2
 80087ac:	0022      	movs	r2, r4
 80087ae:	602b      	str	r3, [r5, #0]
 80087b0:	3243      	adds	r2, #67	; 0x43
 80087b2:	7812      	ldrb	r2, [r2, #0]
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	d001      	beq.n	80087bc <_printf_common+0x24>
 80087b8:	3301      	adds	r3, #1
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	069b      	lsls	r3, r3, #26
 80087c0:	d502      	bpl.n	80087c8 <_printf_common+0x30>
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	3302      	adds	r3, #2
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	2306      	movs	r3, #6
 80087cc:	0017      	movs	r7, r2
 80087ce:	401f      	ands	r7, r3
 80087d0:	421a      	tst	r2, r3
 80087d2:	d027      	beq.n	8008824 <_printf_common+0x8c>
 80087d4:	0023      	movs	r3, r4
 80087d6:	3343      	adds	r3, #67	; 0x43
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	1e5a      	subs	r2, r3, #1
 80087dc:	4193      	sbcs	r3, r2
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	0692      	lsls	r2, r2, #26
 80087e2:	d430      	bmi.n	8008846 <_printf_common+0xae>
 80087e4:	0022      	movs	r2, r4
 80087e6:	9901      	ldr	r1, [sp, #4]
 80087e8:	9800      	ldr	r0, [sp, #0]
 80087ea:	9e08      	ldr	r6, [sp, #32]
 80087ec:	3243      	adds	r2, #67	; 0x43
 80087ee:	47b0      	blx	r6
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d025      	beq.n	8008840 <_printf_common+0xa8>
 80087f4:	2306      	movs	r3, #6
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	682a      	ldr	r2, [r5, #0]
 80087fa:	68e1      	ldr	r1, [r4, #12]
 80087fc:	2500      	movs	r5, #0
 80087fe:	4003      	ands	r3, r0
 8008800:	2b04      	cmp	r3, #4
 8008802:	d103      	bne.n	800880c <_printf_common+0x74>
 8008804:	1a8d      	subs	r5, r1, r2
 8008806:	43eb      	mvns	r3, r5
 8008808:	17db      	asrs	r3, r3, #31
 800880a:	401d      	ands	r5, r3
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	6922      	ldr	r2, [r4, #16]
 8008810:	4293      	cmp	r3, r2
 8008812:	dd01      	ble.n	8008818 <_printf_common+0x80>
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	18ed      	adds	r5, r5, r3
 8008818:	2700      	movs	r7, #0
 800881a:	42bd      	cmp	r5, r7
 800881c:	d120      	bne.n	8008860 <_printf_common+0xc8>
 800881e:	2000      	movs	r0, #0
 8008820:	e010      	b.n	8008844 <_printf_common+0xac>
 8008822:	3701      	adds	r7, #1
 8008824:	68e3      	ldr	r3, [r4, #12]
 8008826:	682a      	ldr	r2, [r5, #0]
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	42bb      	cmp	r3, r7
 800882c:	ddd2      	ble.n	80087d4 <_printf_common+0x3c>
 800882e:	0022      	movs	r2, r4
 8008830:	2301      	movs	r3, #1
 8008832:	9901      	ldr	r1, [sp, #4]
 8008834:	9800      	ldr	r0, [sp, #0]
 8008836:	9e08      	ldr	r6, [sp, #32]
 8008838:	3219      	adds	r2, #25
 800883a:	47b0      	blx	r6
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d1f0      	bne.n	8008822 <_printf_common+0x8a>
 8008840:	2001      	movs	r0, #1
 8008842:	4240      	negs	r0, r0
 8008844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008846:	2030      	movs	r0, #48	; 0x30
 8008848:	18e1      	adds	r1, r4, r3
 800884a:	3143      	adds	r1, #67	; 0x43
 800884c:	7008      	strb	r0, [r1, #0]
 800884e:	0021      	movs	r1, r4
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	3145      	adds	r1, #69	; 0x45
 8008854:	7809      	ldrb	r1, [r1, #0]
 8008856:	18a2      	adds	r2, r4, r2
 8008858:	3243      	adds	r2, #67	; 0x43
 800885a:	3302      	adds	r3, #2
 800885c:	7011      	strb	r1, [r2, #0]
 800885e:	e7c1      	b.n	80087e4 <_printf_common+0x4c>
 8008860:	0022      	movs	r2, r4
 8008862:	2301      	movs	r3, #1
 8008864:	9901      	ldr	r1, [sp, #4]
 8008866:	9800      	ldr	r0, [sp, #0]
 8008868:	9e08      	ldr	r6, [sp, #32]
 800886a:	321a      	adds	r2, #26
 800886c:	47b0      	blx	r6
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d0e6      	beq.n	8008840 <_printf_common+0xa8>
 8008872:	3701      	adds	r7, #1
 8008874:	e7d1      	b.n	800881a <_printf_common+0x82>
	...

08008878 <_printf_i>:
 8008878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887a:	b08b      	sub	sp, #44	; 0x2c
 800887c:	9206      	str	r2, [sp, #24]
 800887e:	000a      	movs	r2, r1
 8008880:	3243      	adds	r2, #67	; 0x43
 8008882:	9307      	str	r3, [sp, #28]
 8008884:	9005      	str	r0, [sp, #20]
 8008886:	9204      	str	r2, [sp, #16]
 8008888:	7e0a      	ldrb	r2, [r1, #24]
 800888a:	000c      	movs	r4, r1
 800888c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800888e:	2a78      	cmp	r2, #120	; 0x78
 8008890:	d807      	bhi.n	80088a2 <_printf_i+0x2a>
 8008892:	2a62      	cmp	r2, #98	; 0x62
 8008894:	d809      	bhi.n	80088aa <_printf_i+0x32>
 8008896:	2a00      	cmp	r2, #0
 8008898:	d100      	bne.n	800889c <_printf_i+0x24>
 800889a:	e0c1      	b.n	8008a20 <_printf_i+0x1a8>
 800889c:	2a58      	cmp	r2, #88	; 0x58
 800889e:	d100      	bne.n	80088a2 <_printf_i+0x2a>
 80088a0:	e08c      	b.n	80089bc <_printf_i+0x144>
 80088a2:	0026      	movs	r6, r4
 80088a4:	3642      	adds	r6, #66	; 0x42
 80088a6:	7032      	strb	r2, [r6, #0]
 80088a8:	e022      	b.n	80088f0 <_printf_i+0x78>
 80088aa:	0010      	movs	r0, r2
 80088ac:	3863      	subs	r0, #99	; 0x63
 80088ae:	2815      	cmp	r0, #21
 80088b0:	d8f7      	bhi.n	80088a2 <_printf_i+0x2a>
 80088b2:	f7f7 fc29 	bl	8000108 <__gnu_thumb1_case_shi>
 80088b6:	0016      	.short	0x0016
 80088b8:	fff6001f 	.word	0xfff6001f
 80088bc:	fff6fff6 	.word	0xfff6fff6
 80088c0:	001ffff6 	.word	0x001ffff6
 80088c4:	fff6fff6 	.word	0xfff6fff6
 80088c8:	fff6fff6 	.word	0xfff6fff6
 80088cc:	003600a8 	.word	0x003600a8
 80088d0:	fff6009a 	.word	0xfff6009a
 80088d4:	00b9fff6 	.word	0x00b9fff6
 80088d8:	0036fff6 	.word	0x0036fff6
 80088dc:	fff6fff6 	.word	0xfff6fff6
 80088e0:	009e      	.short	0x009e
 80088e2:	0026      	movs	r6, r4
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	3642      	adds	r6, #66	; 0x42
 80088e8:	1d11      	adds	r1, r2, #4
 80088ea:	6019      	str	r1, [r3, #0]
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	7033      	strb	r3, [r6, #0]
 80088f0:	2301      	movs	r3, #1
 80088f2:	e0a7      	b.n	8008a44 <_printf_i+0x1cc>
 80088f4:	6808      	ldr	r0, [r1, #0]
 80088f6:	6819      	ldr	r1, [r3, #0]
 80088f8:	1d0a      	adds	r2, r1, #4
 80088fa:	0605      	lsls	r5, r0, #24
 80088fc:	d50b      	bpl.n	8008916 <_printf_i+0x9e>
 80088fe:	680d      	ldr	r5, [r1, #0]
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	2d00      	cmp	r5, #0
 8008904:	da03      	bge.n	800890e <_printf_i+0x96>
 8008906:	232d      	movs	r3, #45	; 0x2d
 8008908:	9a04      	ldr	r2, [sp, #16]
 800890a:	426d      	negs	r5, r5
 800890c:	7013      	strb	r3, [r2, #0]
 800890e:	4b61      	ldr	r3, [pc, #388]	; (8008a94 <_printf_i+0x21c>)
 8008910:	270a      	movs	r7, #10
 8008912:	9303      	str	r3, [sp, #12]
 8008914:	e01b      	b.n	800894e <_printf_i+0xd6>
 8008916:	680d      	ldr	r5, [r1, #0]
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	0641      	lsls	r1, r0, #25
 800891c:	d5f1      	bpl.n	8008902 <_printf_i+0x8a>
 800891e:	b22d      	sxth	r5, r5
 8008920:	e7ef      	b.n	8008902 <_printf_i+0x8a>
 8008922:	680d      	ldr	r5, [r1, #0]
 8008924:	6819      	ldr	r1, [r3, #0]
 8008926:	1d08      	adds	r0, r1, #4
 8008928:	6018      	str	r0, [r3, #0]
 800892a:	062e      	lsls	r6, r5, #24
 800892c:	d501      	bpl.n	8008932 <_printf_i+0xba>
 800892e:	680d      	ldr	r5, [r1, #0]
 8008930:	e003      	b.n	800893a <_printf_i+0xc2>
 8008932:	066d      	lsls	r5, r5, #25
 8008934:	d5fb      	bpl.n	800892e <_printf_i+0xb6>
 8008936:	680d      	ldr	r5, [r1, #0]
 8008938:	b2ad      	uxth	r5, r5
 800893a:	4b56      	ldr	r3, [pc, #344]	; (8008a94 <_printf_i+0x21c>)
 800893c:	2708      	movs	r7, #8
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	2a6f      	cmp	r2, #111	; 0x6f
 8008942:	d000      	beq.n	8008946 <_printf_i+0xce>
 8008944:	3702      	adds	r7, #2
 8008946:	0023      	movs	r3, r4
 8008948:	2200      	movs	r2, #0
 800894a:	3343      	adds	r3, #67	; 0x43
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	6863      	ldr	r3, [r4, #4]
 8008950:	60a3      	str	r3, [r4, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	db03      	blt.n	800895e <_printf_i+0xe6>
 8008956:	2204      	movs	r2, #4
 8008958:	6821      	ldr	r1, [r4, #0]
 800895a:	4391      	bics	r1, r2
 800895c:	6021      	str	r1, [r4, #0]
 800895e:	2d00      	cmp	r5, #0
 8008960:	d102      	bne.n	8008968 <_printf_i+0xf0>
 8008962:	9e04      	ldr	r6, [sp, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00c      	beq.n	8008982 <_printf_i+0x10a>
 8008968:	9e04      	ldr	r6, [sp, #16]
 800896a:	0028      	movs	r0, r5
 800896c:	0039      	movs	r1, r7
 800896e:	f7f7 fc5b 	bl	8000228 <__aeabi_uidivmod>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	3e01      	subs	r6, #1
 8008976:	5c5b      	ldrb	r3, [r3, r1]
 8008978:	7033      	strb	r3, [r6, #0]
 800897a:	002b      	movs	r3, r5
 800897c:	0005      	movs	r5, r0
 800897e:	429f      	cmp	r7, r3
 8008980:	d9f3      	bls.n	800896a <_printf_i+0xf2>
 8008982:	2f08      	cmp	r7, #8
 8008984:	d109      	bne.n	800899a <_printf_i+0x122>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	07db      	lsls	r3, r3, #31
 800898a:	d506      	bpl.n	800899a <_printf_i+0x122>
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	6922      	ldr	r2, [r4, #16]
 8008990:	4293      	cmp	r3, r2
 8008992:	dc02      	bgt.n	800899a <_printf_i+0x122>
 8008994:	2330      	movs	r3, #48	; 0x30
 8008996:	3e01      	subs	r6, #1
 8008998:	7033      	strb	r3, [r6, #0]
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	1b9b      	subs	r3, r3, r6
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	9b07      	ldr	r3, [sp, #28]
 80089a2:	0021      	movs	r1, r4
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	9805      	ldr	r0, [sp, #20]
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	aa09      	add	r2, sp, #36	; 0x24
 80089ac:	f7ff fef4 	bl	8008798 <_printf_common>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d14c      	bne.n	8008a4e <_printf_i+0x1d6>
 80089b4:	2001      	movs	r0, #1
 80089b6:	4240      	negs	r0, r0
 80089b8:	b00b      	add	sp, #44	; 0x2c
 80089ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089bc:	3145      	adds	r1, #69	; 0x45
 80089be:	700a      	strb	r2, [r1, #0]
 80089c0:	4a34      	ldr	r2, [pc, #208]	; (8008a94 <_printf_i+0x21c>)
 80089c2:	9203      	str	r2, [sp, #12]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	6821      	ldr	r1, [r4, #0]
 80089c8:	ca20      	ldmia	r2!, {r5}
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	0608      	lsls	r0, r1, #24
 80089ce:	d516      	bpl.n	80089fe <_printf_i+0x186>
 80089d0:	07cb      	lsls	r3, r1, #31
 80089d2:	d502      	bpl.n	80089da <_printf_i+0x162>
 80089d4:	2320      	movs	r3, #32
 80089d6:	4319      	orrs	r1, r3
 80089d8:	6021      	str	r1, [r4, #0]
 80089da:	2710      	movs	r7, #16
 80089dc:	2d00      	cmp	r5, #0
 80089de:	d1b2      	bne.n	8008946 <_printf_i+0xce>
 80089e0:	2320      	movs	r3, #32
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	439a      	bics	r2, r3
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	e7ad      	b.n	8008946 <_printf_i+0xce>
 80089ea:	2220      	movs	r2, #32
 80089ec:	6809      	ldr	r1, [r1, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	0022      	movs	r2, r4
 80089f4:	2178      	movs	r1, #120	; 0x78
 80089f6:	3245      	adds	r2, #69	; 0x45
 80089f8:	7011      	strb	r1, [r2, #0]
 80089fa:	4a27      	ldr	r2, [pc, #156]	; (8008a98 <_printf_i+0x220>)
 80089fc:	e7e1      	b.n	80089c2 <_printf_i+0x14a>
 80089fe:	0648      	lsls	r0, r1, #25
 8008a00:	d5e6      	bpl.n	80089d0 <_printf_i+0x158>
 8008a02:	b2ad      	uxth	r5, r5
 8008a04:	e7e4      	b.n	80089d0 <_printf_i+0x158>
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	680d      	ldr	r5, [r1, #0]
 8008a0a:	1d10      	adds	r0, r2, #4
 8008a0c:	6949      	ldr	r1, [r1, #20]
 8008a0e:	6018      	str	r0, [r3, #0]
 8008a10:	6813      	ldr	r3, [r2, #0]
 8008a12:	062e      	lsls	r6, r5, #24
 8008a14:	d501      	bpl.n	8008a1a <_printf_i+0x1a2>
 8008a16:	6019      	str	r1, [r3, #0]
 8008a18:	e002      	b.n	8008a20 <_printf_i+0x1a8>
 8008a1a:	066d      	lsls	r5, r5, #25
 8008a1c:	d5fb      	bpl.n	8008a16 <_printf_i+0x19e>
 8008a1e:	8019      	strh	r1, [r3, #0]
 8008a20:	2300      	movs	r3, #0
 8008a22:	9e04      	ldr	r6, [sp, #16]
 8008a24:	6123      	str	r3, [r4, #16]
 8008a26:	e7bb      	b.n	80089a0 <_printf_i+0x128>
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	1d11      	adds	r1, r2, #4
 8008a2c:	6019      	str	r1, [r3, #0]
 8008a2e:	6816      	ldr	r6, [r2, #0]
 8008a30:	2100      	movs	r1, #0
 8008a32:	0030      	movs	r0, r6
 8008a34:	6862      	ldr	r2, [r4, #4]
 8008a36:	f000 f8ed 	bl	8008c14 <memchr>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d001      	beq.n	8008a42 <_printf_i+0x1ca>
 8008a3e:	1b80      	subs	r0, r0, r6
 8008a40:	6060      	str	r0, [r4, #4]
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	2300      	movs	r3, #0
 8008a48:	9a04      	ldr	r2, [sp, #16]
 8008a4a:	7013      	strb	r3, [r2, #0]
 8008a4c:	e7a8      	b.n	80089a0 <_printf_i+0x128>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	0032      	movs	r2, r6
 8008a52:	9906      	ldr	r1, [sp, #24]
 8008a54:	9805      	ldr	r0, [sp, #20]
 8008a56:	9d07      	ldr	r5, [sp, #28]
 8008a58:	47a8      	blx	r5
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d0aa      	beq.n	80089b4 <_printf_i+0x13c>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	079b      	lsls	r3, r3, #30
 8008a62:	d415      	bmi.n	8008a90 <_printf_i+0x218>
 8008a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a66:	68e0      	ldr	r0, [r4, #12]
 8008a68:	4298      	cmp	r0, r3
 8008a6a:	daa5      	bge.n	80089b8 <_printf_i+0x140>
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	e7a3      	b.n	80089b8 <_printf_i+0x140>
 8008a70:	0022      	movs	r2, r4
 8008a72:	2301      	movs	r3, #1
 8008a74:	9906      	ldr	r1, [sp, #24]
 8008a76:	9805      	ldr	r0, [sp, #20]
 8008a78:	9e07      	ldr	r6, [sp, #28]
 8008a7a:	3219      	adds	r2, #25
 8008a7c:	47b0      	blx	r6
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	d098      	beq.n	80089b4 <_printf_i+0x13c>
 8008a82:	3501      	adds	r5, #1
 8008a84:	68e3      	ldr	r3, [r4, #12]
 8008a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	42ab      	cmp	r3, r5
 8008a8c:	dcf0      	bgt.n	8008a70 <_printf_i+0x1f8>
 8008a8e:	e7e9      	b.n	8008a64 <_printf_i+0x1ec>
 8008a90:	2500      	movs	r5, #0
 8008a92:	e7f7      	b.n	8008a84 <_printf_i+0x20c>
 8008a94:	0800900d 	.word	0x0800900d
 8008a98:	0800901e 	.word	0x0800901e

08008a9c <_sbrk_r>:
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	b570      	push	{r4, r5, r6, lr}
 8008aa0:	4d06      	ldr	r5, [pc, #24]	; (8008abc <_sbrk_r+0x20>)
 8008aa2:	0004      	movs	r4, r0
 8008aa4:	0008      	movs	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f8 fa58 	bl	8000f5c <_sbrk>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d103      	bne.n	8008ab8 <_sbrk_r+0x1c>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d000      	beq.n	8008ab8 <_sbrk_r+0x1c>
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	200006c4 	.word	0x200006c4

08008ac0 <__sread>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	000c      	movs	r4, r1
 8008ac4:	250e      	movs	r5, #14
 8008ac6:	5f49      	ldrsh	r1, [r1, r5]
 8008ac8:	f000 f8c0 	bl	8008c4c <_read_r>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	db03      	blt.n	8008ad8 <__sread+0x18>
 8008ad0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008ad2:	181b      	adds	r3, r3, r0
 8008ad4:	6563      	str	r3, [r4, #84]	; 0x54
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	4a02      	ldr	r2, [pc, #8]	; (8008ae4 <__sread+0x24>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	e7f9      	b.n	8008ad6 <__sread+0x16>
 8008ae2:	46c0      	nop			; (mov r8, r8)
 8008ae4:	ffffefff 	.word	0xffffefff

08008ae8 <__swrite>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	001f      	movs	r7, r3
 8008aec:	898b      	ldrh	r3, [r1, #12]
 8008aee:	0005      	movs	r5, r0
 8008af0:	000c      	movs	r4, r1
 8008af2:	0016      	movs	r6, r2
 8008af4:	05db      	lsls	r3, r3, #23
 8008af6:	d505      	bpl.n	8008b04 <__swrite+0x1c>
 8008af8:	230e      	movs	r3, #14
 8008afa:	5ec9      	ldrsh	r1, [r1, r3]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2302      	movs	r3, #2
 8008b00:	f000 f874 	bl	8008bec <_lseek_r>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	4a05      	ldr	r2, [pc, #20]	; (8008b1c <__swrite+0x34>)
 8008b08:	0028      	movs	r0, r5
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	0032      	movs	r2, r6
 8008b10:	230e      	movs	r3, #14
 8008b12:	5ee1      	ldrsh	r1, [r4, r3]
 8008b14:	003b      	movs	r3, r7
 8008b16:	f000 f81f 	bl	8008b58 <_write_r>
 8008b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1c:	ffffefff 	.word	0xffffefff

08008b20 <__sseek>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	000c      	movs	r4, r1
 8008b24:	250e      	movs	r5, #14
 8008b26:	5f49      	ldrsh	r1, [r1, r5]
 8008b28:	f000 f860 	bl	8008bec <_lseek_r>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	1c42      	adds	r2, r0, #1
 8008b30:	d103      	bne.n	8008b3a <__sseek+0x1a>
 8008b32:	4a05      	ldr	r2, [pc, #20]	; (8008b48 <__sseek+0x28>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
 8008b3a:	2280      	movs	r2, #128	; 0x80
 8008b3c:	0152      	lsls	r2, r2, #5
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	6560      	str	r0, [r4, #84]	; 0x54
 8008b44:	e7f8      	b.n	8008b38 <__sseek+0x18>
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	ffffefff 	.word	0xffffefff

08008b4c <__sclose>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	230e      	movs	r3, #14
 8008b50:	5ec9      	ldrsh	r1, [r1, r3]
 8008b52:	f000 f815 	bl	8008b80 <_close_r>
 8008b56:	bd10      	pop	{r4, pc}

08008b58 <_write_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	0004      	movs	r4, r0
 8008b5c:	0008      	movs	r0, r1
 8008b5e:	0011      	movs	r1, r2
 8008b60:	001a      	movs	r2, r3
 8008b62:	2300      	movs	r3, #0
 8008b64:	4d05      	ldr	r5, [pc, #20]	; (8008b7c <_write_r+0x24>)
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7f7 fb64 	bl	8000234 <_write>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d103      	bne.n	8008b78 <_write_r+0x20>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d000      	beq.n	8008b78 <_write_r+0x20>
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	200006c4 	.word	0x200006c4

08008b80 <_close_r>:
 8008b80:	2300      	movs	r3, #0
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_close_r+0x20>)
 8008b86:	0004      	movs	r4, r0
 8008b88:	0008      	movs	r0, r1
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	f7f8 f9b9 	bl	8000f02 <_close>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d103      	bne.n	8008b9c <_close_r+0x1c>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d000      	beq.n	8008b9c <_close_r+0x1c>
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	bd70      	pop	{r4, r5, r6, pc}
 8008b9e:	46c0      	nop			; (mov r8, r8)
 8008ba0:	200006c4 	.word	0x200006c4

08008ba4 <_fstat_r>:
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	b570      	push	{r4, r5, r6, lr}
 8008ba8:	4d06      	ldr	r5, [pc, #24]	; (8008bc4 <_fstat_r+0x20>)
 8008baa:	0004      	movs	r4, r0
 8008bac:	0008      	movs	r0, r1
 8008bae:	0011      	movs	r1, r2
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	f7f8 f9b0 	bl	8000f16 <_fstat>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	d103      	bne.n	8008bc2 <_fstat_r+0x1e>
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d000      	beq.n	8008bc2 <_fstat_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	200006c4 	.word	0x200006c4

08008bc8 <_isatty_r>:
 8008bc8:	2300      	movs	r3, #0
 8008bca:	b570      	push	{r4, r5, r6, lr}
 8008bcc:	4d06      	ldr	r5, [pc, #24]	; (8008be8 <_isatty_r+0x20>)
 8008bce:	0004      	movs	r4, r0
 8008bd0:	0008      	movs	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7f8 f9ad 	bl	8000f32 <_isatty>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d103      	bne.n	8008be4 <_isatty_r+0x1c>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d000      	beq.n	8008be4 <_isatty_r+0x1c>
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	200006c4 	.word	0x200006c4

08008bec <_lseek_r>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	0004      	movs	r4, r0
 8008bf0:	0008      	movs	r0, r1
 8008bf2:	0011      	movs	r1, r2
 8008bf4:	001a      	movs	r2, r3
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4d05      	ldr	r5, [pc, #20]	; (8008c10 <_lseek_r+0x24>)
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7f8 f9a2 	bl	8000f44 <_lseek>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d103      	bne.n	8008c0c <_lseek_r+0x20>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d000      	beq.n	8008c0c <_lseek_r+0x20>
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	bd70      	pop	{r4, r5, r6, pc}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	200006c4 	.word	0x200006c4

08008c14 <memchr>:
 8008c14:	b2c9      	uxtb	r1, r1
 8008c16:	1882      	adds	r2, r0, r2
 8008c18:	4290      	cmp	r0, r2
 8008c1a:	d101      	bne.n	8008c20 <memchr+0xc>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	4770      	bx	lr
 8008c20:	7803      	ldrb	r3, [r0, #0]
 8008c22:	428b      	cmp	r3, r1
 8008c24:	d0fb      	beq.n	8008c1e <memchr+0xa>
 8008c26:	3001      	adds	r0, #1
 8008c28:	e7f6      	b.n	8008c18 <memchr+0x4>
	...

08008c2c <__malloc_lock>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	4802      	ldr	r0, [pc, #8]	; (8008c38 <__malloc_lock+0xc>)
 8008c30:	f7ff faff 	bl	8008232 <__retarget_lock_acquire_recursive>
 8008c34:	bd10      	pop	{r4, pc}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	200006b6 	.word	0x200006b6

08008c3c <__malloc_unlock>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	4802      	ldr	r0, [pc, #8]	; (8008c48 <__malloc_unlock+0xc>)
 8008c40:	f7ff faf8 	bl	8008234 <__retarget_lock_release_recursive>
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	200006b6 	.word	0x200006b6

08008c4c <_read_r>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	0004      	movs	r4, r0
 8008c50:	0008      	movs	r0, r1
 8008c52:	0011      	movs	r1, r2
 8008c54:	001a      	movs	r2, r3
 8008c56:	2300      	movs	r3, #0
 8008c58:	4d05      	ldr	r5, [pc, #20]	; (8008c70 <_read_r+0x24>)
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f8 f934 	bl	8000ec8 <_read>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d103      	bne.n	8008c6c <_read_r+0x20>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d000      	beq.n	8008c6c <_read_r+0x20>
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	200006c4 	.word	0x200006c4

08008c74 <_init>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr

08008c80 <_fini>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	46c0      	nop			; (mov r8, r8)
 8008c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c86:	bc08      	pop	{r3}
 8008c88:	469e      	mov	lr, r3
 8008c8a:	4770      	bx	lr
